#! /usr/bin/env python
# encoding: utf-8

import Task, TaskGen, Utils, Logs, os, errno, shutil, re

# task function for task "dsp"
def dsp2cc(task):
    # use the specified processor to create the output file and copy
    # the output file into faust-generated in the source tree
    src = task.inputs[0].srcpath(task.env)
    o = task.outputs[0]
    dst = o.bldpath(task.env)
    cpy = os.path.join(o.parent.srcpath(task.env)+"-generated",o.file())
    lst = [task.proc,"-o",dst] + task.proc_args + [src]
    Logs.debug("runner: system command -> %s" % " ".join(lst))
    ret = Utils.exec_command(lst,shell=False)
    if ret != 0:
        return ret
    try:
        shutil.copy2(dst, cpy)
    except (OSError, IOError), e:
        Logs.error("runner: cannot copy file -> %s" % e)
        return e.errno
    return 0

class FaustScanner(object):

    scan_re = "|".join([
        r'\bimport\s*\(\s*"(?P<I>[^"]+)"\s*\)\s*;',
        r'\bcomponent\s*\(\s*"(?P<C>[^"]+)"\s*\)',
        ])

    def scan_file(self, task, node):
        pname = node.parent.abspath(task.env)
        for m in re.finditer(self.scan_re, node.read(task.env)):
            for fname in m.groupdict().values():
                if not fname:
                    continue
                key = (pname, fname)
                if key in self.scanned:
                    continue
                self.scanned.add(key)
                n = node.parent.find_resource(fname)
                if n:
                    self.deps.append(n)
                    self.scan_file(task, n)
                    

    def scan(self, task):
        self.deps = []
        self.scanned = set()
        for node in task.inputs:
            self.scan_file(task, node)
        return self.deps, []

dsp_scanner = FaustScanner()

def scan_dsp(task):
    return dsp_scanner.scan(task)

# definition of task "dsp"
Task.task_type_from_func(
    name    = 'dsp',
    func    = dsp2cc,
    color   = 'BLUE',
    ext_in  = '.dsp',
    ext_out = '.cc',
    before  = 'cc cxx',
    ).scan = scan_dsp

@TaskGen.extension('.dsp')
def dsp_file(self, node):
    tsk = self.create_task('dsp')
    tsk.proc = self.proc
    tsk.proc_args = getattr(self, "proc_args", [])
    tsk.set_inputs(node)
    tsk.dep_vars = ['DSP2CC_ARGS']
    tsk.env['DSP2CC_ARGS'] = tsk.proc_args
    parent = node.parent
    o = node.change_ext('.cc')
    tsk.set_outputs(o)
    self.bld.add_manual_dependency(node,self.bld.bldnode.find_resource(self.proc))

def build(bld):
    unused_sources = [
        'preamp.dsp',
        'inputgain.dsp',
        'AntiAlias.dsp',
        'HighShelf.dsp',
        'drive.dsp',
        'osc_tube.dsp',
        'reso_tube.dsp',
        'tube.dsp',
        'tube3.dsp',
        'tubevibrato.dsp',
        'multifilter.dsp',
        'eq.dsp',
        'outputgain.dsp',
        'feed.dsp',
        'balance1.dsp',
        'amp2.dsp',
        'stage3.dsp',
        'distortion.dsp',
        'distortion1.dsp',
        'noisegate.dsp',
        'sloop.dsp', ##float
        ]

    sources = [
        'presence_level.dsp',
        'jconv_post.dsp',
        'cabinet_impulse_former.dsp',
        ]

    sources_plugin_float = [
        'echo.dsp',
        'delay.dsp',
        'chorus.dsp',
        'stereodelay.dsp',
        'stereoecho.dsp',
        ]

    sources_plugin = [
        'low_high_pass.dsp',
        'selecteq.dsp',
        'crybaby.dsp',
        'autowah.dsp',
        'gx_distortion.dsp',
        'impulseresponse.dsp',
        'compressor.dsp',
        'overdrive.dsp',
        'freeverb.dsp',
        'biquad.dsp',
        'tremolo.dsp',
        'phaser_mono.dsp',
        'chorus_mono.dsp',
        'flanger_mono.dsp',
        'gx_feedback.dsp',
        'flanger.dsp',
        'moog.dsp',
        'phaser.dsp',
        'gx_ampmodul.dsp',
        'tonecontroll.dsp',
        'stereoverb.dsp',
        'softclip.dsp',
        'gx_ampout.dsp',
        'noise_shaper.dsp',
        'bassbooster.dsp',
        'gx_outputlevel.dsp',
        'gxfeed.dsp',

        # tone stacks
        'tonestack_default.dsp',
        'tonestack_bassman.dsp',
        'tonestack_twin.dsp',
        'tonestack_princeton.dsp',
        'tonestack_jcm800.dsp',
        'tonestack_jcm2000.dsp',
        'tonestack_mlead.dsp',
        'tonestack_m2199.dsp',
        'tonestack_ac30.dsp',
        'tonestack_soldano.dsp',
        'tonestack_mesa.dsp',
        'tonestack_jtm45.dsp',
        'tonestack_ac15.dsp',
        'tonestack_peavey.dsp',
        'tonestack_ibanez.dsp',
        'tonestack_roland.dsp',
        'tonestack_ampeg.dsp',
        'tonestack_ampeg_rev.dsp',
        'tonestack_sovtek.dsp',
        'tonestack_bogner.dsp',
        'tonestack_groove.dsp',
        'tonestack_crunch.dsp',
        'tonestack_fender_blues.dsp',
        'tonestack_fender_default.dsp',
        'tonestack_fender_deville.dsp',
        'tonestack_gibsen.dsp',

        # amps
        'gxamp.dsp',
        'gxamp2.dsp',
        'gxamp3.dsp',
        'gxamp4.dsp',
        'gxamp5.dsp',
        'gxamp6.dsp',
        'gxamp7.dsp',
        'gxamp8.dsp',
        'gxamp9.dsp',
        'gxamp10.dsp',
        'gxamp11.dsp',
        'gxamp12.dsp',
        'gxamp13.dsp',
        'gxamp14.dsp',
        'gxamp15.dsp',
        'gxamp16.dsp',
        'gxamp17.dsp',

        # bypass mode
        'balance.dsp',
        ]

    if bld.env['FAUST']:
        float_arg = ["-s","40000","-float"]
        if bld.env['FAUST_DOUBLE']:
            arg = ["-double"]
        else:
            arg = ["-float"]
        bld.new_task_gen(
            source = sources,
            proc = "../tools/dsp2cc",
            proc_args = arg+["--init-type=no-init"],
            )
        bld.new_task_gen(
            source = sources_plugin,
            proc = "../tools/dsp2cc",
            proc_args = arg+["--init-type=plugin"],
            )
        bld.new_task_gen(
            source = sources_plugin_float,
            proc = "../tools/dsp2cc",
            proc_args = float_arg+["--init-type=plugin"]
            )
    else:
        gdir = "../faust-generated/"
        for s in sources + sources_plugin_float + sources_plugin:
            s = s.replace(".dsp",".cc")
            bld(name = "copy-faust-cc",
                rule = "cp ${SRC} ${TGT}",
                source = gdir + s,
                target = s,
            )
    bld.add_group()

def configure(conf):
    pass
