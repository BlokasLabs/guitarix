namespace gx_distortion {
// generated from file '../src/faust/gx_distortion.dsp'

int 	iVec0[2];
double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
double 	fConst5;
double 	fConst6;
FAUSTFLOAT 	fslider0;
double 	fRec1[2];
double 	fConst7;
double 	fConst8;
double 	fConst9;
FAUSTFLOAT 	fentry0;
double 	fConst10;
FAUSTFLOAT 	fentry1;
FAUSTFLOAT 	fentry2;
double 	fConst11;
double 	fConst12;
double 	fConst13;
double 	fConst14;
double 	fConst15;
double 	fConst16;
double 	fConst17;
double 	fConst18;
double 	fConst19;
double 	fRec12[2];
FAUSTFLOAT 	fslider1;
int 	IOTA;
double 	fVec1[4096];
FAUSTFLOAT 	fslider2;
double 	fRec13[2];
FAUSTFLOAT 	fcheckbox0;
double 	fVec2[3];
double 	fConst20;
double 	fConst21;
double 	fConst22;
double 	fConst23;
double 	fConst24;
double 	fRec11[3];
double 	fRec10[3];
double 	fVec3[2];
double 	fConst25;
double 	fConst26;
double 	fRec9[2];
double 	fRec8[2];
double 	fRec7[3];
double 	fVec4[2];
double 	fRec6[2];
double 	fRec5[3];
double 	fVec5[2];
double 	fRec4[2];
double 	fRec3[3];
FAUSTFLOAT 	fslider3;
FAUSTFLOAT 	fslider4;
FAUSTFLOAT 	fslider5;
FAUSTFLOAT 	fslider6;
double 	fRec14[2];
double 	fRec16[2];
double 	fRec15[3];
FAUSTFLOAT 	fslider7;
FAUSTFLOAT 	fslider8;
double 	fRec17[2];
double 	fRec20[2];
double 	fRec19[3];
double 	fRec18[3];
FAUSTFLOAT 	fslider9;
FAUSTFLOAT 	fslider10;
double 	fRec21[2];
double 	fRec25[2];
double 	fRec24[3];
double 	fRec23[3];
double 	fRec22[3];
FAUSTFLOAT 	fslider11;
FAUSTFLOAT 	fslider12;
double 	fRec26[2];
double 	fVec6[2];
double 	fConst27;
double 	fRec2[2];
double 	fVec7[3];
double 	fRec0[3];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	for (int i=0; i<2; i++) iVec0[i] = 0;
	fConst0 = (6.283185307179586 * (max(0, ((0.5 * fSamplingFreq) - 1e+02)) / fSamplingFreq));
	fConst1 = cos(fConst0);
	fConst2 = (1.316227766016838 * fConst1);
	fConst3 = (0 - (2 * (0 - (0.683772233983162 + fConst2))));
	fConst4 = (0.683772233983162 * fConst1);
	fConst5 = (0.005623413251903491 * sin(fConst0));
	fConst6 = (fConst5 - (fConst4 + 1.316227766016838));
	for (int i=0; i<2; i++) fRec1[i] = 0;
	fConst7 = (1.0 / tan((20517.741620594938 / fSamplingFreq)));
	fConst8 = (1 + fConst7);
	fConst9 = (0 - ((1 - fConst7) / fConst8));
	fConst10 = (3.141592653589793 / fSamplingFreq);
	fConst11 = (1.0 / tan((97.38937226128358 / fSamplingFreq)));
	fConst12 = (1 + fConst11);
	fConst13 = (0 - ((1 - fConst11) / fConst12));
	fConst14 = tan((47123.8898038469 / fSamplingFreq));
	fConst15 = (2 * (1 - (1.0 / faustpower<2>(fConst14))));
	fConst16 = (1.0 / fConst14);
	fConst17 = (1 + ((fConst16 - 1.414213562373095) / fConst14));
	fConst18 = (1 + ((1.414213562373095 + fConst16) / fConst14));
	fConst19 = (1.0 / fConst18);
	for (int i=0; i<2; i++) fRec12[i] = 0;
	IOTA = 0;
	for (int i=0; i<4096; i++) fVec1[i] = 0;
	for (int i=0; i<2; i++) fRec13[i] = 0;
	for (int i=0; i<3; i++) fVec2[i] = 0;
	fConst20 = (fConst5 + fConst4);
	fConst21 = (0.31622776601683794 * (1.316227766016838 - fConst20));
	fConst22 = (0.31622776601683794 * ((fConst5 + 1.316227766016838) - fConst4));
	fConst23 = (0 - (0.6324555320336759 * (fConst2 - 0.683772233983162)));
	fConst24 = (1.0 / (1.316227766016838 + fConst20));
	for (int i=0; i<3; i++) fRec11[i] = 0;
	for (int i=0; i<3; i++) fRec10[i] = 0;
	for (int i=0; i<2; i++) fVec3[i] = 0;
	fConst25 = (0 - fConst11);
	fConst26 = (1.0 / (fConst12 * fConst18));
	for (int i=0; i<2; i++) fRec9[i] = 0;
	for (int i=0; i<2; i++) fRec8[i] = 0;
	for (int i=0; i<3; i++) fRec7[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<3; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fVec5[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<3; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fRec14[i] = 0;
	for (int i=0; i<2; i++) fRec16[i] = 0;
	for (int i=0; i<3; i++) fRec15[i] = 0;
	for (int i=0; i<2; i++) fRec17[i] = 0;
	for (int i=0; i<2; i++) fRec20[i] = 0;
	for (int i=0; i<3; i++) fRec19[i] = 0;
	for (int i=0; i<3; i++) fRec18[i] = 0;
	for (int i=0; i<2; i++) fRec21[i] = 0;
	for (int i=0; i<2; i++) fRec25[i] = 0;
	for (int i=0; i<3; i++) fRec24[i] = 0;
	for (int i=0; i<3; i++) fRec23[i] = 0;
	for (int i=0; i<3; i++) fRec22[i] = 0;
	for (int i=0; i<2; i++) fRec26[i] = 0;
	for (int i=0; i<2; i++) fVec6[i] = 0;
	fConst27 = (1.0 / fConst8);
	for (int i=0; i<2; i++) fRec2[i] = 0;
	for (int i=0; i<3; i++) fVec7[i] = 0;
	for (int i=0; i<3; i++) fRec0[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = (0.0010000000000000009 * pow(10,(0.05 * (fslider0 - 10))));
	double 	fSlow1 = tan((fConst10 * fentry0));
	double 	fSlow2 = (1.0 / faustpower<2>(fSlow1));
	double 	fSlow3 = (2 * (1 - fSlow2));
	double 	fSlow4 = (1.0 / fSlow1);
	double 	fSlow5 = (1 + ((fSlow4 - 1.0000000000000004) / fSlow1));
	double 	fSlow6 = (1 + ((fSlow4 + 1.0000000000000004) / fSlow1));
	double 	fSlow7 = (1.0 / fSlow6);
	double 	fSlow8 = (1 + fSlow4);
	double 	fSlow9 = (0 - ((1 - fSlow4) / fSlow8));
	double 	fSlow10 = tan((fConst10 * fentry1));
	double 	fSlow11 = (1.0 / faustpower<2>(fSlow10));
	double 	fSlow12 = (2 * (1 - fSlow11));
	double 	fSlow13 = (1.0 / fSlow10);
	double 	fSlow14 = (1 + ((fSlow13 - 1.0000000000000004) / fSlow10));
	double 	fSlow15 = (1 + ((fSlow13 + 1.0000000000000004) / fSlow10));
	double 	fSlow16 = (1.0 / fSlow15);
	double 	fSlow17 = (1 + fSlow13);
	double 	fSlow18 = (0 - ((1 - fSlow13) / fSlow17));
	double 	fSlow19 = tan((fConst10 * fentry2));
	double 	fSlow20 = (1.0 / faustpower<2>(fSlow19));
	double 	fSlow21 = (2 * (1 - fSlow20));
	double 	fSlow22 = (1.0 / fSlow19);
	double 	fSlow23 = (1 + ((fSlow22 - 1.0000000000000004) / fSlow19));
	double 	fSlow24 = (1 + ((1.0000000000000004 + fSlow22) / fSlow19));
	double 	fSlow25 = (1.0 / fSlow24);
	double 	fSlow26 = (1 + fSlow22);
	double 	fSlow27 = (0 - ((1 - fSlow22) / fSlow26));
	double 	fSlow28 = (1.0 - fslider1);
	double 	fSlow29 = fslider2;
	int 	iSlow30 = int((int((fSlow29 - 1)) & 4095));
	int 	iSlow31 = int((int(fSlow29) & 4095));
	int 	iSlow32 = int(fcheckbox0);
	double 	fSlow33 = (1.0 / fSlow26);
	double 	fSlow34 = (1.0 / fSlow17);
	double 	fSlow35 = (1.0 / (fSlow1 * fSlow15));
	double 	fSlow36 = (0 - fSlow4);
	double 	fSlow37 = (1.0 / fSlow8);
	double 	fSlow38 = (2 * (0 - fSlow2));
	double 	fSlow39 = fslider4;
	double 	fSlow40 = (pow(1e+01,(2 * (fSlow39 * fslider3))) / fSlow6);
	double 	fSlow41 = fslider5;
	double 	fSlow42 = (0.0010000000000000009 * pow(10,(0.05 * (fslider6 - 10))));
	double 	fSlow43 = (pow(1e+01,(2 * (fSlow39 * fslider7))) / fSlow6);
	double 	fSlow44 = (0.0010000000000000009 * pow(10,(0.05 * (fslider8 - 10))));
	double 	fSlow45 = (1 + ((fSlow4 - 1.0) / fSlow1));
	double 	fSlow46 = (1.0 / (1 + ((1.0 + fSlow4) / fSlow1)));
	double 	fSlow47 = (1.0 / (fSlow10 * fSlow24));
	double 	fSlow48 = (0 - fSlow13);
	double 	fSlow49 = (2 * (0 - fSlow11));
	double 	fSlow50 = pow(1e+01,(2 * (fSlow39 * fslider9)));
	double 	fSlow51 = (0.0010000000000000009 * pow(10,(0.05 * (fslider10 - 10))));
	double 	fSlow52 = (1 + ((fSlow13 - 1.0) / fSlow10));
	double 	fSlow53 = (1.0 / (1 + ((1.0 + fSlow13) / fSlow10)));
	double 	fSlow54 = (0 - fSlow22);
	double 	fSlow55 = (2 * (0 - fSlow20));
	double 	fSlow56 = pow(1e+01,(2 * (fSlow39 * fslider11)));
	double 	fSlow57 = (0.0010000000000000009 * pow(10,(0.05 * (fslider12 - 10))));
	for (int i=0; i<count; i++) {
		iVec0[0] = 1;
		fRec1[0] = (fSlow0 + (0.999 * fRec1[1]));
		fRec12[0] = ((1e-20 * (1 - iVec0[1])) - fRec12[1]);
		double fTemp0 = (double)input0[i];
		double fTemp1 = (fTemp0 + (fSlow28 * fRec13[1]));
		fVec1[IOTA&4095] = fTemp1;
		fRec13[0] = (0.5 * (fVec1[(IOTA-iSlow31)&4095] + fVec1[(IOTA-iSlow30)&4095]));
		double fTemp2 = (((iSlow32)?fRec13[0]:fTemp0) + fRec12[0]);
		fVec2[0] = fTemp2;
		fRec11[0] = (fConst24 * ((((fConst23 * fVec2[1]) + (fConst22 * fVec2[0])) + (fConst21 * fVec2[2])) + ((fConst6 * fRec11[2]) + (fConst3 * fRec11[1]))));
		fRec10[0] = (fRec11[0] - (fConst19 * ((fConst17 * fRec10[2]) + (fConst15 * fRec10[1]))));
		double fTemp3 = (fRec10[2] + (fRec10[0] + (2 * fRec10[1])));
		fVec3[0] = fTemp3;
		fRec9[0] = ((fConst26 * ((fConst25 * fVec3[1]) + (fConst11 * fVec3[0]))) + (fConst13 * fRec9[1]));
		fRec8[0] = ((fSlow33 * (fRec9[0] + fRec9[1])) + (fSlow27 * fRec8[1]));
		fRec7[0] = (fRec8[0] - (fSlow25 * ((fSlow23 * fRec7[2]) + (fSlow21 * fRec7[1]))));
		double fTemp4 = (fRec7[2] + (fRec7[0] + (2 * fRec7[1])));
		double fTemp5 = (fSlow25 * fTemp4);
		fVec4[0] = fTemp5;
		fRec6[0] = ((fSlow34 * (fVec4[0] + fVec4[1])) + (fSlow18 * fRec6[1]));
		fRec5[0] = (fRec6[0] - (fSlow16 * ((fSlow14 * fRec5[2]) + (fSlow12 * fRec5[1]))));
		double fTemp6 = (fRec5[2] + (fRec5[0] + (2 * fRec5[1])));
		double fTemp7 = (fSlow16 * fTemp6);
		fVec5[0] = fTemp7;
		fRec4[0] = ((fSlow37 * ((fSlow36 * fVec5[1]) + (fSlow35 * fTemp6))) + (fSlow9 * fRec4[1]));
		fRec3[0] = (fRec4[0] - (fSlow7 * ((fSlow5 * fRec3[2]) + (fSlow3 * fRec3[1]))));
		double fTemp8 = max(-1, min(1, (fSlow41 + (fSlow40 * (((fSlow2 * fRec3[0]) + (fSlow38 * fRec3[1])) + (fSlow2 * fRec3[2]))))));
		fRec14[0] = (fSlow42 + (0.999 * fRec14[1]));
		fRec16[0] = ((fSlow37 * (fVec5[0] + fVec5[1])) + (fSlow9 * fRec16[1]));
		fRec15[0] = (fRec16[0] - (fSlow7 * ((fSlow5 * fRec15[2]) + (fSlow3 * fRec15[1]))));
		double fTemp9 = max(-1, min(1, (fSlow41 + (fSlow43 * (fRec15[2] + (fRec15[0] + (2 * fRec15[1])))))));
		fRec17[0] = (fSlow44 + (0.999 * fRec17[1]));
		double fTemp10 = (fSlow3 * fRec18[1]);
		fRec20[0] = ((fSlow34 * ((fSlow48 * fVec4[1]) + (fSlow47 * fTemp4))) + (fSlow18 * fRec20[1]));
		fRec19[0] = (fRec20[0] - (fSlow16 * ((fSlow14 * fRec19[2]) + (fSlow12 * fRec19[1]))));
		fRec18[0] = ((fSlow16 * (((fSlow11 * fRec19[0]) + (fSlow49 * fRec19[1])) + (fSlow11 * fRec19[2]))) - (fSlow46 * ((fSlow45 * fRec18[2]) + fTemp10)));
		double fTemp11 = max(-1, min(1, (fSlow41 + (fSlow50 * (fRec18[2] + (fSlow46 * (fTemp10 + (fSlow45 * fRec18[0]))))))));
		fRec21[0] = (fSlow51 + (0.999 * fRec21[1]));
		double fTemp12 = (fSlow3 * fRec22[1]);
		double fTemp13 = (fSlow12 * fRec23[1]);
		fRec25[0] = ((fSlow33 * ((fSlow54 * fRec9[1]) + (fSlow22 * fRec9[0]))) + (fSlow27 * fRec25[1]));
		fRec24[0] = (fRec25[0] - (fSlow25 * ((fSlow23 * fRec24[2]) + (fSlow21 * fRec24[1]))));
		fRec23[0] = ((fSlow25 * (((fSlow20 * fRec24[0]) + (fSlow55 * fRec24[1])) + (fSlow20 * fRec24[2]))) - (fSlow53 * ((fSlow52 * fRec23[2]) + fTemp13)));
		fRec22[0] = ((fRec23[2] + (fSlow53 * (fTemp13 + (fSlow52 * fRec23[0])))) - (fSlow46 * ((fSlow45 * fRec22[2]) + fTemp12)));
		double fTemp14 = max(-1, min(1, (fSlow41 + (fSlow56 * (fRec22[2] + (fSlow46 * (fTemp12 + (fSlow45 * fRec22[0]))))))));
		fRec26[0] = (fSlow57 + (0.999 * fRec26[1]));
		double fTemp15 = (((fRec26[0] * fTemp14) * (1 - (0.3333333333333333 * faustpower<2>(fTemp14)))) + (((fRec21[0] * fTemp11) * (1 - (0.3333333333333333 * faustpower<2>(fTemp11)))) + (((fRec17[0] * fTemp9) * (1 - (0.3333333333333333 * faustpower<2>(fTemp9)))) + ((fRec14[0] * fTemp8) * (1 - (0.3333333333333333 * faustpower<2>(fTemp8)))))));
		fVec6[0] = fTemp15;
		fRec2[0] = ((fConst27 * (fVec6[0] + fVec6[1])) + (fConst9 * fRec2[1]));
		double fTemp16 = (fRec2[0] * fRec1[0]);
		fVec7[0] = fTemp16;
		fRec0[0] = (fConst24 * ((((fConst23 * fVec7[1]) + (fConst22 * fVec7[0])) + (fConst21 * fVec7[2])) + ((fConst6 * fRec0[2]) + (fConst3 * fRec0[1]))));
		output0[i] = (FAUSTFLOAT)fRec0[0];
		// post processing
		fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
		fVec7[2] = fVec7[1]; fVec7[1] = fVec7[0];
		fRec2[1] = fRec2[0];
		fVec6[1] = fVec6[0];
		fRec26[1] = fRec26[0];
		fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
		fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
		fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
		fRec25[1] = fRec25[0];
		fRec21[1] = fRec21[0];
		fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
		fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
		fRec20[1] = fRec20[0];
		fRec17[1] = fRec17[0];
		fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
		fRec16[1] = fRec16[0];
		fRec14[1] = fRec14[0];
		fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
		fRec4[1] = fRec4[0];
		fVec5[1] = fVec5[0];
		fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
		fRec6[1] = fRec6[0];
		fVec4[1] = fVec4[0];
		fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
		fRec8[1] = fRec8[0];
		fRec9[1] = fRec9[0];
		fVec3[1] = fVec3[0];
		fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
		fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
		fVec2[2] = fVec2[1]; fVec2[1] = fVec2[0];
		fRec13[1] = fRec13[0];
		IOTA = IOTA+1;
		fRec12[1] = fRec12[0];
		fRec1[1] = fRec1[0];
		iVec0[1] = iVec0[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerVar("gx_distortion.high_gain","","S","",&fslider12, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.high_drive","","S","",&fslider11, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.middle_h_gain","","S","",&fslider10, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.resonator.on_off","resonat","B","",&fcheckbox0, 0.0, 0.0, 1.0, 1.0);
	registerVar("gx_distortion.split_middle_freq","","S","",&fentry1, 6.5e+02, 6e+02, 1.25e+03, 1e+01);
	registerVar("gx_distortion.split_low_freq","","S","",&fentry0, 2.5e+02, 2e+01, 6e+02, 1e+01);
	registerVar("gx_distortion.split_high_freq","","S","",&fentry2, 1.25e+03, 1.25e+03, 1.2e+04, 1e+01);
	registerVar("gx_distortion.low_drive","","S","",&fslider7, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.middle_l_gain","","S","",&fslider6, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.level","","S","",&fslider5, 0.01, 0.0, 0.5, 0.01);
	registerVar("gx_distortion.drive","","S","",&fslider4, 0.64, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.middle_l_drive","","S","",&fslider3, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.vibrato","","S","",&fslider2, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.trigger","","S","",&fslider1, 0.12, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.gain","","S","",&fslider0, 2.0, -1e+01, 1e+01, 0.1);
	registerVar("gx_distortion.middle_h_drive","","S","",&fslider9, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.low_gain","","S","",&fslider8, 1e+01, -1e+01, 2e+01, 0.1);
	registerInit("gx_distortion", init);
}

} // end namespace gx_distortion
