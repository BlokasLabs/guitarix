namespace gx_distortion {
// generated from file '../src/faust/gx_distortion.dsp'

int 	iVec0[2];
double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
double 	fConst5;
double 	fConst6;
FAUSTFLOAT 	fentry0;
double 	fConst7;
FAUSTFLOAT 	fentry1;
FAUSTFLOAT 	fentry2;
double 	fConst8;
double 	fConst9;
double 	fConst10;
double 	fConst11;
double 	fConst12;
double 	fConst13;
double 	fConst14;
double 	fConst15;
double 	fConst16;
double 	fConst17;
double 	fConst18;
double 	fRec10[2];
FAUSTFLOAT 	fslider0;
int 	IOTA;
double 	fVec1[4096];
FAUSTFLOAT 	fslider1;
double 	fRec11[2];
FAUSTFLOAT 	fcheckbox0;
double 	fVec2[3];
double 	fConst19;
double 	fConst20;
double 	fConst21;
double 	fConst22;
double 	fConst23;
double 	fRec9[3];
double 	fRec8[3];
double 	fRec7[3];
double 	fConst24;
double 	fVec3[2];
double 	fRec6[2];
double 	fRec5[3];
double 	fVec4[2];
double 	fRec4[2];
double 	fRec3[3];
double 	fVec5[2];
double 	fRec2[2];
double 	fRec1[3];
FAUSTFLOAT 	fslider2;
FAUSTFLOAT 	fslider3;
FAUSTFLOAT 	fslider4;
FAUSTFLOAT 	fslider5;
double 	fRec12[2];
double 	fRec14[2];
double 	fRec13[3];
FAUSTFLOAT 	fslider6;
FAUSTFLOAT 	fslider7;
double 	fRec15[2];
double 	fRec18[2];
double 	fRec17[3];
double 	fRec16[3];
FAUSTFLOAT 	fslider8;
FAUSTFLOAT 	fslider9;
double 	fRec19[2];
double 	fRec23[2];
double 	fRec22[3];
double 	fRec21[3];
double 	fRec20[3];
FAUSTFLOAT 	fslider10;
FAUSTFLOAT 	fslider11;
double 	fRec24[2];
FAUSTFLOAT 	fslider12;
double 	fRec25[2];
double 	fVec6[3];
double 	fRec0[3];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	for (int i=0; i<2; i++) iVec0[i] = 0;
	fConst0 = (6.283185307179586 * (max(0, ((0.5 * fSamplingFreq) - 1e+02)) / fSamplingFreq));
	fConst1 = cos(fConst0);
	fConst2 = (1.316227766016838 * fConst1);
	fConst3 = (0 - (2 * (0 - (0.683772233983162 + fConst2))));
	fConst4 = (0.683772233983162 * fConst1);
	fConst5 = (0.005623413251903491 * sin(fConst0));
	fConst6 = (fConst5 - (fConst4 + 1.316227766016838));
	fConst7 = (3.141592653589793 / fSamplingFreq);
	fConst8 = tan((62.83185307179586 / fSamplingFreq));
	fConst9 = (1.0 / faustpower<2>(fConst8));
	fConst10 = (2 * (1 - fConst9));
	fConst11 = (1.0 / fConst8);
	fConst12 = (1 + ((fConst11 - 1.414213562373095) / fConst8));
	fConst13 = (1.0 / (1 + ((1.414213562373095 + fConst11) / fConst8)));
	fConst14 = tan((47123.8898038469 / fSamplingFreq));
	fConst15 = (2 * (1 - (1.0 / faustpower<2>(fConst14))));
	fConst16 = (1.0 / fConst14);
	fConst17 = (1 + ((fConst16 - 1.414213562373095) / fConst14));
	fConst18 = (1.0 / (1 + ((1.414213562373095 + fConst16) / fConst14)));
	for (int i=0; i<2; i++) fRec10[i] = 0;
	IOTA = 0;
	for (int i=0; i<4096; i++) fVec1[i] = 0;
	for (int i=0; i<2; i++) fRec11[i] = 0;
	for (int i=0; i<3; i++) fVec2[i] = 0;
	fConst19 = (fConst5 + fConst4);
	fConst20 = (0.31622776601683794 * (1.316227766016838 - fConst19));
	fConst21 = (0.31622776601683794 * ((fConst5 + 1.316227766016838) - fConst4));
	fConst22 = (0 - (0.6324555320336759 * (fConst2 - 0.683772233983162)));
	fConst23 = (1.0 / (1.316227766016838 + fConst19));
	for (int i=0; i<3; i++) fRec9[i] = 0;
	for (int i=0; i<3; i++) fRec8[i] = 0;
	for (int i=0; i<3; i++) fRec7[i] = 0;
	fConst24 = (2 * (0 - fConst9));
	for (int i=0; i<2; i++) fVec3[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<3; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<3; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fVec5[i] = 0;
	for (int i=0; i<2; i++) fRec2[i] = 0;
	for (int i=0; i<3; i++) fRec1[i] = 0;
	for (int i=0; i<2; i++) fRec12[i] = 0;
	for (int i=0; i<2; i++) fRec14[i] = 0;
	for (int i=0; i<3; i++) fRec13[i] = 0;
	for (int i=0; i<2; i++) fRec15[i] = 0;
	for (int i=0; i<2; i++) fRec18[i] = 0;
	for (int i=0; i<3; i++) fRec17[i] = 0;
	for (int i=0; i<3; i++) fRec16[i] = 0;
	for (int i=0; i<2; i++) fRec19[i] = 0;
	for (int i=0; i<2; i++) fRec23[i] = 0;
	for (int i=0; i<3; i++) fRec22[i] = 0;
	for (int i=0; i<3; i++) fRec21[i] = 0;
	for (int i=0; i<3; i++) fRec20[i] = 0;
	for (int i=0; i<2; i++) fRec24[i] = 0;
	for (int i=0; i<2; i++) fRec25[i] = 0;
	for (int i=0; i<3; i++) fVec6[i] = 0;
	for (int i=0; i<3; i++) fRec0[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = tan((fConst7 * fentry0));
	double 	fSlow1 = (1.0 / faustpower<2>(fSlow0));
	double 	fSlow2 = (2 * (1 - fSlow1));
	double 	fSlow3 = (1.0 / fSlow0);
	double 	fSlow4 = (1 + ((fSlow3 - 1.0000000000000004) / fSlow0));
	double 	fSlow5 = (1 + ((fSlow3 + 1.0000000000000004) / fSlow0));
	double 	fSlow6 = (1.0 / fSlow5);
	double 	fSlow7 = (1 + fSlow3);
	double 	fSlow8 = (0 - ((1 - fSlow3) / fSlow7));
	double 	fSlow9 = tan((fConst7 * fentry1));
	double 	fSlow10 = (1.0 / faustpower<2>(fSlow9));
	double 	fSlow11 = (2 * (1 - fSlow10));
	double 	fSlow12 = (1.0 / fSlow9);
	double 	fSlow13 = (1 + ((fSlow12 - 1.0000000000000004) / fSlow9));
	double 	fSlow14 = (1 + ((fSlow12 + 1.0000000000000004) / fSlow9));
	double 	fSlow15 = (1.0 / fSlow14);
	double 	fSlow16 = (1 + fSlow12);
	double 	fSlow17 = (0 - ((1 - fSlow12) / fSlow16));
	double 	fSlow18 = tan((fConst7 * fentry2));
	double 	fSlow19 = (1.0 / faustpower<2>(fSlow18));
	double 	fSlow20 = (2 * (1 - fSlow19));
	double 	fSlow21 = (1.0 / fSlow18);
	double 	fSlow22 = (1 + ((fSlow21 - 1.0000000000000004) / fSlow18));
	double 	fSlow23 = (1 + ((1.0000000000000004 + fSlow21) / fSlow18));
	double 	fSlow24 = (1.0 / fSlow23);
	double 	fSlow25 = (1 + fSlow21);
	double 	fSlow26 = (0 - ((1 - fSlow21) / fSlow25));
	double 	fSlow27 = (1.0 - fslider0);
	double 	fSlow28 = fslider1;
	int 	iSlow29 = int((int((fSlow28 - 1)) & 4095));
	int 	iSlow30 = int((int(fSlow28) & 4095));
	int 	iSlow31 = int(fcheckbox0);
	double 	fSlow32 = (fConst13 / fSlow25);
	double 	fSlow33 = (1.0 / fSlow16);
	double 	fSlow34 = (1.0 / (fSlow0 * fSlow14));
	double 	fSlow35 = (0 - fSlow3);
	double 	fSlow36 = (1.0 / fSlow7);
	double 	fSlow37 = (2 * (0 - fSlow1));
	double 	fSlow38 = fslider3;
	double 	fSlow39 = (pow(1e+01,(2 * (fSlow38 * fslider2))) / fSlow5);
	double 	fSlow40 = fslider4;
	double 	fSlow41 = (0.0010000000000000009 * pow(10,(0.05 * (fslider5 - 10))));
	double 	fSlow42 = (pow(1e+01,(2 * (fSlow38 * fslider6))) / fSlow5);
	double 	fSlow43 = (0.0010000000000000009 * pow(10,(0.05 * (fslider7 - 10))));
	double 	fSlow44 = (1 + ((fSlow3 - 1.0) / fSlow0));
	double 	fSlow45 = (1.0 / (1 + ((1.0 + fSlow3) / fSlow0)));
	double 	fSlow46 = (1.0 / (fSlow9 * fSlow23));
	double 	fSlow47 = (0 - fSlow12);
	double 	fSlow48 = (2 * (0 - fSlow10));
	double 	fSlow49 = pow(1e+01,(2 * (fSlow38 * fslider8)));
	double 	fSlow50 = (0.0010000000000000009 * pow(10,(0.05 * (fslider9 - 10))));
	double 	fSlow51 = (1 + ((fSlow12 - 1.0) / fSlow9));
	double 	fSlow52 = (1.0 / (1 + ((1.0 + fSlow12) / fSlow9)));
	double 	fSlow53 = (0 - fSlow21);
	double 	fSlow54 = (2 * (0 - fSlow19));
	double 	fSlow55 = pow(1e+01,(2 * (fSlow38 * fslider10)));
	double 	fSlow56 = (0.0010000000000000009 * pow(10,(0.05 * (fslider11 - 10))));
	double 	fSlow57 = (0.0010000000000000009 * pow(10,(0.05 * (fslider12 - 10))));
	for (int i=0; i<count; i++) {
		iVec0[0] = 1;
		fRec10[0] = ((1e-20 * (1 - iVec0[1])) - fRec10[1]);
		double fTemp0 = (double)input0[i];
		double fTemp1 = (fTemp0 + (fSlow27 * fRec11[1]));
		fVec1[IOTA&4095] = fTemp1;
		fRec11[0] = (0.5 * (fVec1[(IOTA-iSlow30)&4095] + fVec1[(IOTA-iSlow29)&4095]));
		double fTemp2 = (((iSlow31)?fRec11[0]:fTemp0) + fRec10[0]);
		fVec2[0] = fTemp2;
		fRec9[0] = (fConst23 * ((((fConst22 * fVec2[1]) + (fConst21 * fVec2[0])) + (fConst20 * fVec2[2])) + ((fConst6 * fRec9[2]) + (fConst3 * fRec9[1]))));
		fRec8[0] = (fRec9[0] - (fConst18 * ((fConst17 * fRec8[2]) + (fConst15 * fRec8[1]))));
		fRec7[0] = ((fConst18 * (fRec8[2] + (fRec8[0] + (2 * fRec8[1])))) - (fConst13 * ((fConst12 * fRec7[2]) + (fConst10 * fRec7[1]))));
		double fTemp3 = (((fConst9 * fRec7[0]) + (fConst24 * fRec7[1])) + (fConst9 * fRec7[2]));
		fVec3[0] = fTemp3;
		fRec6[0] = ((fSlow32 * (fVec3[0] + fVec3[1])) + (fSlow26 * fRec6[1]));
		fRec5[0] = (fRec6[0] - (fSlow24 * ((fSlow22 * fRec5[2]) + (fSlow20 * fRec5[1]))));
		double fTemp4 = (fRec5[2] + (fRec5[0] + (2 * fRec5[1])));
		double fTemp5 = (fSlow24 * fTemp4);
		fVec4[0] = fTemp5;
		fRec4[0] = ((fSlow33 * (fVec4[0] + fVec4[1])) + (fSlow17 * fRec4[1]));
		fRec3[0] = (fRec4[0] - (fSlow15 * ((fSlow13 * fRec3[2]) + (fSlow11 * fRec3[1]))));
		double fTemp6 = (fRec3[2] + (fRec3[0] + (2 * fRec3[1])));
		double fTemp7 = (fSlow15 * fTemp6);
		fVec5[0] = fTemp7;
		fRec2[0] = ((fSlow36 * ((fSlow35 * fVec5[1]) + (fSlow34 * fTemp6))) + (fSlow8 * fRec2[1]));
		fRec1[0] = (fRec2[0] - (fSlow6 * ((fSlow4 * fRec1[2]) + (fSlow2 * fRec1[1]))));
		double fTemp8 = max(-1, min(1, (fSlow40 + (fSlow39 * (((fSlow1 * fRec1[0]) + (fSlow37 * fRec1[1])) + (fSlow1 * fRec1[2]))))));
		fRec12[0] = (fSlow41 + (0.999 * fRec12[1]));
		fRec14[0] = ((fSlow36 * (fVec5[0] + fVec5[1])) + (fSlow8 * fRec14[1]));
		fRec13[0] = (fRec14[0] - (fSlow6 * ((fSlow4 * fRec13[2]) + (fSlow2 * fRec13[1]))));
		double fTemp9 = max(-1, min(1, (fSlow40 + (fSlow42 * (fRec13[2] + (fRec13[0] + (2 * fRec13[1])))))));
		fRec15[0] = (fSlow43 + (0.999 * fRec15[1]));
		double fTemp10 = (fSlow2 * fRec16[1]);
		fRec18[0] = ((fSlow33 * ((fSlow47 * fVec4[1]) + (fSlow46 * fTemp4))) + (fSlow17 * fRec18[1]));
		fRec17[0] = (fRec18[0] - (fSlow15 * ((fSlow13 * fRec17[2]) + (fSlow11 * fRec17[1]))));
		fRec16[0] = ((fSlow15 * (((fSlow10 * fRec17[0]) + (fSlow48 * fRec17[1])) + (fSlow10 * fRec17[2]))) - (fSlow45 * ((fSlow44 * fRec16[2]) + fTemp10)));
		double fTemp11 = max(-1, min(1, (fSlow40 + (fSlow49 * (fRec16[2] + (fSlow45 * (fTemp10 + (fSlow44 * fRec16[0]))))))));
		fRec19[0] = (fSlow50 + (0.999 * fRec19[1]));
		double fTemp12 = (fSlow2 * fRec20[1]);
		double fTemp13 = (fSlow11 * fRec21[1]);
		fRec23[0] = ((fSlow32 * ((fSlow53 * fVec3[1]) + (fSlow21 * fVec3[0]))) + (fSlow26 * fRec23[1]));
		fRec22[0] = (fRec23[0] - (fSlow24 * ((fSlow22 * fRec22[2]) + (fSlow20 * fRec22[1]))));
		fRec21[0] = ((fSlow24 * (((fSlow19 * fRec22[0]) + (fSlow54 * fRec22[1])) + (fSlow19 * fRec22[2]))) - (fSlow52 * ((fSlow51 * fRec21[2]) + fTemp13)));
		fRec20[0] = ((fRec21[2] + (fSlow52 * (fTemp13 + (fSlow51 * fRec21[0])))) - (fSlow45 * ((fSlow44 * fRec20[2]) + fTemp12)));
		double fTemp14 = max(-1, min(1, (fSlow40 + (fSlow55 * (fRec20[2] + (fSlow45 * (fTemp12 + (fSlow44 * fRec20[0]))))))));
		fRec24[0] = (fSlow56 + (0.999 * fRec24[1]));
		fRec25[0] = (fSlow57 + (0.999 * fRec25[1]));
		double fTemp15 = (fRec25[0] * (((fRec24[0] * fTemp14) * (1 - (0.3333333333333333 * faustpower<2>(fTemp14)))) + (((fRec19[0] * fTemp11) * (1 - (0.3333333333333333 * faustpower<2>(fTemp11)))) + (((fRec15[0] * fTemp9) * (1 - (0.3333333333333333 * faustpower<2>(fTemp9)))) + ((fRec12[0] * fTemp8) * (1 - (0.3333333333333333 * faustpower<2>(fTemp8))))))));
		fVec6[0] = fTemp15;
		fRec0[0] = (fConst23 * ((((fConst22 * fVec6[1]) + (fConst21 * fVec6[0])) + (fConst20 * fVec6[2])) + ((fConst6 * fRec0[2]) + (fConst3 * fRec0[1]))));
		output0[i] = (FAUSTFLOAT)fRec0[0];
		// post processing
		fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
		fVec6[2] = fVec6[1]; fVec6[1] = fVec6[0];
		fRec25[1] = fRec25[0];
		fRec24[1] = fRec24[0];
		fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
		fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
		fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
		fRec23[1] = fRec23[0];
		fRec19[1] = fRec19[0];
		fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
		fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
		fRec18[1] = fRec18[0];
		fRec15[1] = fRec15[0];
		fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
		fRec14[1] = fRec14[0];
		fRec12[1] = fRec12[0];
		fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
		fRec2[1] = fRec2[0];
		fVec5[1] = fVec5[0];
		fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
		fRec4[1] = fRec4[0];
		fVec4[1] = fVec4[0];
		fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
		fRec6[1] = fRec6[0];
		fVec3[1] = fVec3[0];
		fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
		fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
		fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
		fVec2[2] = fVec2[1]; fVec2[1] = fVec2[0];
		fRec11[1] = fRec11[0];
		IOTA = IOTA+1;
		fRec10[1] = fRec10[0];
		iVec0[1] = iVec0[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerVar("gx_distortion.gain","","S","",&fslider12, 2.0, -1e+01, 1e+01, 0.1);
	registerVar("gx_distortion.high_gain","","S","",&fslider11, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.high_drive","","S","",&fslider10, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.resonator.on_off","resonat","B","",&fcheckbox0, 0.0, 0.0, 1.0, 1.0);
	registerVar("gx_distortion.split_middle_freq","","S","",&fentry1, 6.5e+02, 6e+02, 1.25e+03, 1e+01);
	registerVar("gx_distortion.split_low_freq","","S","",&fentry0, 2.5e+02, 2e+01, 6e+02, 1e+01);
	registerVar("gx_distortion.split_high_freq","","S","",&fentry2, 1.25e+03, 1.25e+03, 1.2e+04, 1e+01);
	registerVar("gx_distortion.low_gain","","S","",&fslider7, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.low_drive","","S","",&fslider6, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.middle_l_gain","","S","",&fslider5, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.level","","S","",&fslider4, 0.01, 0.0, 0.5, 0.01);
	registerVar("gx_distortion.drive","","S","",&fslider3, 0.64, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.middle_l_drive","","S","",&fslider2, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.vibrato","","S","",&fslider1, 1.0, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.trigger","","S","",&fslider0, 0.12, 0.0, 1.0, 0.01);
	registerVar("gx_distortion.middle_h_gain","","S","",&fslider9, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("gx_distortion.middle_h_drive","","S","",&fslider8, 1.0, 0.0, 1.0, 0.01);
	registerInit("gx_distortion", init);
}

} // end namespace gx_distortion
