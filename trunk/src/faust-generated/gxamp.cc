namespace gxamp {
// generated from file '../src/faust/gxamp.dsp'

FAUSTFLOAT 	fslider0;
double 	fRec0[2];
double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
double 	fConst5;
FAUSTFLOAT 	fslider1;
double 	fRec7[2];
double 	fConst6;
double 	fConst7;
double 	fConst8;
double 	fConst9;
double 	fConst10;
double 	fConst11;
double 	fConst12;
double 	fConst13;
double 	fConst14;
double 	fConst15;
double 	fConst16;
double 	fConst17;
double 	fConst18;
double 	fConst19;
double 	fConst20;
double 	fConst21;
double 	fConst22;
double 	fConst23;
double 	fConst24;
double 	fConst25;
double 	fConst26;
double 	fConst27;
double 	fConst28;
double 	fConst29;
double 	fConst30;
double 	fConst31;
double 	fConst32;
double 	fConst33;
double 	fConst34;
double 	fConst35;
double 	fConst36;
double 	fConst37;
double 	fConst38;
double 	fRec15[3];
double 	fRec14[3];
double 	fConst39;
double 	fVec0[2];
double 	fConst40;
double 	fConst41;
double 	fRec13[2];
double 	fRec12[3];
double 	fConst42;
double 	fRec11[3];
double 	fRec10[3];
FAUSTFLOAT&	fslider2 = get_alias("gxdistortion.drive");
double 	fConst43;
double 	fConst44;
double 	fConst45;
double 	fConst46;
double 	fConst47;
double 	fRec20[2];
double 	fRec19[3];
double 	fVec1[2];
double 	fConst48;
double 	fConst49;
double 	fRec18[2];
double 	fRec17[3];
double 	fConst50;
double 	fRec16[3];
double 	fConst51;
double 	fConst52;
double 	fConst53;
double 	fConst54;
double 	fRec24[2];
double 	fRec23[3];
double 	fVec2[2];
double 	fConst55;
double 	fConst56;
double 	fRec22[2];
double 	fRec21[3];
double 	fConst57;
double 	fRec26[2];
double 	fRec25[3];
double 	fConst58;
double 	fConst59;
double 	fConst60;
double 	fVec3[2];
double 	fConst61;
double 	fRec27[2];
double 	fRec9[2];
double 	fConst62;
double 	fConst63;
double 	fRec8[2];
double 	fVec4[2];
double 	fConst64;
double 	fRec6[2];
double 	fConst65;
double 	fConst66;
double 	fConst67;
double 	fVec5[2];
double 	fConst68;
double 	fRec28[2];
double 	fRec5[2];
double 	fRec4[2];
double 	fVec6[2];
double 	fRec3[2];
double 	fConst69;
double 	fConst70;
double 	fConst71;
double 	fVec7[2];
double 	fConst72;
double 	fRec29[2];
double 	fRec2[2];
double 	fRec1[2];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	for (int i=0; i<2; i++) fRec0[i] = 0;
	fConst0 = (1.0 / tan((97.38937226128358 / fSamplingFreq)));
	fConst1 = (1 + fConst0);
	fConst2 = (0 - ((1 - fConst0) / fConst1));
	fConst3 = (1.0 / tan((20517.741620594938 / fSamplingFreq)));
	fConst4 = (1 + fConst3);
	fConst5 = (0 - ((1 - fConst3) / fConst4));
	for (int i=0; i<2; i++) fRec7[i] = 0;
	fConst6 = tan((942.4777960769379 / fSamplingFreq));
	fConst7 = (1.0 / faustpower<2>(fConst6));
	fConst8 = (2 * (1 - fConst7));
	fConst9 = (1.0 / fConst6);
	fConst10 = (1 + ((fConst9 - 1.0) / fConst6));
	fConst11 = (1.0 / (1 + ((1.0 + fConst9) / fConst6)));
	fConst12 = tan((3769.9111843077517 / fSamplingFreq));
	fConst13 = (1.0 / faustpower<2>(fConst12));
	fConst14 = (2 * (1 - fConst13));
	fConst15 = (1.0 / fConst12);
	fConst16 = (1 + ((fConst15 - 1.0) / fConst12));
	fConst17 = (1.0 / (1 + ((1.0 + fConst15) / fConst12)));
	fConst18 = tan((10053.096491487338 / fSamplingFreq));
	fConst19 = (1.0 / faustpower<2>(fConst18));
	fConst20 = (2 * (1 - fConst19));
	fConst21 = (1.0 / fConst18);
	fConst22 = (1 + ((fConst21 - 1.0000000000000004) / fConst18));
	fConst23 = (1 + ((1.0000000000000004 + fConst21) / fConst18));
	fConst24 = (1.0 / fConst23);
	fConst25 = (1 + fConst21);
	fConst26 = (0 - ((1 - fConst21) / fConst25));
	fConst27 = tan((62.83185307179586 / fSamplingFreq));
	fConst28 = (1.0 / faustpower<2>(fConst27));
	fConst29 = (2 * (1 - fConst28));
	fConst30 = (1.0 / fConst27);
	fConst31 = (1 + ((fConst30 - 1.414213562373095) / fConst27));
	fConst32 = (1 + ((1.414213562373095 + fConst30) / fConst27));
	fConst33 = (1.0 / fConst32);
	fConst34 = tan((47123.8898038469 / fSamplingFreq));
	fConst35 = (2 * (1 - (1.0 / faustpower<2>(fConst34))));
	fConst36 = (1.0 / fConst34);
	fConst37 = (1 + ((fConst36 - 1.414213562373095) / fConst34));
	fConst38 = (1.0 / (1 + ((1.414213562373095 + fConst36) / fConst34)));
	for (int i=0; i<3; i++) fRec15[i] = 0;
	for (int i=0; i<3; i++) fRec14[i] = 0;
	fConst39 = (2 * (0 - fConst28));
	for (int i=0; i<2; i++) fVec0[i] = 0;
	fConst40 = (0 - fConst21);
	fConst41 = (1.0 / (fConst25 * fConst32));
	for (int i=0; i<2; i++) fRec13[i] = 0;
	for (int i=0; i<3; i++) fRec12[i] = 0;
	fConst42 = (2 * (0 - fConst19));
	for (int i=0; i<3; i++) fRec11[i] = 0;
	for (int i=0; i<3; i++) fRec10[i] = 0;
	fConst43 = (1 + ((fConst15 - 1.0000000000000004) / fConst12));
	fConst44 = (1 + ((fConst15 + 1.0000000000000004) / fConst12));
	fConst45 = (1.0 / fConst44);
	fConst46 = (1 + fConst15);
	fConst47 = (0 - ((1 - fConst15) / fConst46));
	for (int i=0; i<2; i++) fRec20[i] = 0;
	for (int i=0; i<3; i++) fRec19[i] = 0;
	for (int i=0; i<2; i++) fVec1[i] = 0;
	fConst48 = (0 - fConst15);
	fConst49 = (1.0 / (fConst46 * fConst23));
	for (int i=0; i<2; i++) fRec18[i] = 0;
	for (int i=0; i<3; i++) fRec17[i] = 0;
	fConst50 = (2 * (0 - fConst13));
	for (int i=0; i<3; i++) fRec16[i] = 0;
	fConst51 = (1 + ((fConst9 - 1.0000000000000004) / fConst6));
	fConst52 = (1.0 / (1 + ((fConst9 + 1.0000000000000004) / fConst6)));
	fConst53 = (1 + fConst9);
	fConst54 = (0 - ((1 - fConst9) / fConst53));
	for (int i=0; i<2; i++) fRec24[i] = 0;
	for (int i=0; i<3; i++) fRec23[i] = 0;
	for (int i=0; i<2; i++) fVec2[i] = 0;
	fConst55 = (0 - fConst9);
	fConst56 = (1.0 / (fConst53 * fConst44));
	for (int i=0; i<2; i++) fRec22[i] = 0;
	for (int i=0; i<3; i++) fRec21[i] = 0;
	fConst57 = (2 * (0 - fConst7));
	for (int i=0; i<2; i++) fRec26[i] = 0;
	for (int i=0; i<3; i++) fRec25[i] = 0;
	fConst58 = (1.0 / tan((270.1769682087222 / fSamplingFreq)));
	fConst59 = (1 + fConst58);
	fConst60 = (0 - ((1 - fConst58) / fConst59));
	for (int i=0; i<2; i++) fVec3[i] = 0;
	fConst61 = (0.027 / fConst59);
	for (int i=0; i<2; i++) fRec27[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	fConst62 = (0 - fConst0);
	fConst63 = (0.025 / fConst1);
	for (int i=0; i<2; i++) fRec8[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	fConst64 = (1.0 / fConst4);
	for (int i=0; i<2; i++) fRec6[i] = 0;
	fConst65 = (1.0 / tan((414.6902302738527 / fSamplingFreq)));
	fConst66 = (1 + fConst65);
	fConst67 = (0 - ((1 - fConst65) / fConst66));
	for (int i=0; i<2; i++) fVec5[i] = 0;
	fConst68 = (0.015 / fConst66);
	for (int i=0; i<2; i++) fRec28[i] = 0;
	for (int i=0; i<2; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<2; i++) fVec6[i] = 0;
	for (int i=0; i<2; i++) fRec3[i] = 0;
	fConst69 = (1.0 / tan((609.4689747964198 / fSamplingFreq)));
	fConst70 = (1 + fConst69);
	fConst71 = (0 - ((1 - fConst69) / fConst70));
	for (int i=0; i<2; i++) fVec7[i] = 0;
	fConst72 = (0.0082 / fConst70);
	for (int i=0; i<2; i++) fRec29[i] = 0;
	for (int i=0; i<2; i++) fRec2[i] = 0;
	for (int i=0; i<2; i++) fRec1[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = (0.0010000000000000009 * pow(10,(0.05 * fslider0)));
	double 	fSlow1 = (0.0010000000000000009 * pow(10,(0.05 * fslider1)));
	double 	fSlow2 = fslider2;
	double 	fSlow3 = pow(1e+01,(0.8 * fSlow2));
	double 	fSlow4 = pow(1e+01,(1.2 * fSlow2));
	double 	fSlow5 = (fConst52 * pow(1e+01,(2 * fSlow2)));
	double 	fSlow6 = (fConst52 * pow(1e+01,(0.9 * fSlow2)));
	double 	fSlow7 = (2 * (fSlow2 - 0.5));
	double 	fSlow8 = (4.0 * (1 - max(0, (0 - fSlow7))));
	double 	fSlow9 = (1 - max(0, fSlow7));
	for (int i=0; i<count; i++) {
		fRec0[0] = (fSlow0 + (0.999 * fRec0[1]));
		fRec7[0] = (fSlow1 + (0.999 * fRec7[1]));
		double fTemp0 = (fConst8 * fRec10[1]);
		double fTemp1 = (fConst14 * fRec11[1]);
		double fTemp2 = (double)input0[i];
		fRec15[0] = (fTemp2 - (fConst38 * ((fConst37 * fRec15[2]) + (fConst35 * fRec15[1]))));
		fRec14[0] = ((fConst38 * (fRec15[2] + (fRec15[0] + (2 * fRec15[1])))) - (fConst33 * ((fConst31 * fRec14[2]) + (fConst29 * fRec14[1]))));
		double fTemp3 = (((fConst28 * fRec14[0]) + (fConst39 * fRec14[1])) + (fConst28 * fRec14[2]));
		fVec0[0] = fTemp3;
		fRec13[0] = ((fConst41 * ((fConst40 * fVec0[1]) + (fConst21 * fVec0[0]))) + (fConst26 * fRec13[1]));
		fRec12[0] = (fRec13[0] - (fConst24 * ((fConst22 * fRec12[2]) + (fConst20 * fRec12[1]))));
		fRec11[0] = ((fConst24 * (((fConst19 * fRec12[0]) + (fConst42 * fRec12[1])) + (fConst19 * fRec12[2]))) - (fConst17 * ((fConst16 * fRec11[2]) + fTemp1)));
		fRec10[0] = ((fRec11[2] + (fConst17 * (fTemp1 + (fConst16 * fRec11[0])))) - (fConst11 * ((fConst10 * fRec10[2]) + fTemp0)));
		double fTemp4 = max(-1, min(1, (fSlow3 * (fRec10[2] + (fConst11 * (fTemp0 + (fConst10 * fRec10[0])))))));
		double fTemp5 = (fConst8 * fRec16[1]);
		fRec20[0] = ((fConst41 * (fVec0[0] + fVec0[1])) + (fConst26 * fRec20[1]));
		fRec19[0] = (fRec20[0] - (fConst24 * ((fConst22 * fRec19[2]) + (fConst20 * fRec19[1]))));
		double fTemp6 = (fRec19[2] + (fRec19[0] + (2 * fRec19[1])));
		fVec1[0] = fTemp6;
		fRec18[0] = ((fConst49 * ((fConst48 * fVec1[1]) + (fConst15 * fVec1[0]))) + (fConst47 * fRec18[1]));
		fRec17[0] = (fRec18[0] - (fConst45 * ((fConst43 * fRec17[2]) + (fConst14 * fRec17[1]))));
		fRec16[0] = ((fConst45 * (((fConst13 * fRec17[0]) + (fConst50 * fRec17[1])) + (fConst13 * fRec17[2]))) - (fConst11 * ((fConst10 * fRec16[2]) + fTemp5)));
		double fTemp7 = max(-1, min(1, (fSlow4 * (fRec16[2] + (fConst11 * (fTemp5 + (fConst10 * fRec16[0])))))));
		fRec24[0] = ((fConst49 * (fVec1[0] + fVec1[1])) + (fConst47 * fRec24[1]));
		fRec23[0] = (fRec24[0] - (fConst45 * ((fConst43 * fRec23[2]) + (fConst14 * fRec23[1]))));
		double fTemp8 = (fRec23[2] + (fRec23[0] + (2 * fRec23[1])));
		fVec2[0] = fTemp8;
		fRec22[0] = ((fConst56 * ((fConst55 * fVec2[1]) + (fConst9 * fVec2[0]))) + (fConst54 * fRec22[1]));
		fRec21[0] = (fRec22[0] - (fConst52 * ((fConst51 * fRec21[2]) + (fConst8 * fRec21[1]))));
		double fTemp9 = max(-1, min(1, (fSlow5 * (((fConst7 * fRec21[0]) + (fConst57 * fRec21[1])) + (fConst7 * fRec21[2])))));
		fRec26[0] = ((fConst56 * (fVec2[0] + fVec2[1])) + (fConst54 * fRec26[1]));
		fRec25[0] = (fRec26[0] - (fConst52 * ((fConst51 * fRec25[2]) + (fConst8 * fRec25[1]))));
		double fTemp10 = max(-1, min(1, (fSlow6 * (fRec25[2] + (fRec25[0] + (2 * fRec25[1]))))));
		double fTemp11 = (fRec9[1] - 2.5e+02);
		fVec3[0] = fTemp11;
		fRec27[0] = ((fConst61 * (fVec3[0] + fVec3[1])) + (fConst60 * fRec27[1]));
		fRec9[0] = Ftube(0, ((fSlow9 * fTemp2) + (fRec27[0] + (fSlow8 * ((((fTemp10 * (1 - (0.3333333333333333 * faustpower<2>(fTemp10)))) + (fTemp9 * (1 - (0.3333333333333333 * faustpower<2>(fTemp9))))) + (0.625 * (fTemp7 * (1 - (0.3333333333333333 * faustpower<2>(fTemp7)))))) + (0.5 * (fTemp4 * (1 - (0.3333333333333333 * faustpower<2>(fTemp4))))))))));
		fRec8[0] = ((fConst63 * ((fConst62 * fRec9[1]) + (fConst0 * fRec9[0]))) + (fConst2 * fRec8[1]));
		double fTemp12 = (fRec8[0] * fRec7[0]);
		fVec4[0] = fTemp12;
		fRec6[0] = ((fConst64 * (fVec4[0] + fVec4[1])) + (fConst5 * fRec6[1]));
		double fTemp13 = (fRec5[1] - 2.5e+02);
		fVec5[0] = fTemp13;
		fRec28[0] = ((fConst68 * (fVec5[0] + fVec5[1])) + (fConst67 * fRec28[1]));
		fRec5[0] = Ftube(1, (fRec28[0] + fRec6[0]));
		fRec4[0] = ((fConst63 * ((fConst62 * fRec5[1]) + (fConst0 * fRec5[0]))) + (fConst2 * fRec4[1]));
		double fTemp14 = (fRec7[0] * fRec4[0]);
		fVec6[0] = fTemp14;
		fRec3[0] = ((fConst64 * (fVec6[0] + fVec6[1])) + (fConst5 * fRec3[1]));
		double fTemp15 = (fRec2[1] - 2.5e+02);
		fVec7[0] = fTemp15;
		fRec29[0] = ((fConst72 * (fVec7[0] + fVec7[1])) + (fConst71 * fRec29[1]));
		fRec2[0] = Ftube(1, (fRec29[0] + fRec3[0]));
		fRec1[0] = ((fConst63 * ((fConst62 * fRec2[1]) + (fConst0 * fRec2[0]))) + (fConst2 * fRec1[1]));
		output0[i] = (FAUSTFLOAT)(fRec1[0] * fRec0[0]);
		// post processing
		fRec1[1] = fRec1[0];
		fRec2[1] = fRec2[0];
		fRec29[1] = fRec29[0];
		fVec7[1] = fVec7[0];
		fRec3[1] = fRec3[0];
		fVec6[1] = fVec6[0];
		fRec4[1] = fRec4[0];
		fRec5[1] = fRec5[0];
		fRec28[1] = fRec28[0];
		fVec5[1] = fVec5[0];
		fRec6[1] = fRec6[0];
		fVec4[1] = fVec4[0];
		fRec8[1] = fRec8[0];
		fRec9[1] = fRec9[0];
		fRec27[1] = fRec27[0];
		fVec3[1] = fVec3[0];
		fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
		fRec26[1] = fRec26[0];
		fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
		fRec22[1] = fRec22[0];
		fVec2[1] = fVec2[0];
		fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
		fRec24[1] = fRec24[0];
		fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
		fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
		fRec18[1] = fRec18[0];
		fVec1[1] = fVec1[0];
		fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
		fRec20[1] = fRec20[0];
		fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
		fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
		fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
		fRec13[1] = fRec13[0];
		fVec0[1] = fVec0[0];
		fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
		fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
		fRec7[1] = fRec7[0];
		fRec0[1] = fRec0[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerVar("amp2.stage1.Pregain","","S","",&fslider1, -6.0, -2e+01, 2e+01, 0.1);
	registerVar("amp2.stage2.gain1","","S","",&fslider0, -6.0, -2e+01, 2e+01, 0.1);
	registerInit("amp2", init);
}

} // end namespace gxamp
