namespace gxamp2 {
// generated from file '../src/faust/gxamp2.dsp'

double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
FAUSTFLOAT&	fslider0 = get_alias("amp2.stage2.gain1");
double 	fRec3[2];
double 	fConst5;
double 	fConst6;
double 	fConst7;
FAUSTFLOAT&	fslider1 = get_alias("gxdistortion.drive");
double 	fConst8;
double 	fConst9;
double 	fConst10;
double 	fConst11;
double 	fConst12;
double 	fConst13;
double 	fConst14;
double 	fConst15;
double 	fConst16;
double 	fConst17;
double 	fConst18;
double 	fConst19;
double 	fConst20;
double 	fConst21;
double 	fConst22;
double 	fConst23;
double 	fConst24;
double 	fConst25;
double 	fConst26;
double 	fConst27;
double 	fConst28;
double 	fConst29;
double 	fConst30;
double 	fConst31;
double 	fConst32;
double 	fConst33;
double 	fConst34;
double 	fConst35;
double 	fConst36;
double 	fConst37;
double 	fConst38;
double 	fConst39;
double 	fConst40;
double 	fRec15[3];
double 	fRec14[3];
double 	fConst41;
double 	fVec0[2];
double 	fConst42;
double 	fConst43;
double 	fRec13[2];
double 	fRec12[3];
double 	fConst44;
double 	fRec11[3];
double 	fRec10[3];
double 	fConst45;
double 	fConst46;
double 	fConst47;
double 	fConst48;
double 	fConst49;
double 	fRec20[2];
double 	fRec19[3];
double 	fVec1[2];
double 	fConst50;
double 	fConst51;
double 	fRec18[2];
double 	fRec17[3];
double 	fConst52;
double 	fRec16[3];
double 	fConst53;
double 	fConst54;
double 	fConst55;
double 	fConst56;
double 	fRec24[2];
double 	fRec23[3];
double 	fVec2[2];
double 	fConst57;
double 	fConst58;
double 	fRec22[2];
double 	fRec21[3];
double 	fConst59;
double 	fRec26[2];
double 	fRec25[3];
FAUSTFLOAT&	fslider2 = get_alias("amp2.stage1.Pregain");
double 	fRec27[2];
double 	fConst60;
double 	fConst61;
double 	fConst62;
double 	fVec3[2];
double 	fConst63;
double 	fRec28[2];
double 	fRec9[2];
double 	fConst64;
double 	fConst65;
double 	fRec8[2];
double 	fConst66;
double 	fRec7[2];
double 	fConst67;
double 	fConst68;
double 	fConst69;
double 	fVec4[2];
double 	fConst70;
double 	fRec29[2];
double 	fRec6[2];
double 	fRec5[2];
double 	fRec4[2];
double 	fRec2[3];
double 	fConst71;
double 	fConst72;
double 	fConst73;
double 	fVec5[2];
double 	fConst74;
double 	fRec30[2];
double 	fRec1[2];
double 	fRec0[2];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	fConst0 = (1.0 / tan((97.38937226128358 / fSamplingFreq)));
	fConst1 = (1 + fConst0);
	fConst2 = (0 - ((1 - fConst0) / fConst1));
	fConst3 = log((7539.822368615503 / fSamplingFreq));
	fConst4 = (0 - (1.8442 * cos(exp((0.07238887 + (fConst3 * (1.31282248 + (fConst3 * (0.43359433 + (fConst3 * (0.27547621 + (fConst3 * (0.06446806 + (0.00506158 * fConst3))))))))))))));
	for (int i=0; i<2; i++) fRec3[i] = 0;
	fConst5 = (1.0 / tan((20517.741620594938 / fSamplingFreq)));
	fConst6 = (1 + fConst5);
	fConst7 = (0 - ((1 - fConst5) / fConst6));
	fConst8 = tan((942.4777960769379 / fSamplingFreq));
	fConst9 = (1.0 / faustpower<2>(fConst8));
	fConst10 = (2 * (1 - fConst9));
	fConst11 = (1.0 / fConst8);
	fConst12 = (1 + ((fConst11 - 1.0) / fConst8));
	fConst13 = (1.0 / (1 + ((1.0 + fConst11) / fConst8)));
	fConst14 = tan((3769.9111843077517 / fSamplingFreq));
	fConst15 = (1.0 / faustpower<2>(fConst14));
	fConst16 = (2 * (1 - fConst15));
	fConst17 = (1.0 / fConst14);
	fConst18 = (1 + ((fConst17 - 1.0) / fConst14));
	fConst19 = (1.0 / (1 + ((1.0 + fConst17) / fConst14)));
	fConst20 = tan((10053.096491487338 / fSamplingFreq));
	fConst21 = (1.0 / faustpower<2>(fConst20));
	fConst22 = (2 * (1 - fConst21));
	fConst23 = (1.0 / fConst20);
	fConst24 = (1 + ((fConst23 - 1.0000000000000004) / fConst20));
	fConst25 = (1 + ((1.0000000000000004 + fConst23) / fConst20));
	fConst26 = (1.0 / fConst25);
	fConst27 = (1 + fConst23);
	fConst28 = (0 - ((1 - fConst23) / fConst27));
	fConst29 = tan((62.83185307179586 / fSamplingFreq));
	fConst30 = (1.0 / faustpower<2>(fConst29));
	fConst31 = (2 * (1 - fConst30));
	fConst32 = (1.0 / fConst29);
	fConst33 = (1 + ((fConst32 - 1.414213562373095) / fConst29));
	fConst34 = (1 + ((1.414213562373095 + fConst32) / fConst29));
	fConst35 = (1.0 / fConst34);
	fConst36 = tan((47123.8898038469 / fSamplingFreq));
	fConst37 = (2 * (1 - (1.0 / faustpower<2>(fConst36))));
	fConst38 = (1.0 / fConst36);
	fConst39 = (1 + ((fConst38 - 1.414213562373095) / fConst36));
	fConst40 = (1.0 / (1 + ((1.414213562373095 + fConst38) / fConst36)));
	for (int i=0; i<3; i++) fRec15[i] = 0;
	for (int i=0; i<3; i++) fRec14[i] = 0;
	fConst41 = (2 * (0 - fConst30));
	for (int i=0; i<2; i++) fVec0[i] = 0;
	fConst42 = (0 - fConst23);
	fConst43 = (1.0 / (fConst27 * fConst34));
	for (int i=0; i<2; i++) fRec13[i] = 0;
	for (int i=0; i<3; i++) fRec12[i] = 0;
	fConst44 = (2 * (0 - fConst21));
	for (int i=0; i<3; i++) fRec11[i] = 0;
	for (int i=0; i<3; i++) fRec10[i] = 0;
	fConst45 = (1 + ((fConst17 - 1.0000000000000004) / fConst14));
	fConst46 = (1 + ((fConst17 + 1.0000000000000004) / fConst14));
	fConst47 = (1.0 / fConst46);
	fConst48 = (1 + fConst17);
	fConst49 = (0 - ((1 - fConst17) / fConst48));
	for (int i=0; i<2; i++) fRec20[i] = 0;
	for (int i=0; i<3; i++) fRec19[i] = 0;
	for (int i=0; i<2; i++) fVec1[i] = 0;
	fConst50 = (0 - fConst17);
	fConst51 = (1.0 / (fConst48 * fConst25));
	for (int i=0; i<2; i++) fRec18[i] = 0;
	for (int i=0; i<3; i++) fRec17[i] = 0;
	fConst52 = (2 * (0 - fConst15));
	for (int i=0; i<3; i++) fRec16[i] = 0;
	fConst53 = (1 + ((fConst11 - 1.0000000000000004) / fConst8));
	fConst54 = (1.0 / (1 + ((fConst11 + 1.0000000000000004) / fConst8)));
	fConst55 = (1 + fConst11);
	fConst56 = (0 - ((1 - fConst11) / fConst55));
	for (int i=0; i<2; i++) fRec24[i] = 0;
	for (int i=0; i<3; i++) fRec23[i] = 0;
	for (int i=0; i<2; i++) fVec2[i] = 0;
	fConst57 = (0 - fConst11);
	fConst58 = (1.0 / (fConst55 * fConst46));
	for (int i=0; i<2; i++) fRec22[i] = 0;
	for (int i=0; i<3; i++) fRec21[i] = 0;
	fConst59 = (2 * (0 - fConst9));
	for (int i=0; i<2; i++) fRec26[i] = 0;
	for (int i=0; i<3; i++) fRec25[i] = 0;
	for (int i=0; i<2; i++) fRec27[i] = 0;
	fConst60 = (1.0 / tan((270.1769682087222 / fSamplingFreq)));
	fConst61 = (1 + fConst60);
	fConst62 = (0 - ((1 - fConst60) / fConst61));
	for (int i=0; i<2; i++) fVec3[i] = 0;
	fConst63 = (0.027 / fConst61);
	for (int i=0; i<2; i++) fRec28[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	fConst64 = (0 - fConst0);
	fConst65 = (0.025 / fConst1);
	for (int i=0; i<2; i++) fRec8[i] = 0;
	fConst66 = (0.77 / fConst6);
	for (int i=0; i<2; i++) fRec7[i] = 0;
	fConst67 = (1.0 / tan((414.6902302738527 / fSamplingFreq)));
	fConst68 = (1 + fConst67);
	fConst69 = (0 - ((1 - fConst67) / fConst68));
	for (int i=0; i<2; i++) fVec4[i] = 0;
	fConst70 = (0.015 / fConst68);
	for (int i=0; i<2; i++) fRec29[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<2; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<3; i++) fRec2[i] = 0;
	fConst71 = (1.0 / tan((609.4689747964198 / fSamplingFreq)));
	fConst72 = (1 + fConst71);
	fConst73 = (0 - ((1 - fConst71) / fConst72));
	for (int i=0; i<2; i++) fVec5[i] = 0;
	fConst74 = (0.0082 / fConst72);
	for (int i=0; i<2; i++) fRec30[i] = 0;
	for (int i=0; i<2; i++) fRec1[i] = 0;
	for (int i=0; i<2; i++) fRec0[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = (0.0010000000000000009 * pow(10,(0.05 * fslider0)));
	double 	fSlow1 = fslider1;
	double 	fSlow2 = (2 * (fSlow1 - 0.5));
	double 	fSlow3 = (1 - max(0, fSlow2));
	double 	fSlow4 = pow(1e+01,(0.8 * fSlow1));
	double 	fSlow5 = pow(1e+01,(1.2 * fSlow1));
	double 	fSlow6 = (fConst54 * pow(1e+01,(2 * fSlow1)));
	double 	fSlow7 = (fConst54 * pow(1e+01,(0.9 * fSlow1)));
	double 	fSlow8 = (4.0 * (1 - max(0, (0 - fSlow2))));
	double 	fSlow9 = (0.0010000000000000009 * pow(10,(0.05 * fslider2)));
	for (int i=0; i<count; i++) {
		fRec3[0] = (fSlow0 + (0.999 * fRec3[1]));
		double fTemp0 = (double)input0[i];
		double fTemp1 = (fConst10 * fRec10[1]);
		double fTemp2 = (fConst16 * fRec11[1]);
		fRec15[0] = (fTemp0 - (fConst40 * ((fConst39 * fRec15[2]) + (fConst37 * fRec15[1]))));
		fRec14[0] = ((fConst40 * (fRec15[2] + (fRec15[0] + (2 * fRec15[1])))) - (fConst35 * ((fConst33 * fRec14[2]) + (fConst31 * fRec14[1]))));
		double fTemp3 = (((fConst30 * fRec14[0]) + (fConst41 * fRec14[1])) + (fConst30 * fRec14[2]));
		fVec0[0] = fTemp3;
		fRec13[0] = ((fConst43 * ((fConst42 * fVec0[1]) + (fConst23 * fVec0[0]))) + (fConst28 * fRec13[1]));
		fRec12[0] = (fRec13[0] - (fConst26 * ((fConst24 * fRec12[2]) + (fConst22 * fRec12[1]))));
		fRec11[0] = ((fConst26 * (((fConst21 * fRec12[0]) + (fConst44 * fRec12[1])) + (fConst21 * fRec12[2]))) - (fConst19 * ((fConst18 * fRec11[2]) + fTemp2)));
		fRec10[0] = ((fRec11[2] + (fConst19 * (fTemp2 + (fConst18 * fRec11[0])))) - (fConst13 * ((fConst12 * fRec10[2]) + fTemp1)));
		double fTemp4 = max(-1, min(1, (fSlow4 * (fRec10[2] + (fConst13 * (fTemp1 + (fConst12 * fRec10[0])))))));
		double fTemp5 = (fConst10 * fRec16[1]);
		fRec20[0] = ((fConst43 * (fVec0[0] + fVec0[1])) + (fConst28 * fRec20[1]));
		fRec19[0] = (fRec20[0] - (fConst26 * ((fConst24 * fRec19[2]) + (fConst22 * fRec19[1]))));
		double fTemp6 = (fRec19[2] + (fRec19[0] + (2 * fRec19[1])));
		fVec1[0] = fTemp6;
		fRec18[0] = ((fConst51 * ((fConst50 * fVec1[1]) + (fConst17 * fVec1[0]))) + (fConst49 * fRec18[1]));
		fRec17[0] = (fRec18[0] - (fConst47 * ((fConst45 * fRec17[2]) + (fConst16 * fRec17[1]))));
		fRec16[0] = ((fConst47 * (((fConst15 * fRec17[0]) + (fConst52 * fRec17[1])) + (fConst15 * fRec17[2]))) - (fConst13 * ((fConst12 * fRec16[2]) + fTemp5)));
		double fTemp7 = max(-1, min(1, (fSlow5 * (fRec16[2] + (fConst13 * (fTemp5 + (fConst12 * fRec16[0])))))));
		fRec24[0] = ((fConst51 * (fVec1[0] + fVec1[1])) + (fConst49 * fRec24[1]));
		fRec23[0] = (fRec24[0] - (fConst47 * ((fConst45 * fRec23[2]) + (fConst16 * fRec23[1]))));
		double fTemp8 = (fRec23[2] + (fRec23[0] + (2 * fRec23[1])));
		fVec2[0] = fTemp8;
		fRec22[0] = ((fConst58 * ((fConst57 * fVec2[1]) + (fConst11 * fVec2[0]))) + (fConst56 * fRec22[1]));
		fRec21[0] = (fRec22[0] - (fConst54 * ((fConst53 * fRec21[2]) + (fConst10 * fRec21[1]))));
		double fTemp9 = max(-1, min(1, (fSlow6 * (((fConst9 * fRec21[0]) + (fConst59 * fRec21[1])) + (fConst9 * fRec21[2])))));
		fRec26[0] = ((fConst58 * (fVec2[0] + fVec2[1])) + (fConst56 * fRec26[1]));
		fRec25[0] = (fRec26[0] - (fConst54 * ((fConst53 * fRec25[2]) + (fConst10 * fRec25[1]))));
		double fTemp10 = max(-1, min(1, (fSlow7 * (fRec25[2] + (fRec25[0] + (2 * fRec25[1]))))));
		fRec27[0] = (fSlow9 + (0.999 * fRec27[1]));
		double fTemp11 = (fRec9[1] - 2.5e+02);
		fVec3[0] = fTemp11;
		fRec28[0] = ((fConst63 * (fVec3[0] + fVec3[1])) + (fConst62 * fRec28[1]));
		fRec9[0] = Ftube2(0, (fRec28[0] + (fRec27[0] * ((fSlow8 * ((((fTemp10 * (1 - (0.3333333333333333 * faustpower<2>(fTemp10)))) + (fTemp9 * (1 - (0.3333333333333333 * faustpower<2>(fTemp9))))) + (0.625 * (fTemp7 * (1 - (0.3333333333333333 * faustpower<2>(fTemp7)))))) + (0.5 * (fTemp4 * (1 - (0.3333333333333333 * faustpower<2>(fTemp4))))))) + (fSlow3 * fTemp0)))));
		fRec8[0] = ((fConst65 * ((fConst64 * fRec9[1]) + (fConst0 * fRec9[0]))) + (fConst2 * fRec8[1]));
		fRec7[0] = ((fConst66 * (fRec8[0] + fRec8[1])) + (fConst7 * fRec7[1]));
		double fTemp12 = (fRec6[1] - 2.5e+02);
		fVec4[0] = fTemp12;
		fRec29[0] = ((fConst70 * (fVec4[0] + fVec4[1])) + (fConst69 * fRec29[1]));
		fRec6[0] = Ftube2(1, (fRec29[0] + (fRec27[0] * fRec7[0])));
		fRec5[0] = ((fConst65 * ((fConst64 * fRec6[1]) + (fConst0 * fRec6[0]))) + (fConst2 * fRec5[1]));
		fRec4[0] = ((fConst66 * (fRec5[0] + fRec5[1])) + (fConst7 * fRec4[1]));
		fRec2[0] = ((fRec4[0] * fRec3[0]) - ((0.8502684100000001 * fRec2[2]) + (fConst4 * fRec2[1])));
		double fTemp13 = (fRec1[1] - 2.5e+02);
		fVec5[0] = fTemp13;
		fRec30[0] = ((fConst74 * (fVec5[0] + fVec5[1])) + (fConst73 * fRec30[1]));
		fRec1[0] = Ftube2(1, ((fRec30[0] + fRec2[0]) - (1.059 * fRec2[1])));
		fRec0[0] = ((fConst65 * ((fConst64 * fRec1[1]) + (fConst0 * fRec1[0]))) + (fConst2 * fRec0[1]));
		output0[i] = (FAUSTFLOAT)(0.77 * fRec0[0]);
		// post processing
		fRec0[1] = fRec0[0];
		fRec1[1] = fRec1[0];
		fRec30[1] = fRec30[0];
		fVec5[1] = fVec5[0];
		fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
		fRec4[1] = fRec4[0];
		fRec5[1] = fRec5[0];
		fRec6[1] = fRec6[0];
		fRec29[1] = fRec29[0];
		fVec4[1] = fVec4[0];
		fRec7[1] = fRec7[0];
		fRec8[1] = fRec8[0];
		fRec9[1] = fRec9[0];
		fRec28[1] = fRec28[0];
		fVec3[1] = fVec3[0];
		fRec27[1] = fRec27[0];
		fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
		fRec26[1] = fRec26[0];
		fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
		fRec22[1] = fRec22[0];
		fVec2[1] = fVec2[0];
		fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
		fRec24[1] = fRec24[0];
		fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
		fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
		fRec18[1] = fRec18[0];
		fVec1[1] = fVec1[0];
		fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
		fRec20[1] = fRec20[0];
		fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
		fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
		fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
		fRec13[1] = fRec13[0];
		fVec0[1] = fVec0[0];
		fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
		fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
		fRec3[1] = fRec3[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerInit("amp-t2", init);
}

} // end namespace gxamp2
