// generated from file '../src/faust/drumseq.dsp' by dsp2cc:
// Code generated with Faust 0.9.73 (http://faust.grame.fr)


namespace drumseq {


Dsp::Dsp() {
}

Dsp::~Dsp() {
}

inline void Dsp::clear_state_f()
{
	for (int i=0; i<2; i++) iVec0[i] = 0;
	for (int i=0; i<2; i++) fRec0[i] = 0;
	for (int i=0; i<2; i++) fRec1[i] = 0;
	for (int i=0; i<2; i++) fVec1[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<2; i++) iRec2[i] = 0;
	for (int i=0; i<2; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<2; i++) fVec2[i] = 0;
	for (int i=0; i<2; i++) iRec7[i] = 0;
	for (int i=0; i<2; i++) fRec8[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	for (int i=0; i<2; i++) fRec10[i] = 0;
	for (int i=0; i<2; i++) iRec13[i] = 0;
	for (int i=0; i<2; i++) fRec12[i] = 0;
	for (int i=0; i<3; i++) fRec11[i] = 0;
	for (int i=0; i<2; i++) iRec14[i] = 0;
	for (int i=0; i<2; i++) fRec15[i] = 0;
	for (int i=0; i<2; i++) fRec17[i] = 0;
	for (int i=0; i<3; i++) fRec16[i] = 0;
	for (int i=0; i<2; i++) iRec18[i] = 0;
	for (int i=0; i<2; i++) fRec19[i] = 0;
	for (int i=0; i<2; i++) fRec20[i] = 0;
	for (int i=0; i<2; i++) fVec3[i] = 0;
	for (int i=0; i<2; i++) fRec21[i] = 0;
	for (int i=0; i<2; i++) fRec26[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	for (int i=0; i<64; i++) fVec5[i] = 0;
	for (int i=0; i<2; i++) fRec27[i] = 0;
	for (int i=0; i<2; i++) fRec28[i] = 0;
	for (int i=0; i<2; i++) fRec24[i] = 0;
	for (int i=0; i<2; i++) fRec25[i] = 0;
	for (int i=0; i<2; i++) fRec31[i] = 0;
	for (int i=0; i<2; i++) fRec32[i] = 0;
	for (int i=0; i<2; i++) fRec29[i] = 0;
	for (int i=0; i<2; i++) fRec30[i] = 0;
	for (int i=0; i<2; i++) fRec35[i] = 0;
	for (int i=0; i<2; i++) fRec36[i] = 0;
	for (int i=0; i<2; i++) fRec33[i] = 0;
	for (int i=0; i<2; i++) fRec34[i] = 0;
	for (int i=0; i<2; i++) fRec39[i] = 0;
	for (int i=0; i<2; i++) fRec40[i] = 0;
	for (int i=0; i<2; i++) fRec37[i] = 0;
	for (int i=0; i<2; i++) fRec38[i] = 0;
	for (int i=0; i<2; i++) fVec6[i] = 0;
	for (int i=0; i<2; i++) fRec23[i] = 0;
	for (int i=0; i<3; i++) fRec22[i] = 0;
	for (int i=0; i<2; i++) fRec43[i] = 0;
	for (int i=0; i<2; i++) iRec41[i] = 0;
	for (int i=0; i<2; i++) fRec42[i] = 0;
	for (int i=0; i<2; i++) fRec45[i] = 0;
	for (int i=0; i<3; i++) fRec44[i] = 0;
	for (int i=0; i<2; i++) iRec46[i] = 0;
	for (int i=0; i<2; i++) fRec47[i] = 0;
	for (int i=0; i<2; i++) fRec48[i] = 0;
	for (int i=0; i<2; i++) fVec7[i] = 0;
	for (int i=0; i<2; i++) fRec49[i] = 0;
	for (int i=0; i<2; i++) fRec53[i] = 0;
	for (int i=0; i<3; i++) fRec52[i] = 0;
	for (int i=0; i<2; i++) fVec8[i] = 0;
	for (int i=0; i<2; i++) fRec51[i] = 0;
	for (int i=0; i<3; i++) fRec50[i] = 0;
	for (int i=0; i<2; i++) fRec56[i] = 0;
	for (int i=0; i<2; i++) iRec54[i] = 0;
	for (int i=0; i<2; i++) fRec55[i] = 0;
	for (int i=0; i<2; i++) fRec61[i] = 0;
	for (int i=0; i<2; i++) fRec62[i] = 0;
	for (int i=0; i<2; i++) fRec63[i] = 0;
	for (int i=0; i<2; i++) fRec59[i] = 0;
	for (int i=0; i<2; i++) fRec60[i] = 0;
	for (int i=0; i<2; i++) fRec58[i] = 0;
	for (int i=0; i<3; i++) fRec57[i] = 0;
	for (int i=0; i<2; i++) fRec66[i] = 0;
	for (int i=0; i<2; i++) iRec64[i] = 0;
	for (int i=0; i<2; i++) fRec65[i] = 0;
	for (int i=0; i<2; i++) fRec67[i] = 0;
	for (int i=0; i<2; i++) fVec9[i] = 0;
	for (int i=0; i<2; i++) fRec70[i] = 0;
	for (int i=0; i<2; i++) iRec68[i] = 0;
	for (int i=0; i<2; i++) fRec69[i] = 0;
	for (int i=0; i<2; i++) fRec71[i] = 0;
	for (int i=0; i<2; i++) fRec72[i] = 0;
	for (int i=0; i<2; i++) fRec73[i] = 0;
	for (int i=0; i<2; i++) fRec74[i] = 0;
	for (int i=0; i<2; i++) fRec77[i] = 0;
	for (int i=0; i<2; i++) fRec78[i] = 0;
	for (int i=0; i<2; i++) fRec79[i] = 0;
	for (int i=0; i<2; i++) fVec10[i] = 0;
	for (int i=0; i<2; i++) fRec75[i] = 0;
	for (int i=0; i<2; i++) fRec76[i] = 0;
	for (int i=0; i<2; i++) iRec80[i] = 0;
	for (int i=0; i<2; i++) fRec81[i] = 0;
}

inline void Dsp::init(unsigned int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	iConst0 = min(192000, max(1, fSamplingFreq));
	fConst1 = double(iConst0);
	fConst2 = (1.0 / double(int((0.0005 * fConst1))));
	fConst3 = (1 - (1.0 / pow(1e+03,(13.333333333333334 / double(iConst0)))));
	fConst4 = (2e+03 / double(iConst0));
	fConst5 = (1162.3892818282234 / double(iConst0));
	fConst6 = cos(fConst5);
	fConst7 = sin(fConst5);
	fConst8 = (0 - fConst7);
	fConst9 = (1 - (1.0 / pow(1e+03,(18.181818181818183 / double(iConst0)))));
	fConst10 = (2073.4511513692632 / double(iConst0));
	fConst11 = cos(fConst10);
	fConst12 = sin(fConst10);
	fConst13 = (0 - fConst12);
	fConst14 = tan((22116.812281272145 / double(iConst0)));
	fConst15 = (2 * (1 - (1.0 / faustpower<2>(fConst14))));
	fConst16 = (1.0 / fConst14);
	fConst17 = (1 + ((fConst16 - 1.0000000000000004) / fConst14));
	fConst18 = (1.0 / (1 + ((1.0000000000000004 + fConst16) / fConst14)));
	fConst19 = (1 + fConst16);
	fConst20 = (4.656612875245797e-10 / fConst19);
	fConst21 = (0 - ((1 - fConst16) / fConst19));
	fConst22 = (1 - (1.0 / pow(1e+03,(5.0 / double(iConst0)))));
	fConst23 = tan((1643.0529578274618 / double(iConst0)));
	fConst24 = (1.0 / faustpower<2>(fConst23));
	fConst25 = (2 * (1 - fConst24));
	fConst26 = (1.0 / fConst23);
	fConst27 = (1 + ((fConst26 - 1.0000000000000004) / fConst23));
	fConst28 = (1.0 / (1 + ((1.0000000000000004 + fConst26) / fConst23)));
	fConst29 = (0 - fConst26);
	fConst30 = (1 + fConst26);
	fConst31 = (4.656612875245797e-10 / fConst30);
	fConst32 = (0 - ((1 - fConst26) / fConst30));
	fConst33 = (2 * (0 - fConst24));
	fConst34 = (1 - (1.0 / pow(1e+03,(5.46448087431694 / double(iConst0)))));
	fConst35 = (1.0 / double(int((0.01 * fConst1))));
	fConst36 = (3.141592653589793 / double(iConst0));
	fConst37 = (1.6e+03 / fConst1);
	IOTA = 0;
	fConst38 = max((double)0, min((double)2047, (0.0003125 * fConst1)));
	iConst39 = int(fConst38);
	iConst40 = (1 + iConst39);
	iConst41 = int(iConst40);
	fConst42 = (0.00015625 * (fConst38 - iConst39));
	fConst43 = (0.00015625 * (iConst40 - fConst38));
	fConst44 = (4.572399611740729 / double(iConst0));
	fConst45 = cos(fConst44);
	fConst46 = sin(fConst44);
	fConst47 = (0 - fConst46);
	fConst48 = (0.72772 * fConst1);
	fConst49 = (6.283185307179586 / double(iConst0));
	fConst50 = (20.327952464404543 / double(iConst0));
	fConst51 = cos(fConst50);
	fConst52 = sin(fConst50);
	fConst53 = (0 - fConst52);
	fConst54 = (3.235294117647059 * fConst1);
	fConst55 = (326.7256359733385 / double(iConst0));
	fConst56 = cos(fConst55);
	fConst57 = sin(fConst55);
	fConst58 = (0 - fConst57);
	fConst59 = (52.0 * fConst1);
	fConst60 = (1498.2980347889782 / double(iConst0));
	fConst61 = cos(fConst60);
	fConst62 = sin(fConst60);
	fConst63 = (0 - fConst62);
	fConst64 = (238.46153846153845 * fConst1);
	fConst65 = (1.0 / double(int((0.005 * fConst1))));
	fConst66 = (1e+02 / double(iConst0));
	fConst67 = (1 - (1.0 / pow(1e+03,fConst66)));
	fConst68 = (2e+02 / double(iConst0));
	fConst69 = (1.0 / double(int((0.1 * fConst1))));
	fConst70 = (1.0 / double(iConst0));
	fConst71 = (2.0 / double(iConst0));
	fConst72 = (1 - (1.0 / pow(1e+03,(1e+01 / double(iConst0)))));
	fConst73 = (1.0 / double(int((0.03 * fConst1))));
	fConst74 = tan((1570.7963267948965 / double(iConst0)));
	fConst75 = (1.0 / faustpower<2>(fConst74));
	fConst76 = (2 * (1 - fConst75));
	fConst77 = (1.0 / fConst74);
	fConst78 = (1 + ((fConst77 - 1.0000000000000004) / fConst74));
	fConst79 = (1.0 / (1 + ((1.0000000000000004 + fConst77) / fConst74)));
	fConst80 = (0 - fConst77);
	fConst81 = (1 + fConst77);
	fConst82 = (1.396983862573739e-11 / fConst81);
	fConst83 = (0 - ((1 - fConst77) / fConst81));
	fConst84 = (2 * (0 - fConst75));
	fConst85 = (1 - (1.0 / pow(1e+03,fConst70)));
	fConst86 = tan((3141.592653589793 / double(iConst0)));
	fConst87 = (2 * (1 - (1.0 / faustpower<2>(fConst86))));
	fConst88 = (1.0 / fConst86);
	fConst89 = (1 + ((fConst88 - 1.0000000000000004) / fConst86));
	fConst90 = (1.0 / (1 + ((1.0000000000000004 + fConst88) / fConst86)));
	fConst91 = (31.41592653589793 / double(iConst0));
	fConst92 = cos(fConst91);
	fConst93 = sin(fConst91);
	fConst94 = (0 - fConst93);
	fConst95 = (1.0 / double(int((0.02 * fConst1))));
	fConst96 = (1 + fConst88);
	fConst97 = (1.0 / fConst96);
	fConst98 = (0 - ((1 - fConst88) / fConst96));
	fConst99 = (1 - (1.0 / pow(1e+03,(2.5 / double(iConst0)))));
	fConst100 = (565.4866776461628 / double(iConst0));
	fConst101 = cos(fConst100);
	fConst102 = sin(fConst100);
	fConst103 = (0 - fConst102);
	fConst104 = (452.3893421169302 / double(iConst0));
	fConst105 = cos(fConst104);
	fConst106 = sin(fConst104);
	fConst107 = (0 - fConst106);
	fConst108 = (480.66367599923836 / double(iConst0));
	fConst109 = cos(fConst108);
	fConst110 = sin(fConst108);
	fConst111 = (0 - fConst110);
	fConst112 = (0.012345679012345678 * fConst1);
	fConst113 = (162.0 / fConst1);
	fConst114 = (0.012345679012345678 * iConst0);
	clear_state_f();
}

void always_inline Dsp::compute(int count, FAUSTFLOAT *input0, FAUSTFLOAT *output0)
{
#define fcheckbox0 (*fcheckbox0_)
#define fcheckbox1 (*fcheckbox1_)
#define fcheckbox2 (*fcheckbox2_)
#define fcheckbox3 (*fcheckbox3_)
	double 	fSlow0 = (0.0010000000000000009 * double(fslider0));
	double 	fSlow1 = (0.0010000000000000009 * double(fslider1));
	double 	fSlow2 = double(fcheckbox0);
	double 	fSlow3 = (0.0010000000000000009 * double(fslider2));
	double 	fSlow4 = double(fcheckbox1);
	double 	fSlow5 = (0.0010000000000000009 * double(fslider3));
	double 	fSlow6 = double(fcheckbox2);
	double 	fSlow7 = (0.0010000000000000009 * double(fslider4));
	double 	fSlow8 = double(fcheckbox3);
	for (int i=0; i<count; i++) {
		iVec0[0] = 1;
		fRec0[0] = ((0.999 * fRec0[1]) + fSlow0);
		fRec1[0] = ((0.999 * fRec1[1]) + fSlow1);
		fVec1[0] = fSlow2;
		fRec4[0] = ((fRec4[1] + (fSlow2 > fVec1[1])) - (fConst2 * (fRec4[1] > 0.0)));
		int iTemp0 = (fRec4[0] > 0.0);
		int iTemp1 = (iTemp0 > 0);
		iRec2[0] = (iTemp1 & (iRec2[1] | (fRec3[1] >= 1)));
		int iTemp2 = (iTemp0 <= 0);
		int iTemp3 = (iTemp2 & (fRec3[1] > 0));
		fRec3[0] = (((fConst4 * (((iRec2[1] == 0) & iTemp1) & (fRec3[1] < 1))) + (fRec3[1] * (1 - (fConst3 * iTemp3)))) * ((iTemp3 == 0) | (fRec3[1] >= 1e-06)));
		fRec5[0] = ((fConst7 * fRec6[1]) + (fConst6 * fRec5[1]));
		fRec6[0] = ((1 + ((fConst6 * fRec6[1]) + (fConst8 * fRec5[1]))) - iVec0[1]);
		fVec2[0] = 0.25;
		iRec7[0] = (iTemp1 & (iRec7[1] | (fRec8[1] >= 1)));
		int iTemp4 = (iTemp2 & (fRec8[1] > 0));
		fRec8[0] = (((fConst4 * (((iRec7[1] == 0) & iTemp1) & (fRec8[1] < 1))) + (fRec8[1] * (1 - (fConst9 * iTemp4)))) * ((iTemp4 == 0) | (fRec8[1] >= 1e-06)));
		fRec9[0] = ((fConst12 * fRec10[1]) + (fConst11 * fRec9[1]));
		fRec10[0] = ((1 + ((fConst11 * fRec10[1]) + (fConst13 * fRec9[1]))) - iVec0[1]);
		iRec13[0] = (12345 + (1103515245 * iRec13[1]));
		fRec12[0] = ((fConst21 * fRec12[1]) + (fConst20 * (iRec13[0] + iRec13[1])));
		fRec11[0] = (fRec12[0] - (fConst18 * ((fConst17 * fRec11[2]) + (fConst15 * fRec11[1]))));
		iRec14[0] = (iTemp1 & (iRec14[1] | (fRec15[1] >= 1)));
		int iTemp5 = (iTemp2 & (fRec15[1] > 0));
		fRec15[0] = (((fConst4 * (((iRec14[1] == 0) & iTemp1) & (fRec15[1] < 1))) + (fRec15[1] * (1 - (fConst22 * iTemp5)))) * ((iTemp5 == 0) | (fRec15[1] >= 1e-06)));
		fRec17[0] = ((fConst32 * fRec17[1]) + (fConst31 * ((fConst26 * iRec13[0]) + (fConst29 * iRec13[1]))));
		fRec16[0] = (fRec17[0] - (fConst28 * ((fConst27 * fRec16[2]) + (fConst25 * fRec16[1]))));
		iRec18[0] = (iTemp1 & (iRec18[1] | (fRec19[1] >= 1)));
		int iTemp6 = (iTemp2 & (fRec19[1] > 0));
		fRec19[0] = (((fConst4 * (((iRec18[1] == 0) & iTemp1) & (fRec19[1] < 1))) + (fRec19[1] * (1 - (fConst34 * iTemp6)))) * ((iTemp6 == 0) | (fRec19[1] >= 1e-06)));
		fRec20[0] = ((0.999 * fRec20[1]) + fSlow3);
		fVec3[0] = fSlow4;
		int iTemp7 = (fSlow4 > fVec3[1]);
		fRec21[0] = ((iTemp7 + fRec21[1]) - (fConst35 * (fRec21[1] > 0.0)));
		double fTemp8 = tan((fConst36 * (12000 - (3000 * fRec21[0]))));
		double fTemp9 = (1.0 / fTemp8);
		double fTemp10 = (1 + ((1.0000000000000004 + fTemp9) / fTemp8));
		double fTemp11 = faustpower<2>(fTemp8);
		double fTemp12 = (1.0 / fTemp11);
		double fTemp13 = (1 + fTemp9);
		fRec26[0] = fmod((fConst37 + fRec26[1]),1);
		double fTemp14 = faustpower<2>(((2 * fRec26[0]) - 1));
		fVec4[0] = fTemp14;
		double fTemp15 = (iVec0[1] * (fVec4[0] - fVec4[1]));
		fVec5[IOTA&63] = fTemp15;
		double fTemp16 = (((0.00015625 * fVec5[IOTA&63]) - (fConst43 * fVec5[(IOTA-iConst39)&63])) - (fConst42 * fVec5[(IOTA-iConst41)&63]));
		fRec27[0] = ((fConst46 * fRec28[1]) + (fConst45 * fRec27[1]));
		fRec28[0] = ((1 + ((fConst45 * fRec28[1]) + (fConst47 * fRec27[1]))) - iVec0[1]);
		double fTemp17 = (fConst49 * (2094.4 + (fConst48 * (fRec27[0] * fTemp16))));
		double fTemp18 = cos(fTemp17);
		double fTemp19 = sin(fTemp17);
		fRec24[0] = ((fRec25[1] * fTemp19) + (fRec24[1] * fTemp18));
		fRec25[0] = ((1 + ((fRec25[1] * fTemp18) + (fRec24[1] * (0 - fTemp19)))) - iVec0[1]);
		fRec31[0] = ((fConst52 * fRec32[1]) + (fConst51 * fRec31[1]));
		fRec32[0] = ((1 + ((fConst51 * fRec32[1]) + (fConst53 * fRec31[1]))) - iVec0[1]);
		double fTemp20 = (fConst49 * (4944.0 + (fConst54 * (fRec31[0] * fTemp16))));
		double fTemp21 = cos(fTemp20);
		double fTemp22 = sin(fTemp20);
		fRec29[0] = ((fRec30[1] * fTemp22) + (fRec29[1] * fTemp21));
		fRec30[0] = ((1 + ((fRec30[1] * fTemp21) + (fRec29[1] * (0 - fTemp22)))) - iVec0[1]);
		fRec35[0] = ((fConst57 * fRec36[1]) + (fConst56 * fRec35[1]));
		fRec36[0] = ((1 + ((fConst56 * fRec36[1]) + (fConst58 * fRec35[1]))) - iVec0[1]);
		double fTemp23 = (fConst49 * (3847.9999999999995 + (fConst59 * (fRec35[0] * fTemp16))));
		double fTemp24 = cos(fTemp23);
		double fTemp25 = sin(fTemp23);
		fRec33[0] = ((fRec34[1] * fTemp25) + (fRec33[1] * fTemp24));
		fRec34[0] = ((1 + ((fRec34[1] * fTemp24) + (fRec33[1] * (0 - fTemp25)))) - iVec0[1]);
		fRec39[0] = ((fConst62 * fRec40[1]) + (fConst61 * fRec39[1]));
		fRec40[0] = ((1 + ((fConst61 * fRec40[1]) + (fConst63 * fRec39[1]))) - iVec0[1]);
		double fTemp26 = (fConst49 * (2144.0 + (fConst64 * (fRec39[0] * fTemp16))));
		double fTemp27 = cos(fTemp26);
		double fTemp28 = sin(fTemp26);
		fRec37[0] = ((fRec38[1] * fTemp28) + (fRec37[1] * fTemp27));
		fRec38[0] = ((1 + ((fRec38[1] * fTemp27) + (fRec37[1] * (0 - fTemp28)))) - iVec0[1]);
		double fTemp29 = (((fRec37[0] + fRec33[0]) + fRec29[0]) + fRec24[0]);
		fVec6[0] = fTemp29;
		fRec23[0] = ((fRec23[1] * (0 - ((1 - fTemp9) / fTemp13))) + (((fVec6[1] * (0 - fTemp9)) + (fVec6[0] / fTemp8)) / fTemp13));
		fRec22[0] = (fRec23[0] - (((fRec22[2] * (1 + ((fTemp9 - 1.0000000000000004) / fTemp8))) + (2 * (fRec22[1] * (1 - fTemp12)))) / fTemp10));
		fRec43[0] = ((iTemp7 + fRec43[1]) - (fConst65 * (fRec43[1] > 0.0)));
		int iTemp30 = (fRec43[0] > 0.0);
		int iTemp31 = (iTemp30 > 0);
		iRec41[0] = (iTemp31 & (iRec41[1] | (fRec42[1] >= 1)));
		int iTemp32 = (iTemp30 <= 0);
		int iTemp33 = (iTemp32 & (fRec42[1] > 0));
		fRec42[0] = (((iTemp33 == 0) | (fRec42[1] >= 1e-06)) * ((fConst68 * (((iRec41[1] == 0) & iTemp31) & (fRec42[1] < 1))) + (fRec42[1] * (1 - (fConst67 * iTemp33)))));
		fRec45[0] = ((fRec45[1] + iTemp7) - (fConst69 * (fRec45[1] > 0.0)));
		double fTemp34 = (9000 + (6000 * fRec45[0]));
		double fTemp35 = (0 - (3.141592653589793 * fTemp34));
		fRec44[0] = (0 - ((((fRec44[1] * (0 - (fConst71 * fTemp35))) * cos((fConst49 * fTemp34))) + (faustpower<2>((fConst70 * fTemp35)) * fRec44[2])) - fVec6[0]));
		iRec46[0] = (iTemp31 & (iRec46[1] | (fRec47[1] >= 1)));
		int iTemp36 = (iTemp32 & (fRec47[1] > 0));
		fRec47[0] = (((fConst68 * (((iRec46[1] == 0) & iTemp31) & (fRec47[1] < 1))) + (fRec47[1] * (1 - (fConst72 * iTemp36)))) * ((iTemp36 == 0) | (fRec47[1] >= 1e-06)));
		fRec48[0] = ((0.999 * fRec48[1]) + fSlow5);
		fVec7[0] = fSlow6;
		int iTemp37 = (fSlow6 > fVec7[1]);
		fRec49[0] = ((iTemp37 + fRec49[1]) - (fConst73 * (fRec49[1] > 0.0)));
		double fTemp38 = tan((fConst36 * (500 + (5500 * fRec49[0]))));
		double fTemp39 = (1.0 / fTemp38);
		double fTemp40 = (1 + ((1.0000000000000004 + fTemp39) / fTemp38));
		double fTemp41 = (1 + fTemp39);
		fRec53[0] = ((fConst83 * fRec53[1]) + (fConst82 * ((fConst77 * iRec13[0]) + (fConst80 * iRec13[1]))));
		fRec52[0] = (fRec53[0] - (fConst79 * ((fConst78 * fRec52[2]) + (fConst76 * fRec52[1]))));
		double fTemp42 = (((fConst75 * fRec52[0]) + (fConst84 * fRec52[1])) + (fConst75 * fRec52[2]));
		fVec8[0] = fTemp42;
		fRec51[0] = ((fRec51[1] * (0 - ((1 - fTemp39) / fTemp41))) + (fConst79 * ((fVec8[0] + fVec8[1]) / fTemp41)));
		fRec50[0] = (fRec51[0] - (((fRec50[2] * (1 + ((fTemp39 - 1.0000000000000004) / fTemp38))) + (2 * (fRec50[1] * (1 - (1.0 / faustpower<2>(fTemp38)))))) / fTemp40));
		fRec56[0] = ((iTemp37 + fRec56[1]) - (fConst35 * (fRec56[1] > 0.0)));
		int iTemp43 = (fRec56[0] > 0.0);
		int iTemp44 = (iTemp43 > 0);
		iRec54[0] = (iTemp44 & (iRec54[1] | (fRec55[1] >= 1)));
		int iTemp45 = ((iTemp43 <= 0) & (fRec55[1] > 0));
		fRec55[0] = (((fConst66 * (((iRec54[1] == 0) & iTemp44) & (fRec55[1] < 1))) + (fRec55[1] * (1 - (fConst85 * iTemp45)))) * ((iTemp45 == 0) | (fRec55[1] >= 1e-06)));
		fRec61[0] = ((fConst93 * fRec62[1]) + (fConst92 * fRec61[1]));
		fRec62[0] = ((1 + ((fConst92 * fRec62[1]) + (fConst94 * fRec61[1]))) - iVec0[1]);
		fRec63[0] = ((fRec63[1] + iTemp37) - (fConst95 * (fRec63[1] > 0.0)));
		double fTemp46 = (fConst49 * ((50 * (1 + fRec63[0])) + (19.23076923076923 * fRec61[0])));
		double fTemp47 = cos(fTemp46);
		double fTemp48 = sin(fTemp46);
		fRec59[0] = ((fRec60[1] * fTemp48) + (fRec59[1] * fTemp47));
		fRec60[0] = ((1 + ((fRec60[1] * fTemp47) + (fRec59[1] * (0 - fTemp48)))) - iVec0[1]);
		fRec58[0] = ((fConst98 * fRec58[1]) + (fConst97 * (fRec59[0] + fRec59[1])));
		fRec57[0] = (fRec58[0] - (fConst90 * ((fConst89 * fRec57[2]) + (fConst87 * fRec57[1]))));
		fRec66[0] = ((iTemp37 + fRec66[1]) - (fConst65 * (fRec66[1] > 0.0)));
		int iTemp49 = (fRec66[0] > 0.0);
		int iTemp50 = (iTemp49 > 0);
		iRec64[0] = (iTemp50 & (iRec64[1] | (fRec65[1] >= 1)));
		int iTemp51 = ((iTemp49 <= 0) & (fRec65[1] > 0));
		fRec65[0] = (((fConst68 * (((iRec64[1] == 0) & iTemp50) & (fRec65[1] < 1))) + (fRec65[1] * (1 - (fConst99 * iTemp51)))) * ((iTemp51 == 0) | (fRec65[1] >= 1e-06)));
		fRec67[0] = ((0.999 * fRec67[1]) + fSlow7);
		fVec9[0] = fSlow8;
		fRec70[0] = ((fRec70[1] + (fSlow8 > fVec9[1])) - (fConst65 * (fRec70[1] > 0.0)));
		int iTemp52 = (fRec70[0] > 0.0);
		int iTemp53 = (iTemp52 > 0);
		iRec68[0] = (iTemp53 & (iRec68[1] | (fRec69[1] >= 1)));
		int iTemp54 = (iTemp52 <= 0);
		int iTemp55 = (iTemp54 & (fRec69[1] > 0));
		fRec69[0] = (((fConst68 * (((iRec68[1] == 0) & iTemp53) & (fRec69[1] < 1))) + (fRec69[1] * (1 - (fConst67 * iTemp55)))) * ((iTemp55 == 0) | (fRec69[1] >= 1e-06)));
		fRec71[0] = ((fConst102 * fRec72[1]) + (fConst101 * fRec71[1]));
		fRec72[0] = ((1 + ((fConst101 * fRec72[1]) + (fConst103 * fRec71[1]))) - iVec0[1]);
		fRec73[0] = ((fConst106 * fRec74[1]) + (fConst105 * fRec73[1]));
		fRec74[0] = ((1 + ((fConst105 * fRec74[1]) + (fConst107 * fRec73[1]))) - iVec0[1]);
		fRec77[0] = ((fConst110 * fRec78[1]) + (fConst109 * fRec77[1]));
		fRec78[0] = ((1 + ((fConst109 * fRec78[1]) + (fConst111 * fRec77[1]))) - iVec0[1]);
		fRec79[0] = fmod((1.0 + fRec79[1]),fConst112);
		double fTemp56 = faustpower<2>(((fConst113 * fRec79[0]) - 1.0));
		fVec10[0] = fTemp56;
		double fTemp57 = (fConst49 * ((fConst114 * (fVec2[1] * (fVec10[0] - fVec10[1]))) + (58.84615384615384 * fRec77[0])));
		double fTemp58 = cos(fTemp57);
		double fTemp59 = sin(fTemp57);
		fRec75[0] = ((fRec76[1] * fTemp59) + (fRec75[1] * fTemp58));
		fRec76[0] = ((1 + ((fRec76[1] * fTemp58) + (fRec75[1] * (0 - fTemp59)))) - iVec0[1]);
		iRec80[0] = (iTemp53 & (iRec80[1] | (fRec81[1] >= 1)));
		int iTemp60 = (iTemp54 & (fRec81[1] > 0));
		fRec81[0] = (((fConst68 * (((iRec80[1] == 0) & iTemp53) & (fRec81[1] < 1))) + (fRec81[1] * (1 - (fConst99 * iTemp60)))) * ((iTemp60 == 0) | (fRec81[1] >= 1e-06)));
		output0[i] = (FAUSTFLOAT)((double)input0[i] + (2 * (((((0.25 * (fRec81[0] * ((5 * fRec75[0]) + (0.5 * (fRec73[0] + fRec71[0]))))) + (3 * fRec69[0])) * pow(10,(0.05 * fRec67[0]))) + (((((fConst90 * (fRec65[0] * (fRec57[2] + (fRec57[0] + (2 * fRec57[1]))))) + ((fRec55[0] * (fRec50[2] + (fRec50[0] + (2 * fRec50[1])))) / fTemp40)) * pow(10,(0.05 * fRec48[0]))) + (0.5 * (((fRec47[0] * (fRec44[0] - fRec44[2])) + ((sqrt(fRec42[0]) * (((fRec22[0] / fTemp11) + (2 * (fRec22[1] * (0 - fTemp12)))) + (fRec22[2] / fTemp11))) / fTemp10)) * pow(10,(0.05 * fRec20[0]))))) + (0.1 * (((fConst28 * (fRec19[0] * (((fConst24 * fRec16[0]) + (fConst33 * fRec16[1])) + (fConst24 * fRec16[2])))) + ((fConst18 * (fRec15[0] * (fRec11[2] + (fRec11[0] + (2 * fRec11[1]))))) + ((5.0 * ((0.25 + fRec9[0]) * fRec8[0])) + (5.0 * ((0.25 + fRec5[0]) * fRec3[0]))))) * pow(10,(0.05 * fRec1[0])))))) * pow(10,(0.05 * fRec0[0])))));
		// post processing
		fRec81[1] = fRec81[0];
		iRec80[1] = iRec80[0];
		fRec76[1] = fRec76[0];
		fRec75[1] = fRec75[0];
		fVec10[1] = fVec10[0];
		fRec79[1] = fRec79[0];
		fRec78[1] = fRec78[0];
		fRec77[1] = fRec77[0];
		fRec74[1] = fRec74[0];
		fRec73[1] = fRec73[0];
		fRec72[1] = fRec72[0];
		fRec71[1] = fRec71[0];
		fRec69[1] = fRec69[0];
		iRec68[1] = iRec68[0];
		fRec70[1] = fRec70[0];
		fVec9[1] = fVec9[0];
		fRec67[1] = fRec67[0];
		fRec65[1] = fRec65[0];
		iRec64[1] = iRec64[0];
		fRec66[1] = fRec66[0];
		fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
		fRec58[1] = fRec58[0];
		fRec60[1] = fRec60[0];
		fRec59[1] = fRec59[0];
		fRec63[1] = fRec63[0];
		fRec62[1] = fRec62[0];
		fRec61[1] = fRec61[0];
		fRec55[1] = fRec55[0];
		iRec54[1] = iRec54[0];
		fRec56[1] = fRec56[0];
		fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
		fRec51[1] = fRec51[0];
		fVec8[1] = fVec8[0];
		fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
		fRec53[1] = fRec53[0];
		fRec49[1] = fRec49[0];
		fVec7[1] = fVec7[0];
		fRec48[1] = fRec48[0];
		fRec47[1] = fRec47[0];
		iRec46[1] = iRec46[0];
		fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
		fRec45[1] = fRec45[0];
		fRec42[1] = fRec42[0];
		iRec41[1] = iRec41[0];
		fRec43[1] = fRec43[0];
		fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
		fRec23[1] = fRec23[0];
		fVec6[1] = fVec6[0];
		fRec38[1] = fRec38[0];
		fRec37[1] = fRec37[0];
		fRec40[1] = fRec40[0];
		fRec39[1] = fRec39[0];
		fRec34[1] = fRec34[0];
		fRec33[1] = fRec33[0];
		fRec36[1] = fRec36[0];
		fRec35[1] = fRec35[0];
		fRec30[1] = fRec30[0];
		fRec29[1] = fRec29[0];
		fRec32[1] = fRec32[0];
		fRec31[1] = fRec31[0];
		fRec25[1] = fRec25[0];
		fRec24[1] = fRec24[0];
		fRec28[1] = fRec28[0];
		fRec27[1] = fRec27[0];
		IOTA = IOTA+1;
		fVec4[1] = fVec4[0];
		fRec26[1] = fRec26[0];
		fRec21[1] = fRec21[0];
		fVec3[1] = fVec3[0];
		fRec20[1] = fRec20[0];
		fRec19[1] = fRec19[0];
		iRec18[1] = iRec18[0];
		fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
		fRec17[1] = fRec17[0];
		fRec15[1] = fRec15[0];
		iRec14[1] = iRec14[0];
		fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
		fRec12[1] = fRec12[0];
		iRec13[1] = iRec13[0];
		fRec10[1] = fRec10[0];
		fRec9[1] = fRec9[0];
		fRec8[1] = fRec8[0];
		iRec7[1] = iRec7[0];
		fVec2[1] = fVec2[0];
		fRec6[1] = fRec6[0];
		fRec5[1] = fRec5[0];
		fRec3[1] = fRec3[0];
		iRec2[1] = iRec2[0];
		fRec4[1] = fRec4[0];
		fVec1[1] = fVec1[0];
		fRec1[1] = fRec1[0];
		fRec0[1] = fRec0[0];
		iVec0[1] = iVec0[0];
	}
#undef fcheckbox0
#undef fcheckbox1
#undef fcheckbox2
#undef fcheckbox3
}
		
int Dsp::register_par(const ParamReg& reg)
{
	reg.registerVar("seq.gain","","S",N_("Volume level in decibels"),&fslider0, -2e+01, -6e+01, 4e+01, 0.1);
	reg.registerVar("seq.hat_closed.dsp.Gain","","S",N_("Volume level in decibels"),&fslider2, -2e+01, -6e+01, 4e+01, 0.1);
	fcheckbox1_ = reg.registerVar("seq.hat_closed.dsp.gate","","BA","",&fcheckbox1, 0.0, 0.0, 1.0, 1.0);
	fcheckbox2_ = reg.registerVar("seq.kick.dsp.gate","","BA","",&fcheckbox2, 0.0, 0.0, 1.0, 1.0);
	reg.registerVar("seq.kick.dsp.Gain","","S",N_("Volume level in decibels"),&fslider3, -2e+01, -6e+01, 4e+01, 0.1);
	reg.registerVar("seq.snare.dsp.Gain","","S",N_("Volume level in decibels"),&fslider1, -2e+01, -6e+01, 4e+01, 0.1);
	fcheckbox0_ = reg.registerVar("seq.snare.dsp.gate","","BA","",&fcheckbox0, 0.0, 0.0, 1.0, 1.0);
	reg.registerVar("seq.tom.dsp.Gain","","S",N_("Volume level in decibels"),&fslider4, -2e+01, -6e+01, 4e+01, 0.1);
	fcheckbox3_ = reg.registerVar("seq.tom.dsp.gate","","BA","",&fcheckbox3, 0.0, 0.0, 1.0, 1.0);
	return 0;
}


} // end namespace drumseq
