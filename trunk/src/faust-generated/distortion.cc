namespace distortion {
// generated from file '../src/faust/distortion.dsp'

int 	iVec0[2];
double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
double 	fConst5;
double 	fConst6;
FAUSTFLOAT 	fslider0;
double 	fRec1[2];
FAUSTFLOAT 	fslider1;
double 	fRec2[2];
FAUSTFLOAT 	fentry0;
double 	fConst7;
FAUSTFLOAT 	fentry1;
double 	fRec7[2];
FAUSTFLOAT 	fslider2;
int 	IOTA;
double 	fVec1[4096];
FAUSTFLOAT 	fslider3;
double 	fRec8[2];
FAUSTFLOAT 	fcheckbox0;
FAUSTFLOAT 	fentry2;
double 	fConst8;
double 	fVec2[2];
double 	fRec10[2];
FAUSTFLOAT 	fentry3;
double 	fConst9;
double 	fConst10;
double 	fVec3[2];
double 	fRec9[2];
FAUSTFLOAT 	fcheckbox1;
FAUSTFLOAT 	fslider4;
FAUSTFLOAT 	fslider5;
double 	fVec4[2];
double 	fRec14[2];
double 	fVec5[2];
double 	fRec13[2];
double 	fRec12[3];
double 	fRec11[3];
FAUSTFLOAT 	fcheckbox2;
double 	fVec6[3];
double 	fConst11;
double 	fConst12;
double 	fConst13;
double 	fConst14;
double 	fConst15;
double 	fRec6[3];
double 	fRec5[3];
double 	fRec4[3];
FAUSTFLOAT 	fslider6;
FAUSTFLOAT 	fslider7;
FAUSTFLOAT 	fslider8;
double 	fVec7[2];
double 	fRec3[2];
FAUSTFLOAT 	fslider9;
double 	fRec15[2];
FAUSTFLOAT 	fentry4;
double 	fRec18[3];
double 	fRec17[3];
FAUSTFLOAT 	fslider10;
double 	fVec8[2];
double 	fRec16[2];
FAUSTFLOAT 	fslider11;
double 	fRec19[2];
double 	fRec21[3];
FAUSTFLOAT 	fslider12;
double 	fVec9[2];
double 	fRec20[2];
FAUSTFLOAT 	fslider13;
double 	fRec22[2];
double 	fRec24[3];
FAUSTFLOAT 	fslider14;
double 	fVec10[2];
double 	fRec23[2];
double 	fVec11[3];
double 	fRec0[3];
double 	fVec12[2];
double 	fRec28[2];
double 	fVec13[2];
double 	fRec27[2];
double 	fRec26[3];
double 	fRec25[3];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	for (int i=0; i<2; i++) iVec0[i] = 0;
	fConst0 = (6.283185307179586 * (max(0, ((0.5 * fSamplingFreq) - 1e+02)) / fSamplingFreq));
	fConst1 = cos(fConst0);
	fConst2 = (1.316227766016838 * fConst1);
	fConst3 = (0 - (2 * (0 - (0.683772233983162 + fConst2))));
	fConst4 = (0.683772233983162 * fConst1);
	fConst5 = (0.005623413251903491 * sin(fConst0));
	fConst6 = (fConst5 - (fConst4 + 1.316227766016838));
	for (int i=0; i<2; i++) fRec1[i] = 0;
	for (int i=0; i<2; i++) fRec2[i] = 0;
	fConst7 = (6.283185307179586 / fSamplingFreq);
	for (int i=0; i<2; i++) fRec7[i] = 0;
	IOTA = 0;
	for (int i=0; i<4096; i++) fVec1[i] = 0;
	for (int i=0; i<2; i++) fRec8[i] = 0;
	fConst8 = (3.141592653589793 / fSamplingFreq);
	for (int i=0; i<2; i++) fVec2[i] = 0;
	for (int i=0; i<2; i++) fRec10[i] = 0;
	fConst9 = (3.141592653589793 * fSamplingFreq);
	fConst10 = (0.5 / fSamplingFreq);
	for (int i=0; i<2; i++) fVec3[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	for (int i=0; i<2; i++) fRec14[i] = 0;
	for (int i=0; i<2; i++) fVec5[i] = 0;
	for (int i=0; i<2; i++) fRec13[i] = 0;
	for (int i=0; i<3; i++) fRec12[i] = 0;
	for (int i=0; i<3; i++) fRec11[i] = 0;
	for (int i=0; i<3; i++) fVec6[i] = 0;
	fConst11 = (fConst5 + fConst4);
	fConst12 = (0.31622776601683794 * (1.316227766016838 - fConst11));
	fConst13 = (0.31622776601683794 * ((fConst5 + 1.316227766016838) - fConst4));
	fConst14 = (0 - (0.6324555320336759 * (fConst2 - 0.683772233983162)));
	fConst15 = (1.0 / (1.316227766016838 + fConst11));
	for (int i=0; i<3; i++) fRec6[i] = 0;
	for (int i=0; i<3; i++) fRec5[i] = 0;
	for (int i=0; i<3; i++) fRec4[i] = 0;
	for (int i=0; i<2; i++) fVec7[i] = 0;
	for (int i=0; i<2; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fRec15[i] = 0;
	for (int i=0; i<3; i++) fRec18[i] = 0;
	for (int i=0; i<3; i++) fRec17[i] = 0;
	for (int i=0; i<2; i++) fVec8[i] = 0;
	for (int i=0; i<2; i++) fRec16[i] = 0;
	for (int i=0; i<2; i++) fRec19[i] = 0;
	for (int i=0; i<3; i++) fRec21[i] = 0;
	for (int i=0; i<2; i++) fVec9[i] = 0;
	for (int i=0; i<2; i++) fRec20[i] = 0;
	for (int i=0; i<2; i++) fRec22[i] = 0;
	for (int i=0; i<3; i++) fRec24[i] = 0;
	for (int i=0; i<2; i++) fVec10[i] = 0;
	for (int i=0; i<2; i++) fRec23[i] = 0;
	for (int i=0; i<3; i++) fVec11[i] = 0;
	for (int i=0; i<3; i++) fRec0[i] = 0;
	for (int i=0; i<2; i++) fVec12[i] = 0;
	for (int i=0; i<2; i++) fRec28[i] = 0;
	for (int i=0; i<2; i++) fVec13[i] = 0;
	for (int i=0; i<2; i++) fRec27[i] = 0;
	for (int i=0; i<3; i++) fRec26[i] = 0;
	for (int i=0; i<3; i++) fRec25[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = (0.0010000000000000009 * pow(10,(0.05 * (fslider0 - 10))));
	double 	fSlow1 = (0.0010000000000000009 * pow(10,(0.05 * (fslider1 - 10))));
	double 	fSlow2 = (fConst7 * max(0, fentry0));
	double 	fSlow3 = cos(fSlow2);
	double 	fSlow4 = (1.251188643150958 * fSlow3);
	double 	fSlow5 = (0 - (0.748811356849042 + fSlow4));
	double 	fSlow6 = (0 - (2 * fSlow5));
	double 	fSlow7 = (0.748811356849042 * fSlow3);
	double 	fSlow8 = (fSlow7 + 1.251188643150958);
	double 	fSlow9 = (0.5011872336272722 * sin(fSlow2));
	double 	fSlow10 = (fSlow9 - fSlow8);
	double 	fSlow11 = (fConst7 * max(0, fentry1));
	double 	fSlow12 = cos(fSlow11);
	double 	fSlow13 = (1.251188643150958 * fSlow12);
	double 	fSlow14 = (2 * (fSlow13 - 0.748811356849042));
	double 	fSlow15 = (0.748811356849042 * fSlow12);
	double 	fSlow16 = (0.5011872336272722 * sin(fSlow11));
	double 	fSlow17 = (fSlow16 + fSlow15);
	double 	fSlow18 = (fSlow17 - 1.251188643150958);
	double 	fSlow19 = (1.0 - fslider2);
	double 	fSlow20 = fslider3;
	int 	iSlow21 = int((int((fSlow20 - 1)) & 4095));
	int 	iSlow22 = int((int(fSlow20) & 4095));
	int 	iSlow23 = int(fcheckbox0);
	double 	fSlow24 = (1.0 / tan((fConst8 * fentry2)));
	double 	fSlow25 = (fSlow24 - 1);
	double 	fSlow26 = (1.0 / (1 + fSlow24));
	double 	fSlow27 = (1.0 / tan((fConst10 * (fConst9 - (6.283185307179586 * fentry3)))));
	double 	fSlow28 = (1 + fSlow27);
	double 	fSlow29 = (1.0 / fSlow28);
	double 	fSlow30 = (0 - ((fSlow27 - 1) / fSlow28));
	int 	iSlow31 = int(fcheckbox1);
	double 	fSlow32 = tan((fConst8 * fslider4));
	double 	fSlow33 = (2 * (1 - (1.0 / faustpower<2>(fSlow32))));
	double 	fSlow34 = (1.0 / fSlow32);
	double 	fSlow35 = (1 + ((fSlow34 - 0.76536686473018) / fSlow32));
	double 	fSlow36 = (1.0 / (1 + ((0.76536686473018 + fSlow34) / fSlow32)));
	double 	fSlow37 = (1 + ((fSlow34 - 1.847759065022573) / fSlow32));
	double 	fSlow38 = (1.0 / (1 + ((1.847759065022573 + fSlow34) / fSlow32)));
	double 	fSlow39 = (fConst8 * fslider5);
	double 	fSlow40 = (1.0 / (1 + fSlow39));
	double 	fSlow41 = (1 - fSlow39);
	int 	iSlow42 = int(fcheckbox2);
	double 	fSlow43 = (0.251188643150958 * ((1.251188643150958 + fSlow15) - fSlow16));
	double 	fSlow44 = (0.251188643150958 * (1.251188643150958 + fSlow17));
	double 	fSlow45 = (0.502377286301916 * (0 - (0.748811356849042 + fSlow13)));
	double 	fSlow46 = (1.0 / ((1.251188643150958 + fSlow16) - fSlow15));
	double 	fSlow47 = (fSlow9 + fSlow7);
	double 	fSlow48 = (0.251188643150958 * (1.251188643150958 - fSlow47));
	double 	fSlow49 = ((fSlow9 + 1.251188643150958) - fSlow7);
	double 	fSlow50 = (0.251188643150958 * fSlow49);
	double 	fSlow51 = (fSlow4 - 0.748811356849042);
	double 	fSlow52 = (0 - (0.502377286301916 * fSlow51));
	double 	fSlow53 = (1.251188643150958 + fSlow47);
	double 	fSlow54 = (1.0 / fSlow53);
	double 	fSlow55 = fslider6;
	double 	fSlow56 = fslider8;
	double 	fSlow57 = pow(1e+01,(2 * (fSlow56 * fslider7)));
	double 	fSlow58 = (0.0010000000000000009 * pow(10,(0.05 * (fslider9 - 10))));
	double 	fSlow59 = (fConst7 * max(0, fentry4));
	double 	fSlow60 = cos(fSlow59);
	double 	fSlow61 = (1.251188643150958 * fSlow60);
	double 	fSlow62 = (0 - (0.748811356849042 + fSlow61));
	double 	fSlow63 = (0 - (2 * fSlow62));
	double 	fSlow64 = (0.748811356849042 * fSlow60);
	double 	fSlow65 = (1.251188643150958 + fSlow64);
	double 	fSlow66 = (0.5011872336272722 * sin(fSlow59));
	double 	fSlow67 = (fSlow66 - fSlow65);
	double 	fSlow68 = (2 * fSlow51);
	double 	fSlow69 = (fSlow47 - 1.251188643150958);
	double 	fSlow70 = (0.251188643150958 * (fSlow8 - fSlow9));
	double 	fSlow71 = (0.251188643150958 * fSlow53);
	double 	fSlow72 = (0.502377286301916 * fSlow5);
	double 	fSlow73 = (1.0 / fSlow49);
	double 	fSlow74 = (fSlow66 + fSlow64);
	double 	fSlow75 = (0.251188643150958 * (1.251188643150958 - fSlow74));
	double 	fSlow76 = ((1.251188643150958 + fSlow66) - fSlow64);
	double 	fSlow77 = (0.251188643150958 * fSlow76);
	double 	fSlow78 = (fSlow61 - 0.748811356849042);
	double 	fSlow79 = (0 - (0.502377286301916 * fSlow78));
	double 	fSlow80 = (1.251188643150958 + fSlow74);
	double 	fSlow81 = (1.0 / fSlow80);
	double 	fSlow82 = pow(1e+01,(2 * (fSlow56 * fslider10)));
	double 	fSlow83 = (0.0010000000000000009 * pow(10,(0.05 * (fslider11 - 10))));
	double 	fSlow84 = (2 * fSlow78);
	double 	fSlow85 = (fSlow74 - 1.251188643150958);
	double 	fSlow86 = (0.251188643150958 * (fSlow65 - fSlow66));
	double 	fSlow87 = (0.251188643150958 * fSlow80);
	double 	fSlow88 = (0.502377286301916 * fSlow62);
	double 	fSlow89 = (1.0 / fSlow76);
	double 	fSlow90 = pow(1e+01,(2 * (fSlow56 * fslider12)));
	double 	fSlow91 = (0.0010000000000000009 * pow(10,(0.05 * (fslider13 - 10))));
	double 	fSlow92 = pow(1e+01,(2 * (fSlow56 * fslider14)));
	for (int i=0; i<count; i++) {
		iVec0[0] = 1;
		fRec1[0] = (fSlow0 + (0.999 * fRec1[1]));
		fRec2[0] = (fSlow1 + (0.999 * fRec2[1]));
		fRec7[0] = ((1e-20 * (1 - iVec0[1])) - fRec7[1]);
		double fTemp0 = (double)input0[i];
		double fTemp1 = (fTemp0 + (fSlow19 * fRec8[1]));
		fVec1[IOTA&4095] = fTemp1;
		fRec8[0] = (0.5 * (fVec1[(IOTA-iSlow22)&4095] + fVec1[(IOTA-iSlow21)&4095]));
		double fTemp2 = ((iSlow23)?fRec8[0]:fTemp0);
		double fTemp3 = (fTemp2 + (2 * fRec7[0]));
		fVec2[0] = (fSlow26 * fTemp3);
		fRec10[0] = (fVec2[1] + (fSlow26 * (fTemp3 + (fSlow25 * fRec10[1]))));
		double fTemp4 = (fSlow29 * fRec10[0]);
		fVec3[0] = fTemp4;
		fRec9[0] = ((fVec3[0] + (fSlow30 * fRec9[1])) - fVec3[1]);
		double fTemp5 = ((iSlow31)?fRec9[0]:(fTemp2 + fRec7[0]));
		double fTemp6 = (fRec7[0] + fTemp5);
		fVec4[0] = (fSlow40 * fTemp6);
		fRec14[0] = ((fSlow40 * (fTemp6 + (fSlow41 * fRec14[1]))) - fVec4[1]);
		fVec5[0] = (fSlow40 * fRec14[0]);
		fRec13[0] = ((fSlow40 * (fRec14[0] + (fSlow41 * fRec13[1]))) - fVec5[1]);
		fRec12[0] = (fRec13[0] - (fSlow38 * ((fSlow37 * fRec12[2]) + (fSlow33 * fRec12[1]))));
		fRec11[0] = ((fSlow38 * (fRec12[2] + (fRec12[0] + (2 * fRec12[1])))) - (fSlow36 * ((fSlow35 * fRec11[2]) + (fSlow33 * fRec11[1]))));
		double fTemp7 = ((iSlow42)?(fSlow36 * (fRec11[2] + (fRec11[0] + (2 * fRec11[1])))):fTemp5);
		fVec6[0] = fTemp7;
		fRec6[0] = (fConst15 * ((((fConst14 * fVec6[1]) + (fConst13 * fVec6[0])) + (fConst12 * fVec6[2])) + ((fConst6 * fRec6[2]) + (fConst3 * fRec6[1]))));
		fRec5[0] = (fSlow46 * ((((fSlow45 * fRec6[1]) + (fSlow44 * fRec6[0])) + (fSlow43 * fRec6[2])) + ((fSlow18 * fRec5[2]) + (fSlow14 * fRec5[1]))));
		fRec4[0] = (fSlow54 * ((((fSlow52 * fRec5[1]) + (fSlow50 * fRec5[0])) + (fSlow48 * fRec5[2])) + ((fSlow10 * fRec4[2]) + (fSlow6 * fRec4[1]))));
		double fTemp8 = max(-1, min(1, (fSlow57 * (fSlow55 + fRec4[0]))));
		double fTemp9 = (fTemp8 * (1 - (0.3333333333333333 * faustpower<2>(fTemp8))));
		fVec7[0] = fTemp9;
		fRec3[0] = ((fVec7[0] + (0.995 * fRec3[1])) - fVec7[1]);
		fRec15[0] = (fSlow58 + (0.999 * fRec15[1]));
		fRec18[0] = (fSlow73 * ((((fSlow72 * fRec6[1]) + (fSlow71 * fRec6[0])) + (fSlow70 * fRec6[2])) + ((fSlow69 * fRec18[2]) + (fSlow68 * fRec18[1]))));
		fRec17[0] = (fSlow81 * ((((fSlow79 * fRec18[1]) + (fSlow77 * fRec18[0])) + (fSlow75 * fRec18[2])) + ((fSlow67 * fRec17[2]) + (fSlow63 * fRec17[1]))));
		double fTemp10 = max(-1, min(1, (fSlow82 * (fSlow55 + fRec17[0]))));
		double fTemp11 = (fTemp10 * (1 - (0.3333333333333333 * faustpower<2>(fTemp10))));
		fVec8[0] = fTemp11;
		fRec16[0] = ((fVec8[0] + (0.995 * fRec16[1])) - fVec8[1]);
		fRec19[0] = (fSlow83 + (0.999 * fRec19[1]));
		fRec21[0] = (fSlow89 * ((((fSlow88 * fRec6[1]) + (fSlow87 * fRec6[0])) + (fSlow86 * fRec6[2])) + ((fSlow85 * fRec21[2]) + (fSlow84 * fRec21[1]))));
		double fTemp12 = max(-1, min(1, (fSlow90 * (fSlow55 + fRec21[0]))));
		double fTemp13 = (fTemp12 * (1 - (0.3333333333333333 * faustpower<2>(fTemp12))));
		fVec9[0] = fTemp13;
		fRec20[0] = ((fVec9[0] + (0.995 * fRec20[1])) - fVec9[1]);
		fRec22[0] = (fSlow91 + (0.999 * fRec22[1]));
		fRec24[0] = (fSlow54 * ((((fSlow52 * fRec6[1]) + (fSlow50 * fRec6[0])) + (fSlow48 * fRec6[2])) + ((fSlow10 * fRec24[2]) + (fSlow6 * fRec24[1]))));
		double fTemp14 = max(-1, min(1, (fSlow92 * (fSlow55 + fRec24[0]))));
		double fTemp15 = (fTemp14 * (1 - (0.3333333333333333 * faustpower<2>(fTemp14))));
		fVec10[0] = fTemp15;
		fRec23[0] = ((fVec10[0] + (0.995 * fRec23[1])) - fVec10[1]);
		double fTemp16 = (((((fRec23[0] * fRec22[0]) + (fRec20[0] * fRec19[0])) + (fRec16[0] * fRec15[0])) + (fRec3[0] * fRec2[0])) * fRec1[0]);
		fVec11[0] = fTemp16;
		fRec0[0] = (fConst15 * ((((fConst14 * fVec11[1]) + (fConst13 * fVec11[0])) + (fConst12 * fVec11[2])) + ((fConst6 * fRec0[2]) + (fConst3 * fRec0[1]))));
		double fTemp17 = (fRec7[0] + fRec0[0]);
		fVec12[0] = (fSlow40 * fTemp17);
		fRec28[0] = ((fSlow40 * (fTemp17 + (fSlow41 * fRec28[1]))) - fVec12[1]);
		fVec13[0] = (fSlow40 * fRec28[0]);
		fRec27[0] = ((fSlow40 * (fRec28[0] + (fSlow41 * fRec27[1]))) - fVec13[1]);
		fRec26[0] = (fRec27[0] - (fSlow38 * ((fSlow37 * fRec26[2]) + (fSlow33 * fRec26[1]))));
		fRec25[0] = ((fSlow38 * (fRec26[2] + (fRec26[0] + (2 * fRec26[1])))) - (fSlow36 * ((fSlow35 * fRec25[2]) + (fSlow33 * fRec25[1]))));
		output0[i] = (FAUSTFLOAT)((iSlow42)?(fSlow36 * (fRec25[2] + (fRec25[0] + (2 * fRec25[1])))):fRec0[0]);
		// post processing
		fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
		fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
		fRec27[1] = fRec27[0];
		fVec13[1] = fVec13[0];
		fRec28[1] = fRec28[0];
		fVec12[1] = fVec12[0];
		fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
		fVec11[2] = fVec11[1]; fVec11[1] = fVec11[0];
		fRec23[1] = fRec23[0];
		fVec10[1] = fVec10[0];
		fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
		fRec22[1] = fRec22[0];
		fRec20[1] = fRec20[0];
		fVec9[1] = fVec9[0];
		fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
		fRec19[1] = fRec19[0];
		fRec16[1] = fRec16[0];
		fVec8[1] = fVec8[0];
		fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
		fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
		fRec15[1] = fRec15[0];
		fRec3[1] = fRec3[0];
		fVec7[1] = fVec7[0];
		fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
		fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
		fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
		fVec6[2] = fVec6[1]; fVec6[1] = fVec6[0];
		fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
		fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
		fRec13[1] = fRec13[0];
		fVec5[1] = fVec5[0];
		fRec14[1] = fRec14[0];
		fVec4[1] = fVec4[0];
		fRec9[1] = fRec9[0];
		fVec3[1] = fVec3[0];
		fRec10[1] = fRec10[0];
		fVec2[1] = fVec2[0];
		fRec8[1] = fRec8[0];
		IOTA = IOTA+1;
		fRec7[1] = fRec7[0];
		fRec2[1] = fRec2[0];
		fRec1[1] = fRec1[0];
		iVec0[1] = iVec0[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerVar("distortion.low_highpass.on_off","low highpass","B","",&fcheckbox1, 0.0, 0.0, 1.0, 1.0);
	registerVar("distortion.resonator.on_off","resonat","B","",&fcheckbox0, 0.0, 0.0, 1.0, 1.0);
	registerVar("distortion.low_highcutoff.on_off","low highcutoff","B","",&fcheckbox2, 0.0, 0.0, 1.0, 1.0);
	registerVar("distortion.split_high_freq","","S","",&fentry4, 1.25e+03, 1.25e+03, 1.2e+04, 1e+01);
	registerVar("distortion.split_low_freq","","S","",&fentry1, 2.5e+02, 2e+01, 6e+02, 1e+01);
	registerVar("distortion.split_middle_freq","","S","",&fentry0, 6.5e+02, 6e+02, 1.25e+03, 1e+01);
	registerVar("distortion.low_highpass.high_freq","high freq","S","",&fentry3, 1.3e+02, 2e+01, 7.04e+03, 1e+01);
	registerVar("distortion.low_highpass.low_freq","low freq","S","",&fentry2, 5e+03, 2e+01, 1.2e+04, 1e+01);
	registerVar("distortion.low_gain","","S","",&fslider13, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.high_drive","","S","",&fslider12, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.high_gain","","S","",&fslider11, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.middle_h_drive","","S","",&fslider10, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.low_drive","","S","",&fslider14, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.middle_l_drive","","S","",&fslider7, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.level","","S","",&fslider6, 0.01, 0.0, 0.5, 0.01);
	registerVar("distortion.low_highcutoff.low_freq","low freq","S","low-freq cutoff Hz",&fslider5, 1.3e+02, 2e+01, 1e+03, 1e+01);
	registerVar("distortion.low_highcutoff.high_freq","high freq","S","high-freq cutoff Hz",&fslider4, 5e+03, 1e+03, 1.2e+04, 1e+01);
	registerVar("distortion.vibrato","","S","",&fslider3, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.trigger","","S","",&fslider2, 0.12, 0.0, 1.0, 0.01);
	registerVar("distortion.middle_l_gain","","S","",&fslider1, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.gain","","S","",&fslider0, 2.0, -1e+01, 1e+01, 0.1);
	registerVar("distortion.middle_h_gain","","S","",&fslider9, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.drive","","S","",&fslider8, 0.64, 0.0, 1.0, 0.01);
	registerInit("distortion", init);
}

} // end namespace distortion
