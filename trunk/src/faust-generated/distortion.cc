namespace distortion {
// generated from file '../src/faust/distortion.dsp'

int 	iVec0[2];
double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
double 	fConst5;
double 	fConst6;
FAUSTFLOAT 	fentry0;
double 	fConst7;
FAUSTFLOAT 	fentry1;
FAUSTFLOAT 	fentry2;
double 	fRec8[2];
FAUSTFLOAT 	fslider0;
int 	IOTA;
double 	fVec1[4096];
FAUSTFLOAT 	fslider1;
double 	fRec9[2];
FAUSTFLOAT 	fcheckbox0;
FAUSTFLOAT 	fentry3;
FAUSTFLOAT 	fentry4;
double 	fVec2[2];
double 	fRec11[2];
double 	fRec10[2];
FAUSTFLOAT 	fcheckbox1;
FAUSTFLOAT 	fslider2;
FAUSTFLOAT 	fslider3;
double 	fVec3[2];
double 	fRec15[2];
double 	fVec4[2];
double 	fRec14[2];
double 	fRec13[3];
double 	fRec12[3];
FAUSTFLOAT 	fcheckbox2;
double 	fVec5[3];
double 	fConst8;
double 	fConst9;
double 	fConst10;
double 	fConst11;
double 	fConst12;
double 	fRec7[3];
double 	fRec6[2];
double 	fRec5[3];
double 	fVec6[2];
double 	fRec4[2];
double 	fRec3[3];
double 	fVec7[2];
double 	fRec2[2];
double 	fRec1[3];
FAUSTFLOAT 	fslider4;
FAUSTFLOAT 	fslider5;
FAUSTFLOAT 	fslider6;
FAUSTFLOAT 	fslider7;
double 	fRec16[2];
double 	fRec18[2];
double 	fRec17[3];
FAUSTFLOAT 	fslider8;
FAUSTFLOAT 	fslider9;
double 	fRec19[2];
double 	fRec21[2];
double 	fRec20[3];
FAUSTFLOAT 	fslider10;
FAUSTFLOAT 	fslider11;
double 	fRec22[2];
double 	fRec24[2];
double 	fRec23[3];
FAUSTFLOAT 	fslider12;
FAUSTFLOAT 	fslider13;
double 	fRec25[2];
FAUSTFLOAT 	fslider14;
double 	fRec26[2];
double 	fVec8[3];
double 	fRec0[3];
double 	fVec9[2];
double 	fRec30[2];
double 	fVec10[2];
double 	fRec29[2];
double 	fRec28[3];
double 	fRec27[3];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	for (int i=0; i<2; i++) iVec0[i] = 0;
	fConst0 = (6.283185307179586 * (max(0, ((0.5 * fSamplingFreq) - 1e+02)) / fSamplingFreq));
	fConst1 = cos(fConst0);
	fConst2 = (1.316227766016838 * fConst1);
	fConst3 = (0 - (2 * (0 - (0.683772233983162 + fConst2))));
	fConst4 = (0.683772233983162 * fConst1);
	fConst5 = (0.005623413251903491 * sin(fConst0));
	fConst6 = (fConst5 - (fConst4 + 1.316227766016838));
	fConst7 = (3.141592653589793 / fSamplingFreq);
	for (int i=0; i<2; i++) fRec8[i] = 0;
	IOTA = 0;
	for (int i=0; i<4096; i++) fVec1[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	for (int i=0; i<2; i++) fVec2[i] = 0;
	for (int i=0; i<2; i++) fRec11[i] = 0;
	for (int i=0; i<2; i++) fRec10[i] = 0;
	for (int i=0; i<2; i++) fVec3[i] = 0;
	for (int i=0; i<2; i++) fRec15[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	for (int i=0; i<2; i++) fRec14[i] = 0;
	for (int i=0; i<3; i++) fRec13[i] = 0;
	for (int i=0; i<3; i++) fRec12[i] = 0;
	for (int i=0; i<3; i++) fVec5[i] = 0;
	fConst8 = (fConst5 + fConst4);
	fConst9 = (0.31622776601683794 * (1.316227766016838 - fConst8));
	fConst10 = (0.31622776601683794 * ((fConst5 + 1.316227766016838) - fConst4));
	fConst11 = (0 - (0.6324555320336759 * (fConst2 - 0.683772233983162)));
	fConst12 = (1.0 / (1.316227766016838 + fConst8));
	for (int i=0; i<3; i++) fRec7[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<3; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fVec6[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<3; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fVec7[i] = 0;
	for (int i=0; i<2; i++) fRec2[i] = 0;
	for (int i=0; i<3; i++) fRec1[i] = 0;
	for (int i=0; i<2; i++) fRec16[i] = 0;
	for (int i=0; i<2; i++) fRec18[i] = 0;
	for (int i=0; i<3; i++) fRec17[i] = 0;
	for (int i=0; i<2; i++) fRec19[i] = 0;
	for (int i=0; i<2; i++) fRec21[i] = 0;
	for (int i=0; i<3; i++) fRec20[i] = 0;
	for (int i=0; i<2; i++) fRec22[i] = 0;
	for (int i=0; i<2; i++) fRec24[i] = 0;
	for (int i=0; i<3; i++) fRec23[i] = 0;
	for (int i=0; i<2; i++) fRec25[i] = 0;
	for (int i=0; i<2; i++) fRec26[i] = 0;
	for (int i=0; i<3; i++) fVec8[i] = 0;
	for (int i=0; i<3; i++) fRec0[i] = 0;
	for (int i=0; i<2; i++) fVec9[i] = 0;
	for (int i=0; i<2; i++) fRec30[i] = 0;
	for (int i=0; i<2; i++) fVec10[i] = 0;
	for (int i=0; i<2; i++) fRec29[i] = 0;
	for (int i=0; i<3; i++) fRec28[i] = 0;
	for (int i=0; i<3; i++) fRec27[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = tan((fConst7 * fentry0));
	double 	fSlow1 = (1.0 / faustpower<2>(fSlow0));
	double 	fSlow2 = (2 * (1 - fSlow1));
	double 	fSlow3 = (1.0 / fSlow0);
	double 	fSlow4 = (1 + ((fSlow3 - 1.0000000000000004) / fSlow0));
	double 	fSlow5 = (1 + ((1.0000000000000004 + fSlow3) / fSlow0));
	double 	fSlow6 = (1.0 / fSlow5);
	double 	fSlow7 = (1 + fSlow3);
	double 	fSlow8 = (0 - ((1 - fSlow3) / fSlow7));
	double 	fSlow9 = tan((fConst7 * fentry1));
	double 	fSlow10 = (1.0 / faustpower<2>(fSlow9));
	double 	fSlow11 = (2 * (1 - fSlow10));
	double 	fSlow12 = (1.0 / fSlow9);
	double 	fSlow13 = (1 + ((fSlow12 - 1.0000000000000004) / fSlow9));
	double 	fSlow14 = (1 + ((1.0000000000000004 + fSlow12) / fSlow9));
	double 	fSlow15 = (1.0 / fSlow14);
	double 	fSlow16 = (1 + fSlow12);
	double 	fSlow17 = (0 - ((1 - fSlow12) / fSlow16));
	double 	fSlow18 = tan((fConst7 * fentry2));
	double 	fSlow19 = (1.0 / faustpower<2>(fSlow18));
	double 	fSlow20 = (2 * (1 - fSlow19));
	double 	fSlow21 = (1.0 / fSlow18);
	double 	fSlow22 = (1 + ((fSlow21 - 1.0000000000000004) / fSlow18));
	double 	fSlow23 = (1 + ((1.0000000000000004 + fSlow21) / fSlow18));
	double 	fSlow24 = (1.0 / fSlow23);
	double 	fSlow25 = (1 + fSlow21);
	double 	fSlow26 = (0 - ((1 - fSlow21) / fSlow25));
	double 	fSlow27 = (1.0 - fslider0);
	double 	fSlow28 = fslider1;
	int 	iSlow29 = int((int((fSlow28 - 1)) & 4095));
	int 	iSlow30 = int((int(fSlow28) & 4095));
	int 	iSlow31 = int(fcheckbox0);
	double 	fSlow32 = (1.0 / tan((fConst7 * fentry3)));
	double 	fSlow33 = (1 + fSlow32);
	double 	fSlow34 = (0 - ((1 - fSlow32) / fSlow33));
	double 	fSlow35 = (1.0 / tan((fConst7 * fentry4)));
	double 	fSlow36 = (1 + fSlow35);
	double 	fSlow37 = (0 - ((1 - fSlow35) / fSlow36));
	double 	fSlow38 = (1.0 / fSlow36);
	double 	fSlow39 = (0 - fSlow32);
	double 	fSlow40 = (1.0 / fSlow33);
	int 	iSlow41 = int(fcheckbox1);
	double 	fSlow42 = tan((fConst7 * fslider2));
	double 	fSlow43 = (2 * (1 - (1.0 / faustpower<2>(fSlow42))));
	double 	fSlow44 = (1.0 / fSlow42);
	double 	fSlow45 = (1 + ((fSlow44 - 0.7653668647301795) / fSlow42));
	double 	fSlow46 = (1.0 / (1 + ((0.7653668647301795 + fSlow44) / fSlow42)));
	double 	fSlow47 = (1 + ((fSlow44 - 1.8477590650225735) / fSlow42));
	double 	fSlow48 = (1.0 / (1 + ((1.8477590650225735 + fSlow44) / fSlow42)));
	double 	fSlow49 = (fConst7 * fslider3);
	double 	fSlow50 = (1.0 / (1 + fSlow49));
	double 	fSlow51 = (1 - fSlow49);
	int 	iSlow52 = int(fcheckbox2);
	double 	fSlow53 = (1.0 / fSlow25);
	double 	fSlow54 = (1.0 / fSlow16);
	double 	fSlow55 = (1.0 / (fSlow0 * fSlow14));
	double 	fSlow56 = (0 - fSlow3);
	double 	fSlow57 = (1.0 / fSlow7);
	double 	fSlow58 = (2 * (0 - fSlow1));
	double 	fSlow59 = fslider5;
	double 	fSlow60 = (pow(1e+01,(2 * (fSlow59 * fslider4))) / fSlow5);
	double 	fSlow61 = fslider6;
	double 	fSlow62 = (0.0010000000000000009 * pow(10,(0.05 * (fslider7 - 10))));
	double 	fSlow63 = (pow(1e+01,(2 * (fSlow59 * fslider8))) / fSlow5);
	double 	fSlow64 = (0.0010000000000000009 * pow(10,(0.05 * (fslider9 - 10))));
	double 	fSlow65 = (1.0 / (fSlow9 * fSlow23));
	double 	fSlow66 = (0 - fSlow12);
	double 	fSlow67 = (2 * (0 - fSlow10));
	double 	fSlow68 = (pow(1e+01,(2 * (fSlow59 * fslider10))) / fSlow14);
	double 	fSlow69 = (0.0010000000000000009 * pow(10,(0.05 * (fslider11 - 10))));
	double 	fSlow70 = (0 - fSlow21);
	double 	fSlow71 = (2 * (0 - fSlow19));
	double 	fSlow72 = (pow(1e+01,(2 * (fSlow59 * fslider12))) / fSlow23);
	double 	fSlow73 = (0.0010000000000000009 * pow(10,(0.05 * (fslider13 - 10))));
	double 	fSlow74 = (0.0010000000000000009 * pow(10,(0.05 * (fslider14 - 10))));
	for (int i=0; i<count; i++) {
		iVec0[0] = 1;
		fRec8[0] = ((1e-20 * (1 - iVec0[1])) - fRec8[1]);
		double fTemp0 = (double)input0[i];
		double fTemp1 = (fTemp0 + (fSlow27 * fRec9[1]));
		fVec1[IOTA&4095] = fTemp1;
		fRec9[0] = (0.5 * (fVec1[(IOTA-iSlow30)&4095] + fVec1[(IOTA-iSlow29)&4095]));
		double fTemp2 = ((iSlow31)?fRec9[0]:fTemp0);
		double fTemp3 = (fTemp2 + (2 * fRec8[0]));
		fVec2[0] = fTemp3;
		fRec11[0] = ((fSlow38 * (fVec2[0] + fVec2[1])) + (fSlow37 * fRec11[1]));
		fRec10[0] = ((fSlow40 * ((fSlow39 * fRec11[1]) + (fSlow32 * fRec11[0]))) + (fSlow34 * fRec10[1]));
		double fTemp4 = ((iSlow41)?fRec10[0]:(fTemp2 + fRec8[0]));
		double fTemp5 = (fRec8[0] + fTemp4);
		fVec3[0] = (fSlow50 * fTemp5);
		fRec15[0] = ((fSlow50 * (fTemp5 + (fSlow51 * fRec15[1]))) - fVec3[1]);
		fVec4[0] = (fSlow50 * fRec15[0]);
		fRec14[0] = ((fSlow50 * (fRec15[0] + (fSlow51 * fRec14[1]))) - fVec4[1]);
		fRec13[0] = (fRec14[0] - (fSlow48 * ((fSlow47 * fRec13[2]) + (fSlow43 * fRec13[1]))));
		fRec12[0] = ((fSlow48 * (fRec13[2] + (fRec13[0] + (2 * fRec13[1])))) - (fSlow46 * ((fSlow45 * fRec12[2]) + (fSlow43 * fRec12[1]))));
		double fTemp6 = ((iSlow52)?(fSlow46 * (fRec12[2] + (fRec12[0] + (2 * fRec12[1])))):fTemp4);
		fVec5[0] = fTemp6;
		fRec7[0] = (fConst12 * ((((fConst11 * fVec5[1]) + (fConst10 * fVec5[0])) + (fConst9 * fVec5[2])) + ((fConst6 * fRec7[2]) + (fConst3 * fRec7[1]))));
		fRec6[0] = ((fSlow53 * (fRec7[0] + fRec7[1])) + (fSlow26 * fRec6[1]));
		fRec5[0] = (fRec6[0] - (fSlow24 * ((fSlow22 * fRec5[2]) + (fSlow20 * fRec5[1]))));
		double fTemp7 = (fRec5[2] + (fRec5[0] + (2 * fRec5[1])));
		double fTemp8 = (fSlow24 * fTemp7);
		fVec6[0] = fTemp8;
		fRec4[0] = ((fSlow54 * (fVec6[0] + fVec6[1])) + (fSlow17 * fRec4[1]));
		fRec3[0] = (fRec4[0] - (fSlow15 * ((fSlow13 * fRec3[2]) + (fSlow11 * fRec3[1]))));
		double fTemp9 = (fRec3[2] + (fRec3[0] + (2 * fRec3[1])));
		double fTemp10 = (fSlow15 * fTemp9);
		fVec7[0] = fTemp10;
		fRec2[0] = ((fSlow57 * ((fSlow56 * fVec7[1]) + (fSlow55 * fTemp9))) + (fSlow8 * fRec2[1]));
		fRec1[0] = (fRec2[0] - (fSlow6 * ((fSlow4 * fRec1[2]) + (fSlow2 * fRec1[1]))));
		double fTemp11 = max(-1, min(1, (fSlow61 + (fSlow60 * (((fSlow1 * fRec1[0]) + (fSlow58 * fRec1[1])) + (fSlow1 * fRec1[2]))))));
		fRec16[0] = (fSlow62 + (0.999 * fRec16[1]));
		fRec18[0] = ((fSlow57 * (fVec7[0] + fVec7[1])) + (fSlow8 * fRec18[1]));
		fRec17[0] = (fRec18[0] - (fSlow6 * ((fSlow4 * fRec17[2]) + (fSlow2 * fRec17[1]))));
		double fTemp12 = max(-1, min(1, (fSlow61 + (fSlow63 * (fRec17[2] + (fRec17[0] + (2 * fRec17[1])))))));
		fRec19[0] = (fSlow64 + (0.999 * fRec19[1]));
		fRec21[0] = ((fSlow54 * ((fSlow66 * fVec6[1]) + (fSlow65 * fTemp7))) + (fSlow17 * fRec21[1]));
		fRec20[0] = (fRec21[0] - (fSlow15 * ((fSlow13 * fRec20[2]) + (fSlow11 * fRec20[1]))));
		double fTemp13 = max(-1, min(1, (fSlow61 + (fSlow68 * (((fSlow10 * fRec20[0]) + (fSlow67 * fRec20[1])) + (fSlow10 * fRec20[2]))))));
		fRec22[0] = (fSlow69 + (0.999 * fRec22[1]));
		fRec24[0] = ((fSlow53 * ((fSlow70 * fRec7[1]) + (fSlow21 * fRec7[0]))) + (fSlow26 * fRec24[1]));
		fRec23[0] = (fRec24[0] - (fSlow24 * ((fSlow22 * fRec23[2]) + (fSlow20 * fRec23[1]))));
		double fTemp14 = max(-1, min(1, (fSlow61 + (fSlow72 * (((fSlow19 * fRec23[0]) + (fSlow71 * fRec23[1])) + (fSlow19 * fRec23[2]))))));
		fRec25[0] = (fSlow73 + (0.999 * fRec25[1]));
		fRec26[0] = (fSlow74 + (0.999 * fRec26[1]));
		double fTemp15 = (fRec26[0] * (((fRec25[0] * fTemp14) * (1 - (0.3333333333333333 * faustpower<2>(fTemp14)))) + (((fRec22[0] * fTemp13) * (1 - (0.3333333333333333 * faustpower<2>(fTemp13)))) + (((fRec19[0] * fTemp12) * (1 - (0.3333333333333333 * faustpower<2>(fTemp12)))) + ((fRec16[0] * fTemp11) * (1 - (0.3333333333333333 * faustpower<2>(fTemp11))))))));
		fVec8[0] = fTemp15;
		fRec0[0] = (fConst12 * ((((fConst11 * fVec8[1]) + (fConst10 * fVec8[0])) + (fConst9 * fVec8[2])) + ((fConst6 * fRec0[2]) + (fConst3 * fRec0[1]))));
		double fTemp16 = (fRec8[0] + fRec0[0]);
		fVec9[0] = (fSlow50 * fTemp16);
		fRec30[0] = ((fSlow50 * (fTemp16 + (fSlow51 * fRec30[1]))) - fVec9[1]);
		fVec10[0] = (fSlow50 * fRec30[0]);
		fRec29[0] = ((fSlow50 * (fRec30[0] + (fSlow51 * fRec29[1]))) - fVec10[1]);
		fRec28[0] = (fRec29[0] - (fSlow48 * ((fSlow47 * fRec28[2]) + (fSlow43 * fRec28[1]))));
		fRec27[0] = ((fSlow48 * (fRec28[2] + (fRec28[0] + (2 * fRec28[1])))) - (fSlow46 * ((fSlow45 * fRec27[2]) + (fSlow43 * fRec27[1]))));
		output0[i] = (FAUSTFLOAT)((iSlow52)?(fSlow46 * (fRec27[2] + (fRec27[0] + (2 * fRec27[1])))):fRec0[0]);
		// post processing
		fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
		fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
		fRec29[1] = fRec29[0];
		fVec10[1] = fVec10[0];
		fRec30[1] = fRec30[0];
		fVec9[1] = fVec9[0];
		fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
		fVec8[2] = fVec8[1]; fVec8[1] = fVec8[0];
		fRec26[1] = fRec26[0];
		fRec25[1] = fRec25[0];
		fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
		fRec24[1] = fRec24[0];
		fRec22[1] = fRec22[0];
		fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
		fRec21[1] = fRec21[0];
		fRec19[1] = fRec19[0];
		fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
		fRec18[1] = fRec18[0];
		fRec16[1] = fRec16[0];
		fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
		fRec2[1] = fRec2[0];
		fVec7[1] = fVec7[0];
		fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
		fRec4[1] = fRec4[0];
		fVec6[1] = fVec6[0];
		fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
		fRec6[1] = fRec6[0];
		fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
		fVec5[2] = fVec5[1]; fVec5[1] = fVec5[0];
		fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
		fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
		fRec14[1] = fRec14[0];
		fVec4[1] = fVec4[0];
		fRec15[1] = fRec15[0];
		fVec3[1] = fVec3[0];
		fRec10[1] = fRec10[0];
		fRec11[1] = fRec11[0];
		fVec2[1] = fVec2[0];
		fRec9[1] = fRec9[0];
		IOTA = IOTA+1;
		fRec8[1] = fRec8[0];
		iVec0[1] = iVec0[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerVar("distortion.low_highpass.on_off","low highpass","B","",&fcheckbox1, 0.0, 0.0, 1.0, 1.0);
	registerVar("distortion.resonator.on_off","resonat","B","",&fcheckbox0, 0.0, 0.0, 1.0, 1.0);
	registerVar("distortion.low_highcutoff.on_off","low highcutoff","B","",&fcheckbox2, 0.0, 0.0, 1.0, 1.0);
	registerVar("distortion.low_highpass.low_freq","low freq","S","",&fentry4, 5e+03, 2e+01, 1.2e+04, 1e+01);
	registerVar("distortion.split_middle_freq","","S","",&fentry1, 6.5e+02, 6e+02, 1.25e+03, 1e+01);
	registerVar("distortion.split_low_freq","","S","",&fentry0, 2.5e+02, 2e+01, 6e+02, 1e+01);
	registerVar("distortion.low_highpass.high_freq","high freq","S","",&fentry3, 1.3e+02, 2e+01, 7.04e+03, 1e+01);
	registerVar("distortion.split_high_freq","","S","",&fentry2, 1.25e+03, 1.25e+03, 1.2e+04, 1e+01);
	registerVar("distortion.high_gain","","S","",&fslider13, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.high_drive","","S","",&fslider12, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.middle_h_gain","","S","",&fslider11, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.middle_h_drive","","S","",&fslider10, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.gain","","S","",&fslider14, 2.0, -1e+01, 1e+01, 0.1);
	registerVar("distortion.middle_l_gain","","S","",&fslider7, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.level","","S","",&fslider6, 0.01, 0.0, 0.5, 0.01);
	registerVar("distortion.drive","","S","",&fslider5, 0.64, 0.0, 1.0, 0.01);
	registerVar("distortion.middle_l_drive","","S","",&fslider4, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.low_highcutoff.low_freq","low freq","S","low-freq cutoff Hz",&fslider3, 1.3e+02, 2e+01, 1e+03, 1e+01);
	registerVar("distortion.low_highcutoff.high_freq","high freq","S","high-freq cutoff Hz",&fslider2, 5e+03, 1e+03, 1.2e+04, 1e+01);
	registerVar("distortion.vibrato","","S","",&fslider1, 1.0, 0.0, 1.0, 0.01);
	registerVar("distortion.trigger","","S","",&fslider0, 0.12, 0.0, 1.0, 0.01);
	registerVar("distortion.low_gain","","S","",&fslider9, 1e+01, -1e+01, 2e+01, 0.1);
	registerVar("distortion.low_drive","","S","",&fslider8, 1.0, 0.0, 1.0, 0.01);
	registerInit("distortion", init);
}

} // end namespace distortion
