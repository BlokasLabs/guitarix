namespace gxamp11 {
// generated from file '../src/faust/gxamp11.dsp'

FAUSTFLOAT&	fslider0 = get_alias("amp2.stage2.gain1");
double 	fRec0[2];
double 	fConst0;
double 	fConst1;
double 	fConst2;
double 	fConst3;
double 	fConst4;
double 	fConst5;
FAUSTFLOAT&	fslider1 = get_alias("amp2.stage1.Pregain");
double 	fRec8[2];
double 	fConst6;
double 	fConst7;
double 	fConst8;
double 	fConst9;
double 	fConst10;
double 	fConst11;
double 	fConst12;
double 	fConst13;
double 	fConst14;
double 	fConst15;
double 	fConst16;
double 	fConst17;
double 	fConst18;
double 	fConst19;
double 	fConst20;
double 	fConst21;
double 	fConst22;
double 	fConst23;
double 	fConst24;
double 	fConst25;
double 	fConst26;
double 	fConst27;
double 	fConst28;
double 	fConst29;
double 	fConst30;
double 	fConst31;
double 	fConst32;
double 	fRec21[2];
int 	IOTA;
double 	fVec0[65536];
int 	iConst33;
double 	fRec20[2];
double 	fConst34;
double 	fRec19[2];
FAUSTFLOAT&	fslider2 = get_alias("gxdistortion.wet_dry");
double 	fRec18[3];
double 	fVec1[2];
double 	fConst35;
double 	fConst36;
double 	fRec17[2];
double 	fConst37;
double 	fConst38;
double 	fRec16[2];
double 	fRec15[3];
double 	fConst39;
double 	fRec14[3];
double 	fRec13[3];
FAUSTFLOAT&	fslider3 = get_alias("gxdistortion.drive");
double 	fConst40;
double 	fConst41;
double 	fConst42;
double 	fConst43;
double 	fConst44;
double 	fConst45;
double 	fConst46;
double 	fConst47;
double 	fConst48;
double 	fRec27[2];
double 	fRec26[3];
double 	fVec2[2];
double 	fConst49;
double 	fRec25[2];
double 	fRec24[3];
double 	fVec3[2];
double 	fConst50;
double 	fConst51;
double 	fRec23[2];
double 	fRec22[3];
double 	fConst52;
double 	fRec29[2];
double 	fRec28[3];
double 	fConst53;
double 	fRec32[2];
double 	fRec31[3];
double 	fConst54;
double 	fRec30[3];
double 	fVec4[2];
double 	fConst55;
double 	fRec12[2];
double 	fConst56;
double 	fConst57;
double 	fConst58;
double 	fVec5[2];
double 	fConst59;
double 	fRec33[2];
double 	fRec11[2];
double 	fConst60;
double 	fRec10[2];
double 	fConst61;
double 	fConst62;
double 	fConst63;
double 	fVec6[2];
double 	fConst64;
double 	fRec36[2];
double 	fRec35[2];
double 	fRec34[2];
double 	fRec9[2];
double 	fVec7[2];
double 	fConst65;
double 	fRec7[2];
double 	fVec8[2];
double 	fRec37[2];
double 	fRec6[2];
double 	fRec5[2];
double 	fConst66;
double 	fConst67;
double 	fConst68;
double 	fVec9[2];
double 	fConst69;
double 	fRec40[2];
double 	fRec39[2];
double 	fRec38[2];
double 	fRec4[2];
double 	fRec3[2];
double 	fVec10[2];
double 	fRec41[2];
double 	fRec2[2];
double 	fRec1[2];
int	fSamplingFreq;

void init(int samplingFreq)
{
	fSamplingFreq = samplingFreq;
	for (int i=0; i<2; i++) fRec0[i] = 0;
	fConst0 = (1.0 / tan((97.38937226128358 / fSamplingFreq)));
	fConst1 = (1 + fConst0);
	fConst2 = (0 - ((1 - fConst0) / fConst1));
	fConst3 = (1.0 / tan((20517.741620594938 / fSamplingFreq)));
	fConst4 = (1 + fConst3);
	fConst5 = (0 - ((1 - fConst3) / fConst4));
	for (int i=0; i<2; i++) fRec8[i] = 0;
	fConst6 = tan((942.4777960769379 / fSamplingFreq));
	fConst7 = (1.0 / faustpower<2>(fConst6));
	fConst8 = (2 * (1 - fConst7));
	fConst9 = (1.0 / fConst6);
	fConst10 = (1 + ((fConst9 - 1.0) / fConst6));
	fConst11 = (1.0 / (1 + ((1.0 + fConst9) / fConst6)));
	fConst12 = tan((3769.9111843077517 / fSamplingFreq));
	fConst13 = (1.0 / faustpower<2>(fConst12));
	fConst14 = (2 * (1 - fConst13));
	fConst15 = (1.0 / fConst12);
	fConst16 = (1 + ((fConst15 - 1.0) / fConst12));
	fConst17 = (1.0 / (1 + ((1.0 + fConst15) / fConst12)));
	fConst18 = tan((10053.096491487338 / fSamplingFreq));
	fConst19 = (1.0 / faustpower<2>(fConst18));
	fConst20 = (2 * (1 - fConst19));
	fConst21 = (1.0 / fConst18);
	fConst22 = (1 + ((fConst21 - 1.0000000000000004) / fConst18));
	fConst23 = (1 + ((1.0000000000000004 + fConst21) / fConst18));
	fConst24 = (1.0 / fConst23);
	fConst25 = (1 + fConst21);
	fConst26 = (0 - ((1 - fConst21) / fConst25));
	fConst27 = tan((47123.8898038469 / fSamplingFreq));
	fConst28 = (2 * (1 - (1.0 / faustpower<2>(fConst27))));
	fConst29 = (1.0 / fConst27);
	fConst30 = (1 + ((fConst29 - 1.414213562373095) / fConst27));
	fConst31 = (1 + ((1.414213562373095 + fConst29) / fConst27));
	fConst32 = (1.0 / fConst31);
	for (int i=0; i<2; i++) fRec21[i] = 0;
	IOTA = 0;
	for (int i=0; i<65536; i++) fVec0[i] = 0;
	iConst33 = int((int((0.1111111111111111 * fSamplingFreq)) & 65535));
	for (int i=0; i<2; i++) fRec20[i] = 0;
	fConst34 = (0.009000000000000008 / fSamplingFreq);
	for (int i=0; i<2; i++) fRec19[i] = 0;
	for (int i=0; i<3; i++) fRec18[i] = 0;
	for (int i=0; i<2; i++) fVec1[i] = 0;
	fConst35 = (0 - fConst0);
	fConst36 = (1.0 / (fConst1 * fConst31));
	for (int i=0; i<2; i++) fRec17[i] = 0;
	fConst37 = (0 - fConst21);
	fConst38 = (1.0 / fConst25);
	for (int i=0; i<2; i++) fRec16[i] = 0;
	for (int i=0; i<3; i++) fRec15[i] = 0;
	fConst39 = (2 * (0 - fConst19));
	for (int i=0; i<3; i++) fRec14[i] = 0;
	for (int i=0; i<3; i++) fRec13[i] = 0;
	fConst40 = (1 + ((fConst9 - 1.0000000000000004) / fConst6));
	fConst41 = (1.0 / (1 + ((fConst9 + 1.0000000000000004) / fConst6)));
	fConst42 = (1 + fConst9);
	fConst43 = (0 - ((1 - fConst9) / fConst42));
	fConst44 = (1 + ((fConst15 - 1.0000000000000004) / fConst12));
	fConst45 = (1 + ((fConst15 + 1.0000000000000004) / fConst12));
	fConst46 = (1.0 / fConst45);
	fConst47 = (1 + fConst15);
	fConst48 = (0 - ((1 - fConst15) / fConst47));
	for (int i=0; i<2; i++) fRec27[i] = 0;
	for (int i=0; i<3; i++) fRec26[i] = 0;
	for (int i=0; i<2; i++) fVec2[i] = 0;
	fConst49 = (1.0 / (fConst47 * fConst23));
	for (int i=0; i<2; i++) fRec25[i] = 0;
	for (int i=0; i<3; i++) fRec24[i] = 0;
	for (int i=0; i<2; i++) fVec3[i] = 0;
	fConst50 = (0 - fConst9);
	fConst51 = (1.0 / (fConst42 * fConst45));
	for (int i=0; i<2; i++) fRec23[i] = 0;
	for (int i=0; i<3; i++) fRec22[i] = 0;
	fConst52 = (2 * (0 - fConst7));
	for (int i=0; i<2; i++) fRec29[i] = 0;
	for (int i=0; i<3; i++) fRec28[i] = 0;
	fConst53 = (0 - fConst15);
	for (int i=0; i<2; i++) fRec32[i] = 0;
	for (int i=0; i<3; i++) fRec31[i] = 0;
	fConst54 = (2 * (0 - fConst13));
	for (int i=0; i<3; i++) fRec30[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	fConst55 = (1.5848931924611136 / fConst4);
	for (int i=0; i<2; i++) fRec12[i] = 0;
	fConst56 = (1.0 / tan((270.1769682087222 / fSamplingFreq)));
	fConst57 = (1 + fConst56);
	fConst58 = (0 - ((1 - fConst56) / fConst57));
	for (int i=0; i<2; i++) fVec5[i] = 0;
	fConst59 = (0.027 / fConst57);
	for (int i=0; i<2; i++) fRec33[i] = 0;
	for (int i=0; i<2; i++) fRec11[i] = 0;
	fConst60 = (0.1 / fConst1);
	for (int i=0; i<2; i++) fRec10[i] = 0;
	fConst61 = (1.0 / tan((414.6902302738527 / fSamplingFreq)));
	fConst62 = (1 + fConst61);
	fConst63 = (0 - ((1 - fConst61) / fConst62));
	for (int i=0; i<2; i++) fVec6[i] = 0;
	fConst64 = (0.015 / fConst62);
	for (int i=0; i<2; i++) fRec36[i] = 0;
	for (int i=0; i<2; i++) fRec35[i] = 0;
	for (int i=0; i<2; i++) fRec34[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	for (int i=0; i<2; i++) fVec7[i] = 0;
	fConst65 = (1.0 / fConst4);
	for (int i=0; i<2; i++) fRec7[i] = 0;
	for (int i=0; i<2; i++) fVec8[i] = 0;
	for (int i=0; i<2; i++) fRec37[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<2; i++) fRec5[i] = 0;
	fConst66 = (1.0 / tan((609.4689747964198 / fSamplingFreq)));
	fConst67 = (1 + fConst66);
	fConst68 = (0 - ((1 - fConst66) / fConst67));
	for (int i=0; i<2; i++) fVec9[i] = 0;
	fConst69 = (0.0082 / fConst67);
	for (int i=0; i<2; i++) fRec40[i] = 0;
	for (int i=0; i<2; i++) fRec39[i] = 0;
	for (int i=0; i<2; i++) fRec38[i] = 0;
	for (int i=0; i<2; i++) fRec4[i] = 0;
	for (int i=0; i<2; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fVec10[i] = 0;
	for (int i=0; i<2; i++) fRec41[i] = 0;
	for (int i=0; i<2; i++) fRec2[i] = 0;
	for (int i=0; i<2; i++) fRec1[i] = 0;
}

void compute(int count, float *input0, float *output0)
{
	double 	fSlow0 = (0.0010000000000000009 * pow(10,(0.05 * fslider0)));
	double 	fSlow1 = (0.0010000000000000009 * pow(10,(0.05 * fslider1)));
	double 	fSlow2 = fslider2;
	double 	fSlow3 = (0.00024937655860349125 * fSlow2);
	double 	fSlow4 = fslider3;
	double 	fSlow5 = pow(1e+01,(0.8 * fSlow4));
	double 	fSlow6 = (fConst41 * pow(1e+01,(2 * fSlow4)));
	double 	fSlow7 = (fConst41 * pow(1e+01,(0.9 * fSlow4)));
	double 	fSlow8 = pow(1e+01,(1.2 * fSlow4));
	double 	fSlow9 = (2 * (fSlow4 - 0.5));
	double 	fSlow10 = (1 - max(0, (0 - fSlow9)));
	double 	fSlow11 = (1 - (0.01 * fSlow2));
	double 	fSlow12 = (0.024937655860349125 * fSlow11);
	double 	fSlow13 = (1.25 * fSlow4);
	double 	fSlow14 = (0.00024937655860349125 * (fSlow2 * (1 - max(0, fSlow9))));
	for (int i=0; i<count; i++) {
		fRec0[0] = (fSlow0 + (0.999 * fRec0[1]));
		fRec8[0] = (fSlow1 + (0.999 * fRec8[1]));
		double fTemp0 = (fConst8 * fRec13[1]);
		double fTemp1 = (fConst14 * fRec14[1]);
		double fTemp2 = (double)input0[i];
		double fTemp3 = fabs(fTemp2);
		fRec21[0] = ((9.999999999998899e-05 * fTemp3) + (0.9999 * fRec21[1]));
		double fTemp4 = max(fRec21[0], fTemp3);
		fVec0[IOTA&65535] = fTemp4;
		fRec20[0] = ((fVec0[IOTA&65535] + fRec20[1]) - fVec0[(IOTA-iConst33)&65535]);
		fRec19[0] = ((fConst34 * fRec20[0]) + (0.999 * fRec19[1]));
		double fTemp5 = max(-1, min(-0.01, (fVec0[IOTA&65535] - (1.0 + (1.02 * fRec19[0])))));
		double fTemp6 = (0 - fTemp5);
		double fTemp7 = (40.1 * fTemp6);
		double fTemp8 = max(-600, fTemp7);
		double fTemp9 = (0 - fTemp8);
		double fTemp10 = (fTemp2 - fTemp5);
		double fTemp11 = (40.1 * fTemp10);
		double fTemp12 = max(-600, fTemp11);
		double fTemp13 = (0 - fTemp12);
		double fTemp14 = (((int((fabs(fTemp11) > 0.0001)))?((int((fTemp12 < -50)))?(exp(fTemp12) * fTemp13):(fTemp12 / (1 - exp(fTemp13)))):(1 + (fTemp10 * (20.05 + (134.00083333333336 * fTemp10))))) - ((int((fabs(fTemp7) > 0.0001)))?((int((fTemp8 < -50)))?(exp(fTemp8) * fTemp9):(fTemp8 / (1 - exp(fTemp9)))):(1 + (fTemp6 * (20.05 + (134.00083333333336 * fTemp6))))));
		fRec18[0] = ((fSlow3 * fTemp14) - (fConst32 * ((fConst30 * fRec18[2]) + (fConst28 * fRec18[1]))));
		double fTemp15 = (fRec18[2] + (fRec18[0] + (2 * fRec18[1])));
		fVec1[0] = fTemp15;
		fRec17[0] = ((fConst36 * ((fConst35 * fVec1[1]) + (fConst0 * fVec1[0]))) + (fConst2 * fRec17[1]));
		fRec16[0] = ((fConst38 * ((fConst37 * fRec17[1]) + (fConst21 * fRec17[0]))) + (fConst26 * fRec16[1]));
		fRec15[0] = (fRec16[0] - (fConst24 * ((fConst22 * fRec15[2]) + (fConst20 * fRec15[1]))));
		fRec14[0] = ((fConst24 * (((fConst19 * fRec15[0]) + (fConst39 * fRec15[1])) + (fConst19 * fRec15[2]))) - (fConst17 * ((fConst16 * fRec14[2]) + fTemp1)));
		fRec13[0] = ((fRec14[2] + (fConst17 * (fTemp1 + (fConst16 * fRec14[0])))) - (fConst11 * ((fConst10 * fRec13[2]) + fTemp0)));
		double fTemp16 = max(-1, min(1, (fSlow5 * (fRec13[2] + (fConst11 * (fTemp0 + (fConst10 * fRec13[0])))))));
		fRec27[0] = ((fConst38 * (fRec17[0] + fRec17[1])) + (fConst26 * fRec27[1]));
		fRec26[0] = (fRec27[0] - (fConst24 * ((fConst22 * fRec26[2]) + (fConst20 * fRec26[1]))));
		double fTemp17 = (fRec26[2] + (fRec26[0] + (2 * fRec26[1])));
		fVec2[0] = fTemp17;
		fRec25[0] = ((fConst49 * (fVec2[0] + fVec2[1])) + (fConst48 * fRec25[1]));
		fRec24[0] = (fRec25[0] - (fConst46 * ((fConst44 * fRec24[2]) + (fConst14 * fRec24[1]))));
		double fTemp18 = (fRec24[2] + (fRec24[0] + (2 * fRec24[1])));
		fVec3[0] = fTemp18;
		fRec23[0] = ((fConst51 * ((fConst50 * fVec3[1]) + (fConst9 * fVec3[0]))) + (fConst43 * fRec23[1]));
		fRec22[0] = (fRec23[0] - (fConst41 * ((fConst40 * fRec22[2]) + (fConst8 * fRec22[1]))));
		double fTemp19 = max(-1, min(1, (fSlow6 * (((fConst7 * fRec22[0]) + (fConst52 * fRec22[1])) + (fConst7 * fRec22[2])))));
		fRec29[0] = ((fConst51 * (fVec3[0] + fVec3[1])) + (fConst43 * fRec29[1]));
		fRec28[0] = (fRec29[0] - (fConst41 * ((fConst40 * fRec28[2]) + (fConst8 * fRec28[1]))));
		double fTemp20 = max(-1, min(1, (fSlow7 * (fRec28[2] + (fRec28[0] + (2 * fRec28[1]))))));
		double fTemp21 = (fConst8 * fRec30[1]);
		fRec32[0] = ((fConst49 * ((fConst53 * fVec2[1]) + (fConst15 * fVec2[0]))) + (fConst48 * fRec32[1]));
		fRec31[0] = (fRec32[0] - (fConst46 * ((fConst44 * fRec31[2]) + (fConst14 * fRec31[1]))));
		fRec30[0] = ((fConst46 * (((fConst13 * fRec31[0]) + (fConst54 * fRec31[1])) + (fConst13 * fRec31[2]))) - (fConst11 * ((fConst10 * fRec30[2]) + fTemp21)));
		double fTemp22 = max(-1, min(1, (fSlow8 * (fRec30[2] + (fConst11 * (fTemp21 + (fConst10 * fRec30[0])))))));
		double fTemp23 = (((fTemp22 * (1 - (0.3333333333333333 * faustpower<2>(fTemp22)))) + ((fTemp20 * (1 - (0.3333333333333333 * faustpower<2>(fTemp20)))) + (0.841395141645195 * (fTemp19 * (1 - (0.3333333333333333 * faustpower<2>(fTemp19))))))) + (0.7943282347242815 * (fTemp16 * (1 - (0.3333333333333333 * faustpower<2>(fTemp16))))));
		fVec4[0] = fTemp23;
		fRec12[0] = ((fConst55 * (fVec4[0] + fVec4[1])) + (fConst5 * fRec12[1]));
		double fTemp24 = (fRec11[1] - 1.3e+02);
		fVec5[0] = fTemp24;
		fRec33[0] = ((fConst59 * (fVec5[0] + fVec5[1])) + (fConst58 * fRec33[1]));
		fRec11[0] = Ftube3(0, ((fTemp14 * (fSlow14 + (fSlow11 * (0.024937655860349125 + (fSlow13 * ((0.0997506234413965 - (0.0997506234413965 * fabs((fSlow12 * fTemp14)))) - 0.024937655860349125)))))) + (fRec33[0] + (fSlow10 * fRec12[0]))));
		fRec10[0] = ((fConst60 * ((fConst35 * fRec11[1]) + (fConst0 * fRec11[0]))) + (fConst2 * fRec10[1]));
		double fTemp25 = (fRec35[1] - 1.3e+02);
		fVec6[0] = fTemp25;
		fRec36[0] = ((fConst64 * (fVec6[0] + fVec6[1])) + (fConst63 * fRec36[1]));
		fRec35[0] = Ftube3(1, (fRec36[0] + fRec9[1]));
		fRec34[0] = ((fConst60 * ((fConst35 * fRec35[1]) + (fConst0 * fRec35[0]))) + (fConst2 * fRec34[1]));
		fRec9[0] = (fRec34[0] + fRec10[0]);
		double fTemp26 = (fRec9[0] * fRec8[0]);
		fVec7[0] = fTemp26;
		fRec7[0] = ((fConst65 * (fVec7[0] + fVec7[1])) + (fConst5 * fRec7[1]));
		double fTemp27 = (fRec6[1] - 1.3e+02);
		fVec8[0] = fTemp27;
		fRec37[0] = ((fConst64 * (fVec8[0] + fVec8[1])) + (fConst63 * fRec37[1]));
		fRec6[0] = Ftube3(1, (fRec37[0] + fRec7[0]));
		fRec5[0] = ((fConst60 * ((fConst35 * fRec6[1]) + (fConst0 * fRec6[0]))) + (fConst2 * fRec5[1]));
		double fTemp28 = (fRec39[1] - 1.3e+02);
		fVec9[0] = fTemp28;
		fRec40[0] = ((fConst69 * (fVec9[0] + fVec9[1])) + (fConst68 * fRec40[1]));
		fRec39[0] = Ftube3(1, (fRec40[0] + fRec4[1]));
		fRec38[0] = ((fConst60 * ((fConst35 * fRec39[1]) + (fConst0 * fRec39[0]))) + (fConst2 * fRec38[1]));
		fRec4[0] = (fRec38[0] + fRec5[0]);
		fRec3[0] = ((fConst65 * (fRec4[0] + fRec4[1])) + (fConst5 * fRec3[1]));
		double fTemp29 = (fRec2[1] - 1.3e+02);
		fVec10[0] = fTemp29;
		fRec41[0] = ((fConst69 * (fVec10[0] + fVec10[1])) + (fConst68 * fRec41[1]));
		fRec2[0] = Ftube3(1, (fRec41[0] + fRec3[0]));
		fRec1[0] = ((fConst60 * ((fConst35 * fRec2[1]) + (fConst0 * fRec2[0]))) + (fConst2 * fRec1[1]));
		output0[i] = (FAUSTFLOAT)(fRec1[0] * fRec0[0]);
		// post processing
		fRec1[1] = fRec1[0];
		fRec2[1] = fRec2[0];
		fRec41[1] = fRec41[0];
		fVec10[1] = fVec10[0];
		fRec3[1] = fRec3[0];
		fRec4[1] = fRec4[0];
		fRec38[1] = fRec38[0];
		fRec39[1] = fRec39[0];
		fRec40[1] = fRec40[0];
		fVec9[1] = fVec9[0];
		fRec5[1] = fRec5[0];
		fRec6[1] = fRec6[0];
		fRec37[1] = fRec37[0];
		fVec8[1] = fVec8[0];
		fRec7[1] = fRec7[0];
		fVec7[1] = fVec7[0];
		fRec9[1] = fRec9[0];
		fRec34[1] = fRec34[0];
		fRec35[1] = fRec35[0];
		fRec36[1] = fRec36[0];
		fVec6[1] = fVec6[0];
		fRec10[1] = fRec10[0];
		fRec11[1] = fRec11[0];
		fRec33[1] = fRec33[0];
		fVec5[1] = fVec5[0];
		fRec12[1] = fRec12[0];
		fVec4[1] = fVec4[0];
		fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
		fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
		fRec32[1] = fRec32[0];
		fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
		fRec29[1] = fRec29[0];
		fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
		fRec23[1] = fRec23[0];
		fVec3[1] = fVec3[0];
		fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
		fRec25[1] = fRec25[0];
		fVec2[1] = fVec2[0];
		fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
		fRec27[1] = fRec27[0];
		fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
		fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
		fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
		fRec16[1] = fRec16[0];
		fRec17[1] = fRec17[0];
		fVec1[1] = fVec1[0];
		fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
		fRec19[1] = fRec19[0];
		fRec20[1] = fRec20[0];
		IOTA = IOTA+1;
		fRec21[1] = fRec21[0];
		fRec8[1] = fRec8[0];
		fRec0[1] = fRec0[0];
	}
}

static struct RegisterParams { RegisterParams(); } RegisterParams;
RegisterParams::RegisterParams()
{
	registerInit("amp2", init);
}

} // end namespace gxamp11
