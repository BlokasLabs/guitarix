/*
 * Copyright (C) 2012 Hermann Meyer, Andreas Degert, Pete Shorthose
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * --------------------------------------------------------------------------
 */


#include <string.h>
/****************************************************************
 ** some pieces in this file are copied from jconvolver
 */


/****************************************************************
 ** GxConvolverBase
 */

GxConvolverBase::~GxConvolverBase()
{
  if (is_runnable())
    {
      stop_process();
    }
}

void GxConvolverBase::adjust_values(
  unsigned int audio_size, unsigned int& count, unsigned int& offset,
  unsigned int& delay, unsigned int& ldelay, unsigned int& length,
  unsigned int& size, unsigned int& bufsize)
{

  if (bufsize < count)
    {
      bufsize = count;
    }
  if (bufsize < Convproc::MINPART)
    {
      bufsize = Convproc::MINPART;
    }
  if (offset > audio_size)
    {
      offset = audio_size;
    }
  if (!size)
    {
      if (offset + length > audio_size)
        {

          length = audio_size - offset;
        }
      if (!length)
        {
          length = audio_size - offset;
        }
      size = max(delay, ldelay) + offset + length;
    }
  else
    {
      if (delay > size)
        {
          delay = size;
        }
      if (ldelay > size)
        {
          ldelay = size;
        }
      if (offset > size - max(delay, ldelay))
        {
          offset = size - max(delay, ldelay);
        }
      if (length > size - max(delay, ldelay) - offset)
        {
          length = size - max(delay, ldelay) - offset;

        }
      if (!length)
        {
          length = size - max(delay, ldelay) - offset;
        }
    }
}

bool GxConvolverBase::start(int policy, int priority)
{
  int rc = start_process(priority, policy);
  if (rc != 0)
    {

      return false;
    }
  ready = true;
  return true;
}

bool GxConvolverBase::checkstate()
{
  if (state() == Convproc::ST_WAIT)
    {
      if (check_stop())
        {
          ready = false;
        }
      else
        {
          return false;
        }
    }
  else if (state() == ST_STOP)
    {
      ready = false;
    }
  return true;
}

struct CabDesc
{
  int ir_count;
  int ir_sr;
  float ir_data[];
};

template <int tab_size>
struct CabDesc_imp
{
  int ir_count;
  int ir_sr;
  float ir_data[tab_size];
  operator CabDesc&()
  {
    return *(CabDesc*)this;
  }
};
/**----------------------------- cabinet impulse response data --------------------------------**/
CabDesc_imp<192> cab_data_HighGain =
{
  192, 48000,
  {
    0.147081, 0.208808, 0.208996, 0.163228, 0.0858905, -0.0119104, -0.0932825, -0.121011, -0.0999426, -0.071073, -0.0403973, -0.00214844, 0.0287018,
    0.0381079, 0.0372284, 0.0330389, 0.0252979, 0.0141394, 0.00118835, -0.00764709, -0.00751953, 0.00262512, 0.0143475, 0.0174762, 0.0168384, 0.0179126,
    0.00738525, -0.0114069, -0.0192352, -0.0145825, -0.0179932, -0.0244049, -0.0173956, -0.00357178, 0.00643188, 0.0108966, 0.0132935, 0.0123737, 0.00680786,
    -0.000214844, -0.0040686, -0.00533752, -0.00738525, -0.00539124, -0.00171875, 0.00156433, 0.00481384, 0.0038739, -0.00666016, -0.018866, -0.0216522, -0.0171606,
    -0.00717712, 0.00770081, 0.0209003, 0.0251971, 0.0221222, 0.0157977, 0.00453857, -0.0107892, -0.022478, -0.029165, -0.0303467, 0, -0.0169592,
    -0.00966125, -0.00163147, 0.00273254, 0.000436401, -0.00282654, -0.00791565, -0.0136493, -0.0128436, -0.00564636, 0.00298096, 0.0090033, 0.00841248, 0.00201416,
    -0.00579407, -0.0119171, -0.0145624, -0.0128436, -0.00741211, 0.000543823, 0.00414917, 0.00414917, 0.00114136, -0.00778809, -0.021377, -0.0325623, -0.0386584,
    -0.038974, -0.0333679, -0.0221289, -0.0107825, -0.00453186, -0.00127563, -0.000261841, 0.000631104, 0.000537109, 0.000355835, 0.00114136, 0.00174561, 0.00104065,
    -0.000100708, -0.00128906, -0.00083252, 0.00146362, 0.00234314, 0.000443115, -0.00245056, -0.00782165, -0.0164423, -0.0250092, -0.0309644, -0.0314343, -0.0265063,
    -0.0176508, -0.00496155, 0.00805664, 0.0157843, 0.0171069, 0.0131055, 0.00613647, -0.00216187, -0.00804321, -0.0117157, 0, -0.015321, -0.0154352,
    -0.013374, -0.00994995, -0.00672058, -0.00353821, -0.00110779, 0.000678101, 0.00250427, -0.00564636, 0.00298096, 0.0090033, 0.00841248, 0.00201416, -0.00579407,
    -0.0119171, -0.0145624, -0.0128436, -0.00741211, 0.000543823, 0.00414917, 0.00414917, 0.00114136, -0.00778809, -0.021377, -0.0325623, -0.0386584, -0.038974,
    -0.0333679, -0.0221289, -0.0107825, -0.00453186, -0.00127563, -0.000261841, 0.000631104, 0.000537109, 0.000355835, 0.00114136, 0.00174561, 0.00104065, -0.000100708,
    -0.00128906, -0.00083252, 0.00146362, 0.00234314, 0.000443115, -0.00245056, -0.00782165, -0.0164423, -0.0250092, -0.0309644, -0.0314343, -0.0265063, -0.0176508,
    -0.00496155, 0.00805664, 0.0157843, 0.0171069, 0.0131055, 0.00613647, -0.00216187, -0.00804321, -0.0117157, 0
  }
};

CabDesc_imp<192> cab_data_AC30 = {
    192, 48000,
    { 7.32422e-05, 0.00015564, 0.00302429, 0.0057251, 0.00652466, 0.00614014, 0.00662537, 0.00419922, 0.00424194, -0.00379334, -0.00308838, -0.0103577, -0.0165436, 
      -0.0208832, -0.0206482, -0.027774, -0.0240204, -0.0231415, -0.0195801, -0.0178253, -0.015921, -0.0149628, -0.0164642, -0.0195465, -0.0218109, -0.0230652, 
      -0.0246216, -0.0256104, -0.0260925, -0.0210358, -0.0207489, -0.015863, -0.0106201, -0.0106628, -0.00259705, 0.00690613, 0.0146484, 0.026236, 0.0348633, 
      0.0506409, 0.0615387, 0.0747467, 0.0847351, 0.0917419, 0.0999908, 0.0957062, 0.093335, 0.0774262, 0.0564789, 0.0312073, 0.00177002, -0.0296539, 
      -0.047522, -0.0584259, -0.0557098, -0.0279785, 0.00585632, 0.0454926, 0.0777039, 0.0871948, 0.0838074, 0.0664886, 0.039389, 0.0180054, 0.00166931, 
      -0.00537415, 0.00290527, 0.00549622, 0.0210938, 0.0162201, 0.0135376, 0.00706482, 0.00458679, -0.00133667, 0.00446777, 0.00727539, 0.0085144, 0.00765076, 
      0.00744324, 0.00810852, 0.011911, 0.0117432, 0.00995789, 0.0141144, 0.0146301, 0.01651, 0.0221497, 0.0218842, 0.0201477, 0.0221466, 0.0210632, 
      0.0162018, 0.0183746, 0.0163727, 0.0168152, 0.0135895, 0.013208, 0.013208, 0.0101379, 0.0105713, 0.0109039, 0.0103699, 0.00718689, 0.0068634, 
      0.00429993, 0.0033844, 0.00050354, -9.15527e-05, 0.00460815, 0.00307617, 0.00213318, 0.00421143, 0.00546875, 0.00121155, 0.00124817, 0.0053894, 0.00281677, 
      0.0017395, 0.00368652, 0.00334778, 0.00233459, 0.00368347, 0.000366211, 0.00219727, 0.00175476, -0.00145874, 0.0006073, -0.000961304, -0.000509644, 0.00078125, 
      -0.00332336, 0.00331726, 0.000183105, -0.000747681, 0.00293274, -0.000637817, 0.000924683, -0.00149231, -0.00195312, -0.000564575, -0.00177917, 0.000491333, 0.00137024, 
      0.00274353, -0.000256348, 0.0024353, -0.00281372, -0.00131531, -0.00141602, -0.00289307, 0.000964355, 0.00017395, 0.00233765, -0.000726318, -0.000454712, -0.00398254, 
      -0.00518494, 0.000839233, 0.0168152, 0.0135895, 0.013208, 0.013208, 0.0101379, 0.0105713, 0.0109039, 0.0103699, 0.00718689, 0.0068634, 0.00429993, 
      0.0033844, 0.00050354, -9.15527e-05, 0.00460815, 0.00307617, 0.00213318, 0.00421143, 0.00546875, 0.00121155, 0.00124817, 0.0053894, 0.00281677, 0.0017395, 
      0.00368652, 0.00334778, 0.00233459, 0.00368347, 0.000366211, 0.00219727, 0.00175476, -0.00145874, 0.0006073, -0.000961304
    }
};

CabDesc_imp<511> cab_data_1x15 = {
    511, 48000,
    { 0.000134277, 0.000299072, 0.000500488, 0.000701904, 0.000897217, 0.00107422, 0.0012207, 0.00134277, 0.00166016, 0.00279541, 0.00596924, 0.0129211, 0.0255066, 
      0.0450439, 0.0717041, 0.103967, 0.138361, 0.169751, 0.192133, 0.199994, 0.189673, 0.160516, 0.115253, 0.0595947, 0.00111084, -0.0523376, 
      -0.09422, -0.120544, -0.130334, -0.125336, -0.109198, -0.0863647, -0.0610535, -0.036554, -0.015033, 0.00230103, 0.0147949, 0.0221741, 0.0244629, 
      0.0220886, 0.015863, 0.00692749, -0.00336914, -0.0137573, -0.0232178, -0.0311218, -0.0372253, -0.041571, -0.0443298, -0.0456299, -0.0454651, -0.0437683, 
      -0.0405396, -0.0360168, -0.0307495, -0.0255127, -0.0211731, -0.018396, -0.0174988, -0.0183716, -0.0206116, -0.0236694, -0.0270508, 0, -0.0337097, 
      -0.0368042, -0.0396301, -0.0419495, -0.0433411, -0.0432739, -0.0412781, -0.0371643, -0.0311523, -0.0238831, -0.016272, -0.00932617, -0.00390625, -0.000634766, 
      0.000219727, -0.00123291, -0.0045166, -0.00890503, -0.013562, -0.0176819, -0.0205872, -0.021814, -0.0211914, -0.0188721, -0.0152954, -0.0111328, -0.00716553, 
      -0.00413818, -0.00258789, -0.00273437, -0.00445557, -0.00733032, -0.0107849, -0.0142944, -0.0174927, -0.0202332, -0.0226074, -0.0248291, -0.027124, -0.0295776, 
      -0.0320679, -0.0342712, -0.0357727, -0.0361938, -0.0352844, -0.0329712, -0.0293701, -0.0247498, -0.0194946, -0.0140198, -0.00877075, -0.00415649, -0.00057373, 
      0.00169678, 0.00249634, 0.00189209, 0.000170898, -0.00219727, -0.0046814, -0.0067749, -0.00814209, -0.0086731, -0.00847778, 0, -0.00687866, -0.00581055, 
      -0.0045227, -0.0027832, -0.000341797, 0.00289307, 0.0067627, 0.0108215, 0.0144226, 0.0168823, 0.017688, 0.0166565, 0.0139832, 0.010199, 0.00598755, 
      0.00205688, -0.0010376, -0.00300293, -0.00379028, -0.00352173, -0.00244141, -0.000805664, 0.00119019, 0.00338745, 0.00569458, 0.00802002, 0.0102478, 0.0122314, 
      0.0138184, 0.0148865, 0.0153687, 0.0152466, 0.014563, 0.0133667, 0.0117493, 0.00982056, 0.00775146, 0.00578003, 0.00420532, 0.003302, 0.00330811, 
      0.00438232, 0.00649414, 0.00944214, 0.0127869, 0.0159607, 0.0184021, 0.0197144, 0.0197632, 0.0186768, 0.0167664, 0.0143921, 0.0118164, 0.00919189, 
      0.00656738, 0.00415039, 0.00236816, 0.00170288, 0.00239258, 0.00419922, 0.00649414, 0.00848999, 0.00963135, 0, 0.00950928, 0.00913696, 0.00916748, 
      0.00994873, 0.0114441, 0.0129517, 0.0133057, 0.0118164, 0.00891113, 0.00587769, 0.00390625, 0.00344238, 0.00426636, 0.00597534, 0.00808716, 0.0100098, 
      0.011261, 0.0118774, 0.0124756, 0.0137451, 0.0159851, 0.0189636, 0.0220642, 0.0245972, 0.0260681, 0.0262634, 0.0252197, 0.0232483, 0.0209595, 
      0.0191345, 0.018335, 0.0185791, 0.0194336, 0.0203552, 0.0208679, 0.0206482, 0.0198303, 0.0189514, 0.0185608, 0.0187256, 0.0190613, 0.0190186, 
      0.0180847, 0.0159729, 0.0129333, 0.00982666, 0.00770264, 0.00709839, 0.00768433, 0.00869141, 0.009552, 0.0102844, 0.0112671, 0.0126709, 0.0141357, 
      0.0149963, 0.0149658, 0.0143555, 0.0136536, 0.0131897, 0.0129456, 0.0123962, 0.01073, 0, 0.003302, -0.00055542, -0.00249023, -0.00183716, 
      0.000653076, 0.00330811, 0.00470581, 0.00438232, 0.00276489, 0.000653076, -0.00116577, -0.00214233, -0.00214233, -0.00164795, -0.00159912, -0.00278931, -0.00516357, 
      -0.0078186, -0.00956421, -0.00946655, -0.00714111, -0.00299683, 0.00181885, 0.00605469, 0.00899658, 0.010614, 0.0112976, 0.0117004, 0.0124268, 0.0136475, 
      0.0148865, 0.0155334, 0.0153259, 0.0143738, 0.0128174, 0.0107178, 0.00843506, 0.00675659, 0.00626831, 0.00688477, 0.00808716, 0.00939941, 0.0105408, 
      0.0111877, 0.0109558, 0.00969238, 0.00762939, 0.00519409, 0.00283203, 0.000946045, -0.000274658, -0.00098877, -0.00159302, -0.00229492, -0.00292969, -0.00309448, 
      -0.00252686, -0.00139771, -0.000219727, 0.000463867, 0.000421143, -0.000146484, -0.000793457, 0, -0.00114136, -0.000982666, -0.000830078, -0.000634766, -0.000286865, 
      0.000250244, 0.00090332, 0.00143433, 0.00161133, 0.00128174, 0.000592041, -0.000128174, -0.000628662, -0.00098877, -0.00145874, -0.00221558, -0.0032898, -0.00459595, 
      -0.00594482, -0.00700684, -0.00742798, -0.0071106, -0.00638428, -0.00586548, -0.00601807, -0.00681152, -0.00780029, -0.00846558, -0.00839844, -0.00752563, -0.00609741, 
      -0.00449829, -0.00308838, -0.00220947, -0.00217285, -0.00292969, -0.0039978, -0.00477905, -0.00494995, -0.0045105, -0.0036377, -0.00254517, -0.00152588, -0.000872803, 
      -0.000720215, -0.000958252, -0.00129395, -0.00142212, -0.00125122, -0.00102539, -0.00112915, -0.00167236, -0.00245972, -0.00327759, -0.00406494, -0.00474854, -0.00515747, 
      -0.00513916, -0.00465698, -0.00377808, -0.00269775, -0.00169678, -0.0010437, 0, -0.00129395, -0.00206299, -0.00284424, -0.00324097, -0.00306396, -0.0024292, 
      -0.00175171, -0.0015686, -0.00222778, -0.00378418, -0.00597534, -0.00823975, -0.00977173, -0.00990601, -0.00860596, -0.00648804, -0.00442505, -0.00300903, -0.0024292, 
      -0.00257568, -0.00314331, -0.00378418, -0.00437622, -0.0050293, -0.00586548, -0.00681763, -0.00765991, -0.0081604, -0.00825195, -0.00813599, -0.00806274, -0.00805664, 
      -0.00791626, -0.00751343, -0.00697632, -0.006604, -0.00667725, -0.00727539, -0.00825195, -0.00933228, -0.0102417, -0.01073, -0.0106934, -0.0101929, -0.00941772, 
      -0.00853272, -0.00772705, -0.00722046, -0.0071167, -0.00734253, -0.00775757, -0.00819702, -0.00848389, -0.0085022, -0.00836792, -0.00825806, -0.00820312, -0.00802002, 
      -0.00759277, -0.00710449, -0.00682373, -0.00691528, -0.00737305, 0, -0.00810547, -0.00736694, -0.00585938, -0.00427246, -0.00317993, -0.00258789, -0.00221558, 
      -0.00192871, -0.00171509, -0.00146484, -0.00110474, -0.000738525, -0.00057373, -0.000805664, -0.0015564, -0.00251465, -0.00287476, -0.00202026, -0.000274658, 0.00140381, 
      0.00223389, 0.00211182, 0.00143433, 0.000683594, 7.93457e-05, -0.000537109, -0.00145874, -0.00272217, -0.00408325, -0.00528564, -0.00620117, -0.00673828, -0.00682373, 
      -0.006427, -0.00548706, -0.0039917, -0.00223999, -0.000958252, -0.000842285, -0.00187988, -0.00343628, -0.00494385, -0.00612793, -0.00692139, -0.00733032, -0.00742798, 
      -0.00737305, -0.00731201, -0.00737305, -0.00758667, -0.00773926, -0.00747681, -0.00657959, -0.0052002, -0.00383911, -0.00291748, -0.00247192, -0.00231934, -0.00227661, 
      -0.00219116, -0.00198364, -0.00184937, -0.0019043
    }
};

CabDesc_imp<768> cab_data_Princeton = {
    768, 48000,
    { -0.00309448, -0.00641479, -0.0076355, -0.00684204, -0.0046814, -0.00162964, 0.0022644, 0.00679321, 0.0110474, 0.0140808, 0.0159912, 0.0153442, 0.0124268, 
      0.00848389, 0.00452881, 0.00045166, -0.00389404, -0.00841675, -0.0115479, -0.0121704, -0.0108582, -0.00772095, -0.00272827, 0.00341187, 0.00960693, 0.0144775, 
      0.0154358, 0.0115173, 0.00429688, -0.00339355, -0.00940552, -0.0124878, -0.0122437, -0.00877686, -0.00349731, 0.0017395, 0.00515137, 0.00681152, 0.00726929, 
      0.00681152, 0.00482788, 0.00195312, -0.00167847, -0.00560913, -0.00799561, -0.00747681, -0.00460205, -0.000897217, 0.00301514, 0.00552368, 0.00639038, 0.00568848, 
      0.00362549, 1.83105e-05, -0.00333862, -0.00494995, -0.00473022, -0.00341797, -0.00162964, 0.00032959, 0.00178223, 0.00244751, 0.00177612, -0.000164795, -0.00247192, 
      -0.00488892, -0.00692139, -0.00699463, -0.00483398, -0.00162964, 0.00135498, 0.00333862, 0.00326538, 0.00117798, -0.00202026, -0.00481567, -0.00576782, -0.00505371, 
      -0.00369873, -0.00270996, -0.00230103, -0.00228271, -0.00197144, -0.00152588, -0.00117188, -0.000958252, -0.000878906, -0.000891113, -0.000952148, -0.000708008, -0.00043335, 
      -0.000598145, -0.00152588, -0.00267944, -0.00366821, -0.00380859, -0.00317383, -0.00262451, -0.00256958, -0.0020813, -0.0017334, -0.00195923, -0.00197754, -0.00133667, 
      -0.0003479, 0.00045166, 0.000518799, -0.000701904, -0.00256348, -0.00449219, -0.00578613, -0.00565796, -0.00393066, -0.0015686, 4.27246e-05, 0.000262451, -0.000518799, 
      -0.00183105, -0.00301514, -0.00285645, -0.00114746, 0.000854492, 0.00175781, 0.00129395, -0.00043335, -0.00250854, -0.00425415, -0.0048645, -0.00410156, -0.00268555, 
      -0.00133057, -6.71387e-05, 0.000872803, 0.000848389, 4.88281e-05, -0.00067749, -0.000701904, -0.000262451, 1.2207e-05, -0.000140381, -0.000262451, -0.000720215, -0.000854492, 
      -0.000396729, 0.000634766, 0.00177612, 0.00266724, 0.00252686, 0.000854492, -0.00150146, -0.00365601, -0.00440063, -0.00342407, -0.00135498, 0.000665283, 0.00183716, 
      0.00183716, 0.000952148, -0.000506592, -0.00196533, -0.00281372, -0.00274048, -0.00161133, -1.2207e-05, 0.00133057, 0.00203247, 0.00227051, 0.00213013, 0.00145264, 
      0.000512695, -0.00045166, -0.00119629, -0.00192261, -0.0024353, -0.00222778, -0.00145874, -0.000915527, -0.00067749, -6.10352e-05, 0.000689697, 0.0010437, 0.0010376, 
      0.0013855, 0.00198975, 0.00247803, 0.0020752, 0.00117798, 0.000140381, -0.000598145, -0.00122681, -0.00144043, -0.00106812, -0.000292969, 0.000402832, 0.0010376, 
      0.00160522, 0.00194092, 0.0019043, 0.00161743, 0.00126953, 0.00118408, 0.00101929, 0.000561523, -6.10352e-06, -0.000408936, -0.000531006, -0.000152588, 0.00043335, 
      0.00126953, 0.00234985, 0.00358887, 0.00419312, 0.00410156, 0.00321655, 0.00201416, 0.000610352, -0.000274658, -0.000585938, -0.000299072, 0.000299072, 0.00106201, 
      0.00162354, 0.00160522, 0.00123901, 0.00067749, 0.000134277, -6.71387e-05, 0.000274658, 0.00106812, 0.00177002, 0.00203247, 0.00174561, 0.00164795, 0.0017395, 
      0.0020874, 0.00219116, 0.00220947, 0.0020752, 0.00170898, 0.000762939, -0.000164795, -0.00043335, -7.93457e-05, 0.00043335, 0.00123901, 0.00217285, 0.00265503, 
      0.00253906, 0.00205078, 0.00184937, 0.0015686, 0.00147705, 0.00136108, 0.00152588, 0.00189209, 0.00239258, 0.00265503, 0.0026062, 0.0024292, 0.00214844, 
      0.00180664, 0.00134277, 0.00088501, 0.000769043, 0.000982666, 0.00114746, 0.0010437, 0.000787353, 0.000415039, 0.000219727, 0.000128174, -9.15527e-05, -0.000360107, 
      -0.000408936, -3.05176e-05, 0.000390625, 0.00090332, 0.00110474, 0.00115356, 0.00111694, 0.00123291, 0.00146484, 0.0015564, 0.00122681, 0.000793457, 0.000384521, 
      0.000213623, 0.000244141, 0.000244141, 0.000500488, 0.0010498, 0.00174561, 0.00201416, 0.00170288, 0.000970459, 0.000305176, 3.05176e-05, -0.000231934, -0.000469971, 
      -0.000531006, -0.000109863, 0.000311279, 0.000640869, 0.000671387, 0.000762939, 0.000964355, 0.00106812, 0.00119629, 0.0010437, 0.00065918, 5.49316e-05, -0.000286865, 
      -0.000177002, 0.00020752, 0.000488281, 0.000469971, 0.000311279, 0.00010376, -0.000262451, -0.000476074, -0.000604248, -0.000390625, -6.10352e-05, 0.000305176, 0.000567627, 
      0.000640869, 0.000640869, 0.000341797, 8.54492e-05, -0.000292969, -0.000585938, -0.00100708, -0.00115967, -0.00115356, -0.00078125, -0.000372314, 0.000128174, 0.000494385, 
      0.000823975, 0.000842285, 0.000585938, -3.05176e-05, -0.000714111, -0.00133057, -0.00147705, -0.00137329, -0.0010437, -0.000836182, -0.000592041, -0.000372314, -0.000115967, 
      3.66211e-05, -7.93457e-05, -0.000262451, -0.000378418, -0.000469971, -0.000793457, -0.00107422, -0.00128784, -0.00113525, -0.000823975, -0.000488281, -0.000262451, -0.000201416, 
      -0.000286865, -0.000372314, -0.000469971, -0.000592041, -0.000726318, -0.000726318, -0.000701904, -0.000634766, -0.000683594, -0.000701904, -0.000775146, -0.000708008, -0.000537109, 
      -0.00045166, -0.000543213, -0.000823975, -0.00105591, -0.00108643, -0.000915527, -0.000708008, -0.00055542, -0.000305176, 8.54492e-05, 0.000244141, 0.000170898, -0.000213623, 
      -0.000543213, -0.000762939, -0.000811768, -0.000830078, -0.000805664, -0.000866699, -0.000878906, -0.000769043, -0.000634766, -0.000738525, -0.0010498, -0.00131836, -0.00134888, 
      -0.0010498, -0.000726318, -0.000378418, -0.000140381, 9.15527e-05, 0.000146484, -2.44141e-05, -0.000494385, -0.000897217, -0.0012146, -0.00129395, -0.00133667, -0.00139771, 
      -0.00147095, -0.00153809, -0.00137939, -0.00119629, -0.00088501, -0.000817871, -0.000732422, -0.000628662, -0.000512695, -0.000469971, -0.00055542, -0.000622559, -0.000628662, 
      -0.00043335, -0.000134277, -0.00010376, -0.000262451, -0.00057373, -0.000750732, -0.00090332, -0.000964355, -0.000939941, -0.000817871, -0.000616455, -0.000543213, -0.000628662, 
      -0.000854492, -0.0010376, -0.00101318, -0.000946045, -0.000750732, -0.000701904, -0.000592041, -0.000543213, -0.000341797, -9.76563e-05, 0.000189209, 0.000323486, 0.00043335, 
      0.000311279, 9.15527e-05, -0.000384521, -0.000909424, -0.00137939, -0.00145264, -0.00130615, -0.000921631, -0.000585938, -0.000286865, -0.000177002, -6.10352e-05, 1.2207e-05, 
      7.93457e-05, 6.71387e-05, 4.88281e-05, -1.2207e-05, -7.32422e-05, -0.000231934, -0.000402832, -0.000683594, -0.000726318, -0.000634766, -0.000457764, -0.000311279, -0.000201416, 
      -0.000109863, -4.88281e-05, 4.27246e-05, 0.000115967, 0.000140381, 9.76563e-05, 6.10352e-05, 4.27246e-05, 2.44141e-05, -6.10352e-06, -0.000140381, -0.000177002, 0, 
      9.76563e-05, 0.000213623, 0.000170898, 0.000274658, 0.000317383, 0.000390625, 0.000274658, 0.000109863, -6.10352e-06, -6.10352e-06, 8.54492e-05, 0.000299072, 0.000421143, 
      0.000488281, 0.000372314, 0.000292969, 4.88281e-05, -9.15527e-05, -0.000354004, -0.000341797, -0.000256348, -2.44141e-05, 5.49316e-05, 7.93457e-05, -6.10352e-06, -6.10352e-05, 
      7.93457e-05, 0.000219727, 0.00045166, 0.000628662, 0.000854492, 0.00098877, 0.00101318, 0.000836182, 0.000500488, 0.000250244, 0.000115967, 0.000201416, 0.000317383, 
      0.000469971, 0.000653076, 0.00090332, 0.000976562, 0.000891113, 0.000683594, 0.000415039, 0.00022583, 0.000177002, 0.000292969, 0.000384521, 0.000488281, 0.000402832, 
      0.000335693, 0.000305176, 0.000268555, 0.000280762, 0.000262451, 0.000286865, 0.000372314, 0.000384521, 0.000250244, 0.000146484, 0.000183105, 0.000274658, 0.000274658, 
      0.000158691, 0.000134277, 0.000152588, 0.000256348, 0.000390625, 0.000427246, 0.000366211, 0.000268555, 0.000219727, 0.000231934, 0.000311279, 0.000390625, 0.00045166, 
      0.00045166, 0.000457764, 0.000408936, 0.000299072, 0.000262451, 0.000384521, 0.000585938, 0.000799561, 0.000952148, 0.000915527, 0.000836182, 0.000634766, 0.000531006, 
      0.000311279, 0.000201416, 0.00012207, 9.15527e-05, 9.15527e-05, 8.54492e-05, 4.88281e-05, 7.93457e-05, 0.000195313, 0.000439453, 0.000665283, 0.000805664, 0.000769043, 
      0.000653076, 0.000524902, 0.000274658, 0.000170898, 1.83105e-05, -1.83105e-05, -6.10352e-05, 7.32422e-05, 0.000244141, 0.000469971, 0.000634766, 0.000750732, 0.000848389, 
      0.000860596, 0.000683594, 0.000421143, 0.000128174, -1.83105e-05, -0.000170898, -0.000292969, -0.000390625, -0.000390625, -0.000231934, -0.00010376, 0.000152588, 0.000323486, 
      0.000506592, 0.000512695, 0.000256348, 0.000390625, 0.000427246, 0.000366211, 0.000268555, 0.000219727, 0.000231934, 0.000311279, 0.000390625, 0.00045166, 0.00045166, 
      0.000457764, 0.000408936, 0.000299072, 0.000262451, 0.000384521, 0.000585938, 0.000799561, 0.000952148, 0.000915527, 0.000836182, 0.000634766, 0.000531006, 0.000311279, 
      0.000201416, 0.00012207, 9.15527e-05, 9.15527e-05, 8.54492e-05, 4.88281e-05, 7.93457e-05, 0.000195313, 0.000439453, 0.000665283, 0.000805664, 0.000769043, 0.000653076, 
      0.000524902, 0.000274658, 0.000170898, 1.83105e-05, -1.83105e-05, -6.10352e-05, 7.32422e-05, 0.000244141, 0.000469971, 0.000634766, 0.000750732, 0.000848389, 0.000860596, 
      0.000683594
    }
};

CabDesc_imp<192> contrast_ir_desc =
{
  192, 48000,
  {
    0.147081, 0.208808, 0.208996, 0.163228, 0.0858905, -0.0119104, -0.0932825, -0.121011, -0.0999426, -0.071073, -0.0403973, -0.00214844, 0.0287018,
    0.0381079, 0.0372284, 0.0330389, 0.0252979, 0.0141394, 0.00118835, -0.00764709, -0.00751953, 0.00262512, 0.0143475, 0.0174762, 0.0168384, 0.0179126,
    0.00738525, -0.0114069, -0.0192352, -0.0145825, -0.0179932, -0.0244049, -0.0173956, -0.00357178, 0.00643188, 0.0108966, 0.0132935, 0.0123737, 0.00680786,
    -0.000214844, -0.0040686, -0.00533752, -0.00738525, -0.00539124, -0.00171875, 0.00156433, 0.00481384, 0.0038739, -0.00666016, -0.018866, -0.0216522, -0.0171606,
    -0.00717712, 0.00770081, 0.0209003, 0.0251971, 0.0221222, 0.0157977, 0.00453857, -0.0107892, -0.022478, -0.029165, -0.0303467, 0, -0.0169592,
    -0.00966125, -0.00163147, 0.00273254, 0.000436401, -0.00282654, -0.00791565, -0.0136493, -0.0128436, -0.00564636, 0.00298096, 0.0090033, 0.00841248, 0.00201416,
    -0.00579407, -0.0119171, -0.0145624, -0.0128436, -0.00741211, 0.000543823, 0.00414917, 0.00414917, 0.00114136, -0.00778809, -0.021377, -0.0325623, -0.0386584,
    -0.038974, -0.0333679, -0.0221289, -0.0107825, -0.00453186, -0.00127563, -0.000261841, 0.000631104, 0.000537109, 0.000355835, 0.00114136, 0.00174561, 0.00104065,
    -0.000100708, -0.00128906, -0.00083252, 0.00146362, 0.00234314, 0.000443115, -0.00245056, -0.00782165, -0.0164423, -0.0250092, -0.0309644, -0.0314343, -0.0265063,
    -0.0176508, -0.00496155, 0.00805664, 0.0157843, 0.0171069, 0.0131055, 0.00613647, -0.00216187, -0.00804321, -0.0117157, 0, -0.015321, -0.0154352,
    -0.013374, -0.00994995, -0.00672058, -0.00353821, -0.00110779, 0.000678101, 0.00250427, -0.00564636, 0.00298096, 0.0090033, 0.00841248, 0.00201416, -0.00579407,
    -0.0119171, -0.0145624, -0.0128436, -0.00741211, 0.000543823, 0.00414917, 0.00414917, 0.00114136, -0.00778809, -0.021377, -0.0325623, -0.0386584, -0.038974,
    -0.0333679, -0.0221289, -0.0107825, -0.00453186, -0.00127563, -0.000261841, 0.000631104, 0.000537109, 0.000355835, 0.00114136, 0.00174561, 0.00104065, -0.000100708,
    -0.00128906, -0.00083252, 0.00146362, 0.00234314, 0.000443115, -0.00245056, -0.00782165, -0.0164423, -0.0250092, -0.0309644, -0.0314343, -0.0265063, -0.0176508,
    -0.00496155, 0.00805664, 0.0157843, 0.0171069, 0.0131055, 0.00613647, -0.00216187, -0.00804321, -0.0117157, 0
  }
};


/****************************************************************
 ** GxSimpleConvolver
 */

class CheckResample
{
private:
  float *vec;
  gx_resample::BufferResampler& resamp;
public:
  CheckResample(gx_resample::BufferResampler& resamp_): vec(0), resamp(resamp_) {}
  float *resample(int *count, float *impresp, unsigned int imprate, unsigned int samplerate)
  {
    if (imprate != samplerate)
      {
        vec = resamp.process(imprate, *count, impresp, samplerate, count);
        if (!vec)
          {
            if (samplerate)
              {
              }
            else
              {
              }
            return 0;
          }
        return vec;
      }
    return impresp;
  }
  ~CheckResample()
  {
    if (vec)
      {
        delete vec;
      }
  }
};

bool GxSimpleConvolver::configure(int count, float *impresp, unsigned int imprate)
{
  //printf("try configure()\n");
  CheckResample r(resamp);
  impresp = r.resample(&count, impresp, imprate, samplerate);
  if (!impresp)
    {
      printf("no impresp\n");
      return false;
    }
  cleanup();
  unsigned int bufsize = buffersize;
  if (bufsize < Convproc::MINPART)
    {
      bufsize = Convproc::MINPART;
    }
  if (Convproc::configure(1, 1, count, buffersize,
                          bufsize, Convproc::MAXPART))
    {
      printf("no configure\n");
      return false;
    }
  if (impdata_create(0, 0, 1, impresp, 0, count))
    {
      printf("no impdata_create()\n");
      return false;
    }
  //printf("configure()\n");

  return true;
}

bool GxSimpleConvolver::update(int count, float *impresp, unsigned int imprate)
{
  CheckResample r(resamp);
  impresp = r.resample(&count, impresp, imprate, samplerate);
  if (!impresp)
    {
      return false;
    }
  if (impdata_update(0, 0, 1, impresp, 0, count))
    {
      return false;
    }
  return true;
}

bool GxSimpleConvolver::compute(int count, float* input, float *output)
{
  // printf("try run\n");
  if (state() != Convproc::ST_PROC)
    {
      //printf("state() != ST_PROC\n");
      if (input != output)
        {
          memcpy(output, input, count * sizeof(float));
        }
      if (state() == Convproc::ST_WAIT)
        {
          //printf("state() == ST_WAIT\n");
          check_stop();
        }
      if (state() == ST_STOP)
        {
          //printf("state() == ST_STOP\n");
          ready = false;
        }
      return true;
    }
  memcpy(inpdata(0), input, count * sizeof(float));

  int flags = process(sync);

  memcpy(output, outdata(0), count * sizeof(float));
  //printf("run\n");
  return flags == 0;
}

void GxSimpleConvolver::run_static(uint32_t n_samples, GxSimpleConvolver *p, float *output)
{
  p->compute(n_samples, output, output);
}
