// generated from file '../src/LV2/faust/gxamp7_stereo.dsp' by dsp2cc:
// Code generated with Faust 0.9.46 (http://faust.grame.fr)

#include "valve.h"

namespace gxamp7_stereo {

class Dsp: public PluginLV2 {
private:
	uint32_t fSamplingFreq;
	int 	iConst0;
	double 	fConst1;
	double 	fConst2;
	double 	fConst3;
	double 	fConst4;
	double 	fConst5;
	double 	fConst6;
	double 	fConst7;
	double 	fConst8;
	double 	fConst9;
	double 	fConst10;
	double 	fConst11;
	double 	fConst12;
	double 	fConst13;
	double 	fConst14;
	double 	fConst15;
	double 	fConst16;
	double 	fConst17;
	double 	fConst18;
	double 	fConst19;
	double 	fRec5[2];
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT	*fslider0_;
	double 	fRec6[2];
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT	*fslider1_;
	double 	fRec8[2];
	double 	fConst20;
	double 	fConst21;
	double 	fConst22;
	double 	fConst23;
	double 	fConst24;
	double 	fConst25;
	double 	fConst26;
	double 	fConst27;
	double 	fConst28;
	double 	fVec0[2];
	double 	fConst29;
	double 	fRec21[2];
	double 	fRec20[2];
	double 	fRec19[3];
	double 	fRec18[3];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT	*fslider2_;
	double 	fRec22[2];
	double 	fConst30;
	double 	fConst31;
	double 	fConst32;
	double 	fConst33;
	double 	fRec23[2];
	double 	fRec17[3];
	double 	fConst34;
	double 	fConst35;
	double 	fRec16[2];
	double 	fConst36;
	double 	fConst37;
	double 	fConst38;
	double 	fConst39;
	double 	fRec26[2];
	double 	fRec25[3];
	double 	fRec24[2];
	double 	fRec15[2];
	double 	fConst40;
	double 	fRec14[2];
	double 	fRec27[2];
	double 	fRec13[3];
	double 	fRec12[2];
	double 	fConst41;
	double 	fConst42;
	double 	fConst43;
	double 	fConst44;
	double 	fRec30[2];
	double 	fRec29[3];
	double 	fRec28[2];
	double 	fRec11[2];
	double 	fRec31[2];
	double 	fRec10[3];
	double 	fRec9[2];
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT	*fslider3_;
	double 	fRec34[2];
	int 	IOTA;
	double 	fVec1[32768];
	int 	iConst45;
	double 	fRec33[2];
	double 	fConst46;
	double 	fRec32[2];
	double 	fConst47;
	double 	fConst48;
	double 	fConst49;
	double 	fConst50;
	double 	fConst51;
	double 	fConst52;
	double 	fConst53;
	double 	fConst54;
	double 	fConst55;
	double 	fConst56;
	double 	fConst57;
	double 	fConst58;
	double 	fConst59;
	double 	fConst60;
	double 	fConst61;
	double 	fConst62;
	double 	fConst63;
	double 	fConst64;
	double 	fConst65;
	double 	fConst66;
	double 	fConst67;
	double 	fConst68;
	double 	fConst69;
	double 	fConst70;
	double 	fConst71;
	double 	fConst72;
	double 	fConst73;
	double 	fConst74;
	double 	fConst75;
	double 	fConst76;
	double 	fRec42[3];
	double 	fVec2[2];
	double 	fConst77;
	double 	fRec41[2];
	double 	fConst78;
	double 	fRec40[2];
	double 	fRec39[3];
	double 	fVec3[2];
	double 	fConst79;
	double 	fConst80;
	double 	fRec38[2];
	double 	fRec37[3];
	double 	fConst81;
	double 	fRec36[3];
	double 	fConst82;
	double 	fConst83;
	double 	fConst84;
	double 	fConst85;
	double 	fRec46[2];
	double 	fRec45[3];
	double 	fVec4[2];
	double 	fConst86;
	double 	fConst87;
	double 	fRec44[2];
	double 	fRec43[3];
	double 	fConst88;
	double 	fConst89;
	double 	fConst90;
	double 	fConst91;
	double 	fRec50[2];
	double 	fRec49[3];
	double 	fConst92;
	double 	fRec48[3];
	double 	fRec47[3];
	double 	fRec52[2];
	double 	fRec51[3];
	double 	fVec5[2];
	double 	fRec35[2];
	double 	fVec6[2];
	double 	fRec7[2];
	double 	fRec4[3];
	double 	fRec3[2];
	double 	fRec55[2];
	double 	fRec54[3];
	double 	fRec53[2];
	double 	fVec7[3];
	double 	fConst93;
	double 	fConst94;
	double 	fRec2[3];
	double 	fConst95;
	double 	fConst96;
	double 	fRec1[3];
	double 	fConst97;
	double 	fConst98;
	double 	fRec0[3];
	double 	fVec8[2];
	double 	fRec74[2];
	double 	fRec73[2];
	double 	fRec72[3];
	double 	fRec71[3];
	double 	fRec75[2];
	double 	fRec70[3];
	double 	fRec69[2];
	double 	fRec78[2];
	double 	fRec77[3];
	double 	fRec76[2];
	double 	fRec68[2];
	double 	fRec67[2];
	double 	fRec79[2];
	double 	fRec66[3];
	double 	fRec65[2];
	double 	fRec82[2];
	double 	fRec81[3];
	double 	fRec80[2];
	double 	fRec64[2];
	double 	fRec83[2];
	double 	fRec63[3];
	double 	fRec62[2];
	double 	fRec86[2];
	double 	fVec9[32768];
	double 	fRec85[2];
	double 	fRec84[2];
	double 	fRec94[3];
	double 	fVec10[2];
	double 	fRec93[2];
	double 	fRec92[2];
	double 	fRec91[3];
	double 	fVec11[2];
	double 	fRec90[2];
	double 	fRec89[3];
	double 	fRec88[3];
	double 	fRec98[2];
	double 	fRec97[3];
	double 	fVec12[2];
	double 	fRec96[2];
	double 	fRec95[3];
	double 	fRec102[2];
	double 	fRec101[3];
	double 	fRec100[3];
	double 	fRec99[3];
	double 	fRec104[2];
	double 	fRec103[3];
	double 	fVec13[2];
	double 	fRec87[2];
	double 	fVec14[2];
	double 	fRec61[2];
	double 	fRec105[2];
	double 	fRec60[3];
	double 	fRec59[2];
	double 	fRec108[2];
	double 	fRec107[3];
	double 	fRec106[2];
	double 	fVec15[3];
	double 	fRec58[3];
	double 	fRec57[3];
	double 	fRec56[3];
	void connect(uint32_t port,void* data);
	void clear_state_f();
	void init(uint32_t samplingFreq);
	void compute(int count, float *input0, float *input1, float *output0, float *output1);

	static void clear_state_f_static(PluginLV2*);
	static void init_static(uint32_t samplingFreq, PluginLV2*);
	static void compute_static(int count, float *input0, float *input1, float *output0, float *output1, PluginLV2*);
	static void del_instance(PluginLV2 *p);
	static void connect_static(uint32_t port,void* data, PluginLV2 *p);
public:
	Dsp();
	~Dsp();
};



Dsp::Dsp()
	: PluginLV2() {
	version = PLUGINLV2_VERSION;
	id = "pre 12ax7/ push-pull 6V6";
	name = N_("pre 12ax7/ push-pull 6V6");
	mono_audio = 0;
	stereo_audio = compute_static;
	set_samplerate = init_static;
	activate_plugin = 0;
	connect_ports = connect_static;
	clear_state = clear_state_f_static;
	delete_instance = del_instance;
}

Dsp::~Dsp() {
}

inline void Dsp::clear_state_f()
{
	for (int i=0; i<2; i++) fRec5[i] = 0;
	for (int i=0; i<2; i++) fRec6[i] = 0;
	for (int i=0; i<2; i++) fRec8[i] = 0;
	for (int i=0; i<2; i++) fVec0[i] = 0;
	for (int i=0; i<2; i++) fRec21[i] = 0;
	for (int i=0; i<2; i++) fRec20[i] = 0;
	for (int i=0; i<3; i++) fRec19[i] = 0;
	for (int i=0; i<3; i++) fRec18[i] = 0;
	for (int i=0; i<2; i++) fRec22[i] = 0;
	for (int i=0; i<2; i++) fRec23[i] = 0;
	for (int i=0; i<3; i++) fRec17[i] = 0;
	for (int i=0; i<2; i++) fRec16[i] = 0;
	for (int i=0; i<2; i++) fRec26[i] = 0;
	for (int i=0; i<3; i++) fRec25[i] = 0;
	for (int i=0; i<2; i++) fRec24[i] = 0;
	for (int i=0; i<2; i++) fRec15[i] = 0;
	for (int i=0; i<2; i++) fRec14[i] = 0;
	for (int i=0; i<2; i++) fRec27[i] = 0;
	for (int i=0; i<3; i++) fRec13[i] = 0;
	for (int i=0; i<2; i++) fRec12[i] = 0;
	for (int i=0; i<2; i++) fRec30[i] = 0;
	for (int i=0; i<3; i++) fRec29[i] = 0;
	for (int i=0; i<2; i++) fRec28[i] = 0;
	for (int i=0; i<2; i++) fRec11[i] = 0;
	for (int i=0; i<2; i++) fRec31[i] = 0;
	for (int i=0; i<3; i++) fRec10[i] = 0;
	for (int i=0; i<2; i++) fRec9[i] = 0;
	for (int i=0; i<2; i++) fRec34[i] = 0;
	for (int i=0; i<32768; i++) fVec1[i] = 0;
	for (int i=0; i<2; i++) fRec33[i] = 0;
	for (int i=0; i<2; i++) fRec32[i] = 0;
	for (int i=0; i<3; i++) fRec42[i] = 0;
	for (int i=0; i<2; i++) fVec2[i] = 0;
	for (int i=0; i<2; i++) fRec41[i] = 0;
	for (int i=0; i<2; i++) fRec40[i] = 0;
	for (int i=0; i<3; i++) fRec39[i] = 0;
	for (int i=0; i<2; i++) fVec3[i] = 0;
	for (int i=0; i<2; i++) fRec38[i] = 0;
	for (int i=0; i<3; i++) fRec37[i] = 0;
	for (int i=0; i<3; i++) fRec36[i] = 0;
	for (int i=0; i<2; i++) fRec46[i] = 0;
	for (int i=0; i<3; i++) fRec45[i] = 0;
	for (int i=0; i<2; i++) fVec4[i] = 0;
	for (int i=0; i<2; i++) fRec44[i] = 0;
	for (int i=0; i<3; i++) fRec43[i] = 0;
	for (int i=0; i<2; i++) fRec50[i] = 0;
	for (int i=0; i<3; i++) fRec49[i] = 0;
	for (int i=0; i<3; i++) fRec48[i] = 0;
	for (int i=0; i<3; i++) fRec47[i] = 0;
	for (int i=0; i<2; i++) fRec52[i] = 0;
	for (int i=0; i<3; i++) fRec51[i] = 0;
	for (int i=0; i<2; i++) fVec5[i] = 0;
	for (int i=0; i<2; i++) fRec35[i] = 0;
	for (int i=0; i<2; i++) fVec6[i] = 0;
	for (int i=0; i<2; i++) fRec7[i] = 0;
	for (int i=0; i<3; i++) fRec4[i] = 0;
	for (int i=0; i<2; i++) fRec3[i] = 0;
	for (int i=0; i<2; i++) fRec55[i] = 0;
	for (int i=0; i<3; i++) fRec54[i] = 0;
	for (int i=0; i<2; i++) fRec53[i] = 0;
	for (int i=0; i<3; i++) fVec7[i] = 0;
	for (int i=0; i<3; i++) fRec2[i] = 0;
	for (int i=0; i<3; i++) fRec1[i] = 0;
	for (int i=0; i<3; i++) fRec0[i] = 0;
	for (int i=0; i<2; i++) fVec8[i] = 0;
	for (int i=0; i<2; i++) fRec74[i] = 0;
	for (int i=0; i<2; i++) fRec73[i] = 0;
	for (int i=0; i<3; i++) fRec72[i] = 0;
	for (int i=0; i<3; i++) fRec71[i] = 0;
	for (int i=0; i<2; i++) fRec75[i] = 0;
	for (int i=0; i<3; i++) fRec70[i] = 0;
	for (int i=0; i<2; i++) fRec69[i] = 0;
	for (int i=0; i<2; i++) fRec78[i] = 0;
	for (int i=0; i<3; i++) fRec77[i] = 0;
	for (int i=0; i<2; i++) fRec76[i] = 0;
	for (int i=0; i<2; i++) fRec68[i] = 0;
	for (int i=0; i<2; i++) fRec67[i] = 0;
	for (int i=0; i<2; i++) fRec79[i] = 0;
	for (int i=0; i<3; i++) fRec66[i] = 0;
	for (int i=0; i<2; i++) fRec65[i] = 0;
	for (int i=0; i<2; i++) fRec82[i] = 0;
	for (int i=0; i<3; i++) fRec81[i] = 0;
	for (int i=0; i<2; i++) fRec80[i] = 0;
	for (int i=0; i<2; i++) fRec64[i] = 0;
	for (int i=0; i<2; i++) fRec83[i] = 0;
	for (int i=0; i<3; i++) fRec63[i] = 0;
	for (int i=0; i<2; i++) fRec62[i] = 0;
	for (int i=0; i<2; i++) fRec86[i] = 0;
	for (int i=0; i<32768; i++) fVec9[i] = 0;
	for (int i=0; i<2; i++) fRec85[i] = 0;
	for (int i=0; i<2; i++) fRec84[i] = 0;
	for (int i=0; i<3; i++) fRec94[i] = 0;
	for (int i=0; i<2; i++) fVec10[i] = 0;
	for (int i=0; i<2; i++) fRec93[i] = 0;
	for (int i=0; i<2; i++) fRec92[i] = 0;
	for (int i=0; i<3; i++) fRec91[i] = 0;
	for (int i=0; i<2; i++) fVec11[i] = 0;
	for (int i=0; i<2; i++) fRec90[i] = 0;
	for (int i=0; i<3; i++) fRec89[i] = 0;
	for (int i=0; i<3; i++) fRec88[i] = 0;
	for (int i=0; i<2; i++) fRec98[i] = 0;
	for (int i=0; i<3; i++) fRec97[i] = 0;
	for (int i=0; i<2; i++) fVec12[i] = 0;
	for (int i=0; i<2; i++) fRec96[i] = 0;
	for (int i=0; i<3; i++) fRec95[i] = 0;
	for (int i=0; i<2; i++) fRec102[i] = 0;
	for (int i=0; i<3; i++) fRec101[i] = 0;
	for (int i=0; i<3; i++) fRec100[i] = 0;
	for (int i=0; i<3; i++) fRec99[i] = 0;
	for (int i=0; i<2; i++) fRec104[i] = 0;
	for (int i=0; i<3; i++) fRec103[i] = 0;
	for (int i=0; i<2; i++) fVec13[i] = 0;
	for (int i=0; i<2; i++) fRec87[i] = 0;
	for (int i=0; i<2; i++) fVec14[i] = 0;
	for (int i=0; i<2; i++) fRec61[i] = 0;
	for (int i=0; i<2; i++) fRec105[i] = 0;
	for (int i=0; i<3; i++) fRec60[i] = 0;
	for (int i=0; i<2; i++) fRec59[i] = 0;
	for (int i=0; i<2; i++) fRec108[i] = 0;
	for (int i=0; i<3; i++) fRec107[i] = 0;
	for (int i=0; i<2; i++) fRec106[i] = 0;
	for (int i=0; i<3; i++) fVec15[i] = 0;
	for (int i=0; i<3; i++) fRec58[i] = 0;
	for (int i=0; i<3; i++) fRec57[i] = 0;
	for (int i=0; i<3; i++) fRec56[i] = 0;
}

void Dsp::clear_state_f_static(PluginLV2 *p)
{
	static_cast<Dsp*>(p)->clear_state_f();
}

inline void Dsp::init(uint32_t samplingFreq)
{
	fSamplingFreq = samplingFreq;
	iConst0 = min(192000, max(1, fSamplingFreq));
	fConst1 = (31704.95306002819 / iConst0);
	fConst2 = (2 * cos(fConst1));
	fConst3 = (0.026178010471204185 * sin(fConst1));
	fConst4 = (fConst3 - 1);
	fConst5 = (49574.33207364693 / iConst0);
	fConst6 = (2 * cos(fConst5));
	fConst7 = (0.07042253521126761 * sin(fConst5));
	fConst8 = (fConst7 - 1);
	fConst9 = (60601.32228774711 / iConst0);
	fConst10 = (2 * cos(fConst9));
	fConst11 = (0.03546099290780142 * sin(fConst9));
	fConst12 = (fConst11 - 1);
	fConst13 = (1.0 / tan((97.38937226128358 / iConst0)));
	fConst14 = (1 + fConst13);
	fConst15 = (0 - ((1 - fConst13) / fConst14));
	fConst16 = (1.0 / tan((20517.741620594938 / iConst0)));
	fConst17 = (1 + fConst16);
	fConst18 = (0 - ((1 - fConst16) / fConst17));
	fConst19 = (0.0041 / fConst17);
	fConst20 = tan((37699.11184307752 / iConst0));
	fConst21 = (2 * (1 - (1.0 / faustpower<2>(fConst20))));
	fConst22 = (1.0 / fConst20);
	fConst23 = (1 + ((fConst22 - 0.7653668647301795) / fConst20));
	fConst24 = (1.0 / (1 + ((0.7653668647301795 + fConst22) / fConst20)));
	fConst25 = (1 + ((fConst22 - 1.8477590650225735) / fConst20));
	fConst26 = (1.0 / (1 + ((fConst22 + 1.8477590650225735) / fConst20)));
	fConst27 = (973.8937226128359 / iConst0);
	fConst28 = (1 - fConst27);
	fConst29 = (1.0 / (1 + fConst27));
	fConst30 = (1.0 / tan((270.1769682087222 / iConst0)));
	fConst31 = (1 + fConst30);
	fConst32 = (0 - ((1 - fConst30) / fConst31));
	fConst33 = (0.027 / fConst31);
	fConst34 = (0 - fConst13);
	fConst35 = (0.025 / fConst14);
	fConst36 = (1.0 / tan((414.6902302738527 / iConst0)));
	fConst37 = (1 + fConst36);
	fConst38 = (0 - ((1 - fConst36) / fConst37));
	fConst39 = (0.015 / fConst37);
	fConst40 = (1.0 / fConst17);
	fConst41 = (1.0 / tan((609.4689747964198 / iConst0)));
	fConst42 = (1 + fConst41);
	fConst43 = (0 - ((1 - fConst41) / fConst42));
	fConst44 = (0.0082 / fConst42);
	IOTA = 0;
	iConst45 = int((int((0.1111111111111111 * iConst0)) & 65535));
	fConst46 = (0.009000000000000008 / iConst0);
	fConst47 = tan((942.4777960769379 / iConst0));
	fConst48 = (1.0 / faustpower<2>(fConst47));
	fConst49 = (2 * (1 - fConst48));
	fConst50 = (1.0 / fConst47);
	fConst51 = (1 + ((fConst50 - 1.0) / fConst47));
	fConst52 = (1.0 / (1 + ((1.0 + fConst50) / fConst47)));
	fConst53 = tan((3769.9111843077517 / iConst0));
	fConst54 = (1.0 / faustpower<2>(fConst53));
	fConst55 = (2 * (1 - fConst54));
	fConst56 = (1.0 / fConst53);
	fConst57 = (1 + ((fConst56 - 1.0000000000000004) / fConst53));
	fConst58 = (1 + ((fConst56 + 1.0000000000000004) / fConst53));
	fConst59 = (1.0 / fConst58);
	fConst60 = (1 + fConst56);
	fConst61 = (0 - ((1 - fConst56) / fConst60));
	fConst62 = tan((10053.096491487338 / iConst0));
	fConst63 = (1.0 / faustpower<2>(fConst62));
	fConst64 = (2 * (1 - fConst63));
	fConst65 = (1.0 / fConst62);
	fConst66 = (1 + ((fConst65 - 1.0000000000000004) / fConst62));
	fConst67 = (1 + ((1.0000000000000004 + fConst65) / fConst62));
	fConst68 = (1.0 / fConst67);
	fConst69 = (1 + fConst65);
	fConst70 = (0 - ((1 - fConst65) / fConst69));
	fConst71 = tan((47123.8898038469 / iConst0));
	fConst72 = (2 * (1 - (1.0 / faustpower<2>(fConst71))));
	fConst73 = (1.0 / fConst71);
	fConst74 = (1 + ((fConst73 - 1.414213562373095) / fConst71));
	fConst75 = (1 + ((1.414213562373095 + fConst73) / fConst71));
	fConst76 = (1.0 / fConst75);
	fConst77 = (1.0 / (fConst14 * fConst75));
	fConst78 = (1.0 / fConst69);
	fConst79 = (0 - fConst56);
	fConst80 = (1.0 / (fConst60 * fConst67));
	fConst81 = (2 * (0 - fConst54));
	fConst82 = (1 + ((fConst50 - 1.0000000000000004) / fConst47));
	fConst83 = (1.0 / (1 + ((fConst50 + 1.0000000000000004) / fConst47)));
	fConst84 = (1 + fConst50);
	fConst85 = (0 - ((1 - fConst50) / fConst84));
	fConst86 = (0 - fConst50);
	fConst87 = (1.0 / (fConst84 * fConst58));
	fConst88 = (2 * (0 - fConst48));
	fConst89 = (1 + ((fConst56 - 1.0) / fConst53));
	fConst90 = (1.0 / (1 + ((1.0 + fConst56) / fConst53)));
	fConst91 = (0 - fConst65);
	fConst92 = (2 * (0 - fConst63));
	fConst93 = (0 - fConst10);
	fConst94 = (1.0 / (1 + fConst11));
	fConst95 = (0 - fConst6);
	fConst96 = (1.0 / (1 + fConst7));
	fConst97 = (0 - fConst2);
	fConst98 = (1.0 / (1 + fConst3));
	clear_state_f();
}

void Dsp::init_static(uint32_t samplingFreq, PluginLV2 *p)
{
	static_cast<Dsp*>(p)->init(samplingFreq);
}

inline void Dsp::compute(int count, float *input0, float *input1, float *output0, float *output1)
{
#define fslider0 (*fslider0_)
#define fslider1 (*fslider1_)
#define fslider2 (*fslider2_)
#define fslider3 (*fslider3_)
	double 	fSlow0 = (0.0010000000000000009 * pow(10,(0.05 * fslider0)));
	double 	fSlow1 = (1.000000000000001e-05 * fslider1);
	double 	fSlow2 = (0.0010000000000000009 * pow(10,(0.05 * fslider2)));
	double 	fSlow3 = fslider3;
	double 	fSlow4 = (1.25 * fSlow3);
	double 	fSlow5 = (2 * (fSlow3 - 0.5));
	double 	fSlow6 = (0.024937655860349125 * (1 - max(0, fSlow5)));
	double 	fSlow7 = pow(1e+01,(1.2 * fSlow3));
	double 	fSlow8 = (fConst83 * pow(1e+01,(2 * fSlow3)));
	double 	fSlow9 = pow(1e+01,(0.8 * fSlow3));
	double 	fSlow10 = (fConst83 * pow(1e+01,(0.9 * fSlow3)));
	double 	fSlow11 = (1 - max(0, (0 - fSlow5)));
	for (int i=0; i<count; i++) {
		fRec5[0] = ((fConst19 * (fRec4[1] + fRec4[2])) + (fConst18 * fRec5[1]));
		fRec6[0] = (fSlow0 + (0.999 * fRec6[1]));
		fRec8[0] = (fSlow1 + (0.999 * fRec8[1]));
		double fTemp0 = (1 - fRec8[0]);
		double fTemp1 = (double)input0[i];
		fVec0[0] = fTemp1;
		fRec21[0] = (fConst29 * ((fVec0[0] - fVec0[1]) + (fConst28 * fRec21[1])));
		fRec20[0] = (fConst29 * ((fRec21[0] - fRec21[1]) + (fConst28 * fRec20[1])));
		fRec19[0] = (fRec20[0] - (fConst26 * ((fConst25 * fRec19[2]) + (fConst21 * fRec19[1]))));
		fRec18[0] = ((fConst26 * (fRec19[2] + (fRec19[0] + (2 * fRec19[1])))) - (fConst24 * ((fConst23 * fRec18[2]) + (fConst21 * fRec18[1]))));
		fRec22[0] = (fSlow2 + (0.999 * fRec22[1]));
		fRec23[0] = ((fConst33 * (fRec17[1] + fRec17[2])) + (fConst32 * fRec23[1]));
		fRec17[0] = (Ftube(TUBE_TABLE_12AX7_68k, ((fRec23[0] + (fConst24 * (fRec22[0] * (fRec18[2] + (fRec18[0] + (2 * fRec18[1])))))) - 1.581656)) - 191.42014814814814);
		fRec16[0] = ((fConst35 * ((fConst34 * fRec17[1]) + (fConst13 * fRec17[0]))) + (fConst15 * fRec16[1]));
		fRec26[0] = ((fConst39 * (fRec25[1] + fRec25[2])) + (fConst38 * fRec26[1]));
		fRec25[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec26[0] + fRec15[1]) - 1.204285)) - 169.71433333333334);
		fRec24[0] = ((fConst35 * ((fConst34 * fRec25[1]) + (fConst13 * fRec25[0]))) + (fConst15 * fRec24[1]));
		fRec15[0] = ((0.6 * fRec24[0]) + fRec16[0]);
		fRec14[0] = ((fConst40 * (fRec15[0] + fRec15[1])) + (fConst18 * fRec14[1]));
		fRec27[0] = ((fConst39 * (fRec13[1] + fRec13[2])) + (fConst38 * fRec27[1]));
		fRec13[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec27[0] + fRec14[0]) - 1.204285)) - 169.71433333333334);
		fRec12[0] = ((fConst35 * ((fConst34 * fRec13[1]) + (fConst13 * fRec13[0]))) + (fConst15 * fRec12[1]));
		fRec30[0] = ((fConst44 * (fRec29[1] + fRec29[2])) + (fConst43 * fRec30[1]));
		fRec29[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec30[0] + fRec11[1]) - 0.840703)) - 147.47524390243905);
		fRec28[0] = ((fConst35 * ((fConst34 * fRec29[1]) + (fConst13 * fRec29[0]))) + (fConst15 * fRec28[1]));
		fRec11[0] = ((0.6 * fRec28[0]) + fRec12[0]);
		fRec31[0] = ((fConst44 * (fRec10[1] + fRec10[2])) + (fConst43 * fRec31[1]));
		fRec10[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec31[0] + fRec11[0]) - 0.840703)) - 147.47524390243905);
		fRec9[0] = ((fConst35 * ((fConst34 * fRec10[1]) + (fConst13 * fRec10[0]))) + (fConst15 * fRec9[1]));
		double fTemp2 = (fRec9[0] * fTemp0);
		double fTemp3 = (fRec9[0] * fRec8[0]);
		double fTemp4 = fabs(fTemp3);
		fRec34[0] = ((9.999999999998899e-05 * fTemp4) + (0.9999 * fRec34[1]));
		double fTemp5 = max(fRec34[0], fTemp4);
		fVec1[IOTA&32767] = fTemp5;
		fRec33[0] = ((fVec1[IOTA&32767] + fRec33[1]) - fVec1[(IOTA-iConst45)&32767]);
		fRec32[0] = ((fConst46 * fRec33[0]) + (0.999 * fRec32[1]));
		double fTemp6 = max(-1.0, min(-0.01, (fVec1[IOTA&32767] - (1.0 + (1.02 * fRec32[0])))));
		double fTemp7 = (0 - fTemp6);
		double fTemp8 = (40.1 * fTemp7);
		double fTemp9 = max(-600, fTemp8);
		double fTemp10 = (0 - fTemp9);
		double fTemp11 = (fTemp3 - fTemp6);
		double fTemp12 = (40.1 * fTemp11);
		double fTemp13 = max(-600, fTemp12);
		double fTemp14 = (0 - fTemp13);
		double fTemp15 = (((int((fabs(fTemp12) > 0.0001)))?((int((fTemp13 < -50)))?(exp(fTemp13) * fTemp14):(fTemp13 / (1 - exp(fTemp14)))):(1 + (fTemp11 * (20.05 + (134.00083333333336 * fTemp11))))) - ((int((fabs(fTemp8) > 0.0001)))?((int((fTemp9 < -50)))?(exp(fTemp9) * fTemp10):(fTemp9 / (1 - exp(fTemp10)))):(1 + (fTemp7 * (20.05 + (134.00083333333336 * fTemp7))))));
		double fTemp16 = (fConst49 * fRec36[1]);
		fRec42[0] = ((0.024937655860349125 * fTemp15) - (fConst76 * ((fConst74 * fRec42[2]) + (fConst72 * fRec42[1]))));
		double fTemp17 = (fRec42[2] + (fRec42[0] + (2 * fRec42[1])));
		fVec2[0] = fTemp17;
		fRec41[0] = ((fConst77 * ((fConst34 * fVec2[1]) + (fConst13 * fVec2[0]))) + (fConst15 * fRec41[1]));
		fRec40[0] = ((fConst78 * (fRec41[0] + fRec41[1])) + (fConst70 * fRec40[1]));
		fRec39[0] = (fRec40[0] - (fConst68 * ((fConst66 * fRec39[2]) + (fConst64 * fRec39[1]))));
		double fTemp18 = (fRec39[2] + (fRec39[0] + (2 * fRec39[1])));
		fVec3[0] = fTemp18;
		fRec38[0] = ((fConst80 * ((fConst79 * fVec3[1]) + (fConst56 * fVec3[0]))) + (fConst61 * fRec38[1]));
		fRec37[0] = (fRec38[0] - (fConst59 * ((fConst57 * fRec37[2]) + (fConst55 * fRec37[1]))));
		fRec36[0] = ((fConst59 * (((fConst54 * fRec37[0]) + (fConst81 * fRec37[1])) + (fConst54 * fRec37[2]))) - (fConst52 * ((fConst51 * fRec36[2]) + fTemp16)));
		double fTemp19 = max(-1, min(1, (fSlow7 * (fRec36[2] + (fConst52 * (fTemp16 + (fConst51 * fRec36[0])))))));
		fRec46[0] = ((fConst80 * (fVec3[0] + fVec3[1])) + (fConst61 * fRec46[1]));
		fRec45[0] = (fRec46[0] - (fConst59 * ((fConst57 * fRec45[2]) + (fConst55 * fRec45[1]))));
		double fTemp20 = (fRec45[2] + (fRec45[0] + (2 * fRec45[1])));
		fVec4[0] = fTemp20;
		fRec44[0] = ((fConst87 * ((fConst86 * fVec4[1]) + (fConst50 * fVec4[0]))) + (fConst85 * fRec44[1]));
		fRec43[0] = (fRec44[0] - (fConst83 * ((fConst82 * fRec43[2]) + (fConst49 * fRec43[1]))));
		double fTemp21 = max(-1, min(1, (fSlow8 * (((fConst48 * fRec43[0]) + (fConst88 * fRec43[1])) + (fConst48 * fRec43[2])))));
		double fTemp22 = (fConst49 * fRec47[1]);
		double fTemp23 = (fConst55 * fRec48[1]);
		fRec50[0] = ((fConst78 * ((fConst91 * fRec41[1]) + (fConst65 * fRec41[0]))) + (fConst70 * fRec50[1]));
		fRec49[0] = (fRec50[0] - (fConst68 * ((fConst66 * fRec49[2]) + (fConst64 * fRec49[1]))));
		fRec48[0] = ((fConst68 * (((fConst63 * fRec49[0]) + (fConst92 * fRec49[1])) + (fConst63 * fRec49[2]))) - (fConst90 * ((fConst89 * fRec48[2]) + fTemp23)));
		fRec47[0] = ((fRec48[2] + (fConst90 * (fTemp23 + (fConst89 * fRec48[0])))) - (fConst52 * ((fConst51 * fRec47[2]) + fTemp22)));
		double fTemp24 = max(-1, min(1, (fSlow9 * (fRec47[2] + (fConst52 * (fTemp22 + (fConst51 * fRec47[0])))))));
		fRec52[0] = ((fConst87 * (fVec4[0] + fVec4[1])) + (fConst85 * fRec52[1]));
		fRec51[0] = (fRec52[0] - (fConst83 * ((fConst82 * fRec51[2]) + (fConst49 * fRec51[1]))));
		double fTemp25 = max(-1, min(1, (fSlow10 * (fRec51[2] + (fRec51[0] + (2 * fRec51[1]))))));
		double fTemp26 = ((1.2589412 * (fTemp25 * (1 - (0.3333333333333333 * faustpower<2>(fTemp25))))) + (1.584893192 * ((fTemp24 * (1 - (0.3333333333333333 * faustpower<2>(fTemp24)))) + ((fTemp21 * (1 - (0.3333333333333333 * faustpower<2>(fTemp21)))) + (0.8413951417869425 * (fTemp19 * (1 - (0.3333333333333333 * faustpower<2>(fTemp19)))))))));
		fVec5[0] = fTemp26;
		fRec35[0] = ((fConst40 * (fVec5[0] + fVec5[1])) + (fConst18 * fRec35[1]));
		double fTemp27 = (((fSlow11 * fRec35[0]) + (fSlow6 * fTemp15)) + (fTemp2 * (1 + (fSlow4 * ((4 - (4 * fabs(fTemp2))) - 1)))));
		fVec6[0] = fTemp27;
		fRec7[0] = ((fConst40 * (fVec6[0] + fVec6[1])) + (fConst18 * fRec7[1]));
		double fTemp28 = (fRec7[0] * fRec6[0]);
		fRec4[0] = (Ftube(TUBE_TABLE_6V6_68k, ((fTemp28 + fRec5[0]) - 0.664541)) - 87.91682926829267);
		fRec3[0] = ((fConst35 * ((fConst34 * fRec4[1]) + (fConst13 * fRec4[0]))) + (fConst15 * fRec3[1]));
		fRec55[0] = ((fConst19 * (fRec54[1] + fRec54[2])) + (fConst18 * fRec55[1]));
		fRec54[0] = (Ftube(TUBE_TABLE_6V6_250k, ((fRec55[0] + fTemp28) - 0.659761)) - 89.08268292682925);
		fRec53[0] = ((fConst35 * ((fConst34 * fRec54[1]) + (fConst13 * fRec54[0]))) + (fConst15 * fRec53[1]));
		double fTemp29 = (min(0.7, fRec53[0]) + max(-0.75, fRec3[0]));
		fVec7[0] = fTemp29;
		fRec2[0] = (fConst94 * ((fVec7[2] + (fVec7[0] + (fConst93 * fVec7[1]))) + ((fConst12 * fRec2[2]) + (fConst10 * fRec2[1]))));
		fRec1[0] = (fConst96 * ((fRec2[2] + (fRec2[0] + (fConst95 * fRec2[1]))) + ((fConst8 * fRec1[2]) + (fConst6 * fRec1[1]))));
		fRec0[0] = (fConst98 * ((fRec1[2] + (fRec1[0] + (fConst97 * fRec1[1]))) + ((fConst4 * fRec0[2]) + (fConst2 * fRec0[1]))));
		output0[i] = (FAUSTFLOAT)fRec0[0];
		double fTemp30 = (double)input1[i];
		fVec8[0] = fTemp30;
		fRec74[0] = (fConst29 * ((fVec8[0] - fVec8[1]) + (fConst28 * fRec74[1])));
		fRec73[0] = (fConst29 * ((fRec74[0] - fRec74[1]) + (fConst28 * fRec73[1])));
		fRec72[0] = (fRec73[0] - (fConst26 * ((fConst25 * fRec72[2]) + (fConst21 * fRec72[1]))));
		fRec71[0] = ((fConst26 * (fRec72[2] + (fRec72[0] + (2 * fRec72[1])))) - (fConst24 * ((fConst23 * fRec71[2]) + (fConst21 * fRec71[1]))));
		fRec75[0] = ((fConst33 * (fRec70[1] + fRec70[2])) + (fConst32 * fRec75[1]));
		fRec70[0] = (Ftube(TUBE_TABLE_12AX7_68k, ((fRec75[0] + (fConst24 * (fRec22[0] * (fRec71[2] + (fRec71[0] + (2 * fRec71[1])))))) - 1.581656)) - 191.42014814814814);
		fRec69[0] = ((fConst35 * ((fConst34 * fRec70[1]) + (fConst13 * fRec70[0]))) + (fConst15 * fRec69[1]));
		fRec78[0] = ((fConst39 * (fRec77[1] + fRec77[2])) + (fConst38 * fRec78[1]));
		fRec77[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec78[0] + fRec68[1]) - 1.204285)) - 169.71433333333334);
		fRec76[0] = ((fConst35 * ((fConst13 * fRec77[0]) + (fConst34 * fRec77[1]))) + (fConst15 * fRec76[1]));
		fRec68[0] = ((0.6 * fRec76[0]) + fRec69[0]);
		fRec67[0] = ((fConst40 * (fRec68[0] + fRec68[1])) + (fConst18 * fRec67[1]));
		fRec79[0] = ((fConst39 * (fRec66[1] + fRec66[2])) + (fConst38 * fRec79[1]));
		fRec66[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec79[0] + fRec67[0]) - 1.204285)) - 169.71433333333334);
		fRec65[0] = ((fConst35 * ((fConst34 * fRec66[1]) + (fConst13 * fRec66[0]))) + (fConst15 * fRec65[1]));
		fRec82[0] = ((fConst44 * (fRec81[1] + fRec81[2])) + (fConst43 * fRec82[1]));
		fRec81[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec82[0] + fRec64[1]) - 0.840703)) - 147.47524390243905);
		fRec80[0] = ((fConst35 * ((fConst34 * fRec81[1]) + (fConst13 * fRec81[0]))) + (fConst15 * fRec80[1]));
		fRec64[0] = ((0.6 * fRec80[0]) + fRec65[0]);
		fRec83[0] = ((fConst44 * (fRec63[1] + fRec63[2])) + (fConst43 * fRec83[1]));
		fRec63[0] = (Ftube(TUBE_TABLE_12AX7_250k, ((fRec83[0] + fRec64[0]) - 0.840703)) - 147.47524390243905);
		fRec62[0] = ((fConst35 * ((fConst34 * fRec63[1]) + (fConst13 * fRec63[0]))) + (fConst15 * fRec62[1]));
		double fTemp31 = (fTemp0 * fRec62[0]);
		double fTemp32 = (fRec8[0] * fRec62[0]);
		double fTemp33 = fabs(fTemp32);
		fRec86[0] = ((9.999999999998899e-05 * fTemp33) + (0.9999 * fRec86[1]));
		double fTemp34 = max(fRec86[0], fTemp33);
		fVec9[IOTA&32767] = fTemp34;
		fRec85[0] = ((fVec9[IOTA&32767] + fRec85[1]) - fVec9[(IOTA-iConst45)&32767]);
		fRec84[0] = ((fConst46 * fRec85[0]) + (0.999 * fRec84[1]));
		double fTemp35 = max(-1.0, min(-0.01, (fVec9[IOTA&32767] - (1.0 + (1.02 * fRec84[0])))));
		double fTemp36 = (0 - fTemp35);
		double fTemp37 = (40.1 * fTemp36);
		double fTemp38 = max(-600, fTemp37);
		double fTemp39 = (0 - fTemp38);
		double fTemp40 = (fTemp32 - fTemp35);
		double fTemp41 = (40.1 * fTemp40);
		double fTemp42 = max(-600, fTemp41);
		double fTemp43 = (0 - fTemp42);
		double fTemp44 = (((int((fabs(fTemp41) > 0.0001)))?((int((fTemp42 < -50)))?(exp(fTemp42) * fTemp43):(fTemp42 / (1 - exp(fTemp43)))):(1 + (fTemp40 * (20.05 + (134.00083333333336 * fTemp40))))) - ((int((fabs(fTemp37) > 0.0001)))?((int((fTemp38 < -50)))?(exp(fTemp38) * fTemp39):(fTemp38 / (1 - exp(fTemp39)))):(1 + (fTemp36 * (20.05 + (134.00083333333336 * fTemp36))))));
		double fTemp45 = (fConst49 * fRec88[1]);
		fRec94[0] = ((0.024937655860349125 * fTemp44) - (fConst76 * ((fConst74 * fRec94[2]) + (fConst72 * fRec94[1]))));
		double fTemp46 = (fRec94[2] + (fRec94[0] + (2 * fRec94[1])));
		fVec10[0] = fTemp46;
		fRec93[0] = ((fConst77 * ((fConst34 * fVec10[1]) + (fConst13 * fVec10[0]))) + (fConst15 * fRec93[1]));
		fRec92[0] = ((fConst78 * (fRec93[0] + fRec93[1])) + (fConst70 * fRec92[1]));
		fRec91[0] = (fRec92[0] - (fConst68 * ((fConst66 * fRec91[2]) + (fConst64 * fRec91[1]))));
		double fTemp47 = (fRec91[2] + (fRec91[0] + (2 * fRec91[1])));
		fVec11[0] = fTemp47;
		fRec90[0] = ((fConst80 * ((fConst79 * fVec11[1]) + (fConst56 * fVec11[0]))) + (fConst61 * fRec90[1]));
		fRec89[0] = (fRec90[0] - (fConst59 * ((fConst57 * fRec89[2]) + (fConst55 * fRec89[1]))));
		fRec88[0] = ((fConst59 * (((fConst54 * fRec89[0]) + (fConst81 * fRec89[1])) + (fConst54 * fRec89[2]))) - (fConst52 * ((fConst51 * fRec88[2]) + fTemp45)));
		double fTemp48 = max(-1, min(1, (fSlow7 * (fRec88[2] + (fConst52 * (fTemp45 + (fConst51 * fRec88[0])))))));
		fRec98[0] = ((fConst80 * (fVec11[0] + fVec11[1])) + (fConst61 * fRec98[1]));
		fRec97[0] = (fRec98[0] - (fConst59 * ((fConst57 * fRec97[2]) + (fConst55 * fRec97[1]))));
		double fTemp49 = (fRec97[2] + (fRec97[0] + (2 * fRec97[1])));
		fVec12[0] = fTemp49;
		fRec96[0] = ((fConst87 * ((fConst86 * fVec12[1]) + (fConst50 * fVec12[0]))) + (fConst85 * fRec96[1]));
		fRec95[0] = (fRec96[0] - (fConst83 * ((fConst82 * fRec95[2]) + (fConst49 * fRec95[1]))));
		double fTemp50 = max(-1, min(1, (fSlow8 * (((fConst48 * fRec95[0]) + (fConst88 * fRec95[1])) + (fConst48 * fRec95[2])))));
		double fTemp51 = (fConst49 * fRec99[1]);
		double fTemp52 = (fConst55 * fRec100[1]);
		fRec102[0] = ((fConst78 * ((fConst91 * fRec93[1]) + (fConst65 * fRec93[0]))) + (fConst70 * fRec102[1]));
		fRec101[0] = (fRec102[0] - (fConst68 * ((fConst66 * fRec101[2]) + (fConst64 * fRec101[1]))));
		fRec100[0] = ((fConst68 * (((fConst63 * fRec101[0]) + (fConst92 * fRec101[1])) + (fConst63 * fRec101[2]))) - (fConst90 * ((fConst89 * fRec100[2]) + fTemp52)));
		fRec99[0] = ((fRec100[2] + (fConst90 * (fTemp52 + (fConst89 * fRec100[0])))) - (fConst52 * ((fConst51 * fRec99[2]) + fTemp51)));
		double fTemp53 = max(-1, min(1, (fSlow9 * (fRec99[2] + (fConst52 * (fTemp51 + (fConst51 * fRec99[0])))))));
		fRec104[0] = ((fConst87 * (fVec12[0] + fVec12[1])) + (fConst85 * fRec104[1]));
		fRec103[0] = (fRec104[0] - (fConst83 * ((fConst82 * fRec103[2]) + (fConst49 * fRec103[1]))));
		double fTemp54 = max(-1, min(1, (fSlow10 * (fRec103[2] + (fRec103[0] + (2 * fRec103[1]))))));
		double fTemp55 = ((1.2589412 * (fTemp54 * (1 - (0.3333333333333333 * faustpower<2>(fTemp54))))) + (1.584893192 * ((fTemp53 * (1 - (0.3333333333333333 * faustpower<2>(fTemp53)))) + ((fTemp50 * (1 - (0.3333333333333333 * faustpower<2>(fTemp50)))) + (0.8413951417869425 * (fTemp48 * (1 - (0.3333333333333333 * faustpower<2>(fTemp48)))))))));
		fVec13[0] = fTemp55;
		fRec87[0] = ((fConst40 * (fVec13[0] + fVec13[1])) + (fConst18 * fRec87[1]));
		double fTemp56 = (((fSlow11 * fRec87[0]) + (fSlow6 * fTemp44)) + (fTemp31 * (1 + (fSlow4 * ((4 - (4 * fabs(fTemp31))) - 1)))));
		fVec14[0] = fTemp56;
		fRec61[0] = ((fConst40 * (fVec14[0] + fVec14[1])) + (fConst18 * fRec61[1]));
		double fTemp57 = (fRec6[0] * fRec61[0]);
		fRec105[0] = ((fConst19 * (fRec60[1] + fRec60[2])) + (fConst18 * fRec105[1]));
		fRec60[0] = (Ftube(TUBE_TABLE_6V6_68k, ((fRec105[0] + fTemp57) - 0.664541)) - 87.91682926829267);
		fRec59[0] = ((fConst35 * ((fConst34 * fRec60[1]) + (fConst13 * fRec60[0]))) + (fConst15 * fRec59[1]));
		fRec108[0] = ((fConst19 * (fRec107[1] + fRec107[2])) + (fConst18 * fRec108[1]));
		fRec107[0] = (Ftube(TUBE_TABLE_6V6_250k, ((fRec108[0] + fTemp57) - 0.659761)) - 89.08268292682925);
		fRec106[0] = ((fConst35 * ((fConst34 * fRec107[1]) + (fConst13 * fRec107[0]))) + (fConst15 * fRec106[1]));
		double fTemp58 = (min(0.7, fRec106[0]) + max(-0.75, fRec59[0]));
		fVec15[0] = fTemp58;
		fRec58[0] = (fConst94 * ((fVec15[2] + (fVec15[0] + (fConst93 * fVec15[1]))) + ((fConst12 * fRec58[2]) + (fConst10 * fRec58[1]))));
		fRec57[0] = (fConst96 * ((fRec58[2] + (fRec58[0] + (fConst95 * fRec58[1]))) + ((fConst8 * fRec57[2]) + (fConst6 * fRec57[1]))));
		fRec56[0] = (fConst98 * ((fRec57[2] + (fRec57[0] + (fConst97 * fRec57[1]))) + ((fConst4 * fRec56[2]) + (fConst2 * fRec56[1]))));
		output1[i] = (FAUSTFLOAT)fRec56[0];
		// post processing
		fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
		fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
		fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
		fVec15[2] = fVec15[1]; fVec15[1] = fVec15[0];
		fRec106[1] = fRec106[0];
		fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
		fRec108[1] = fRec108[0];
		fRec59[1] = fRec59[0];
		fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
		fRec105[1] = fRec105[0];
		fRec61[1] = fRec61[0];
		fVec14[1] = fVec14[0];
		fRec87[1] = fRec87[0];
		fVec13[1] = fVec13[0];
		fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
		fRec104[1] = fRec104[0];
		fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
		fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
		fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
		fRec102[1] = fRec102[0];
		fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
		fRec96[1] = fRec96[0];
		fVec12[1] = fVec12[0];
		fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
		fRec98[1] = fRec98[0];
		fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
		fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
		fRec90[1] = fRec90[0];
		fVec11[1] = fVec11[0];
		fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
		fRec92[1] = fRec92[0];
		fRec93[1] = fRec93[0];
		fVec10[1] = fVec10[0];
		fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
		fRec84[1] = fRec84[0];
		fRec85[1] = fRec85[0];
		fRec86[1] = fRec86[0];
		fRec62[1] = fRec62[0];
		fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
		fRec83[1] = fRec83[0];
		fRec64[1] = fRec64[0];
		fRec80[1] = fRec80[0];
		fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
		fRec82[1] = fRec82[0];
		fRec65[1] = fRec65[0];
		fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
		fRec79[1] = fRec79[0];
		fRec67[1] = fRec67[0];
		fRec68[1] = fRec68[0];
		fRec76[1] = fRec76[0];
		fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
		fRec78[1] = fRec78[0];
		fRec69[1] = fRec69[0];
		fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
		fRec75[1] = fRec75[0];
		fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
		fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
		fRec73[1] = fRec73[0];
		fRec74[1] = fRec74[0];
		fVec8[1] = fVec8[0];
		fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
		fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
		fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
		fVec7[2] = fVec7[1]; fVec7[1] = fVec7[0];
		fRec53[1] = fRec53[0];
		fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
		fRec55[1] = fRec55[0];
		fRec3[1] = fRec3[0];
		fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
		fRec7[1] = fRec7[0];
		fVec6[1] = fVec6[0];
		fRec35[1] = fRec35[0];
		fVec5[1] = fVec5[0];
		fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
		fRec52[1] = fRec52[0];
		fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
		fRec48[2] = fRec48[1]; fRec48[1] = fRec48[0];
		fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
		fRec50[1] = fRec50[0];
		fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
		fRec44[1] = fRec44[0];
		fVec4[1] = fVec4[0];
		fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
		fRec46[1] = fRec46[0];
		fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
		fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
		fRec38[1] = fRec38[0];
		fVec3[1] = fVec3[0];
		fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
		fRec40[1] = fRec40[0];
		fRec41[1] = fRec41[0];
		fVec2[1] = fVec2[0];
		fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
		fRec32[1] = fRec32[0];
		fRec33[1] = fRec33[0];
		IOTA = IOTA+1;
		fRec34[1] = fRec34[0];
		fRec9[1] = fRec9[0];
		fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
		fRec31[1] = fRec31[0];
		fRec11[1] = fRec11[0];
		fRec28[1] = fRec28[0];
		fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
		fRec30[1] = fRec30[0];
		fRec12[1] = fRec12[0];
		fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
		fRec27[1] = fRec27[0];
		fRec14[1] = fRec14[0];
		fRec15[1] = fRec15[0];
		fRec24[1] = fRec24[0];
		fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
		fRec26[1] = fRec26[0];
		fRec16[1] = fRec16[0];
		fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
		fRec23[1] = fRec23[0];
		fRec22[1] = fRec22[0];
		fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
		fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
		fRec20[1] = fRec20[0];
		fRec21[1] = fRec21[0];
		fVec0[1] = fVec0[0];
		fRec8[1] = fRec8[0];
		fRec6[1] = fRec6[0];
		fRec5[1] = fRec5[0];
	}
#undef fslider0
#undef fslider1
#undef fslider2
#undef fslider3
}

void Dsp::compute_static(int count, float *input0, float *input1, float *output0, float *output1, PluginLV2 *p)
{
	static_cast<Dsp*>(p)->compute(count, input0, input1, output0, output1);
}


void Dsp::connect(uint32_t port,void* data)
{
	switch ((PortIndex)port)
	{
	case DRIVE: 
		fslider3_ = (float*)data; // , 0.35, 0.0, 1.0, 0.01 
		break;
	case PREGAIN: 
		fslider2_ = (float*)data; // , -6.0, -2e+01, 2e+01, 0.1 
		break;
	case WET_DRY: 
		fslider1_ = (float*)data; // , 1e+02, 0.0, 1e+02, 1.0 
		break;
	case GAIN1: 
		fslider0_ = (float*)data; // , -6.0, -2e+01, 2e+01, 0.1 
		break;
	default:
		break;
	}
}

void Dsp::connect_static(uint32_t port,void* data, PluginLV2 *p)
{
	static_cast<Dsp*>(p)->connect(port, data);
}


PluginLV2 *plugin() {
	return new Dsp();
}

void Dsp::del_instance(PluginLV2 *p)
{
	delete static_cast<Dsp*>(p);
}

} // end namespace gxamp7_stereo
