// generated by scripts/build-jcm800-preamp.py
// DO NOT MODIFY!
#include <iostream>
#include <cmath>

#include <float.h>
#include <Eigen/Core>

#include "gx_compiler.h"
#include "gx_plugin.h"

using namespace Eigen;

#define N_(x) (x)

#define creal double

static inline int sign(creal v) {
    return v < 0 ? -1 : 1;
}

static Matrix<creal, 7, 1> g_x;
creal g_v_data[8];
static Map<Matrix<creal, 8, 1> >g_v(g_v_data);
static int g_info;
static int g_nfev;


static creal x0_data[] = {-101.11169547,-4.28127308,-514.34759921,-230.31382521,-1133.65846006,-4.20085902,-20.3466745};

#define real realtype  // real conflicts with Eigen::real of new eigen library version
#ifndef _INTPP_H
#define _INTPP_H 1

typedef double real;
typedef double treal;
//typedef float real;
//typedef float treal;

template<typename M>
struct splinecoeffs {
    real *x0;
    real *xe;
    real *stepi; // 1/h
    int *k;
    int *n;
    int *nmap;
    M **map;
    treal **t;
    treal **c;
    int (*eval)(splinecoeffs *p, real *x, real *res);
};

template<typename M>
struct splinedata {
    splinecoeffs<M> *sc;
    int m;
    int n_input;
    int n_output;
    int n_state;
    const char *func_id;
    template<int K0> static int splev(splinecoeffs<M> *p, real *x, real *res);
    template<int K0> static int splev_pp(splinecoeffs<M> *p, real *x, real *res);
    template<int K0, int K1> static int splev(splinecoeffs<M> *p, real *x, real *res);
    template<int K0, int K1> static int splevgr(splinecoeffs<M> *p, real xi[2], real res[1], real grad[2]);
    template<int K0, int K1, int K2> static int splev(splinecoeffs<M> *p, real *x, real *res);
    template<int K0, int K1, int K2, int K3> static int splev(splinecoeffs<M> *p, real *x, real *res);
    union retval {
	char c[4];
	int i;
    };
};

template<typename M>
class SplineCalc {
  protected:
    splinedata<M> *sd;
    real *s0;
    real *temp;
  public:
    SplineCalc(splinedata<M> *sd_, real *s0_);
    ~SplineCalc();
    void reset();
    void calc(real *in, real *out);
};

//#define CHECK_BOUNDS

#ifdef CHECK_BOUNDS
template<typename M>
void report(splinedata<M> *sd, real *t, int i);
template<typename M>
static inline void check(splinedata<M> *sd, creal *t, int i) { if (i) report(sd, t, i); }
#else
#define check(sd, t, i) i
#endif

#endif /* !_INTPP_H */

#define NO_INTPP_INCLUDES
#include <cstdio>
#include <cstdlib>

#ifndef NO_INTPP_INCLUDES
#include "intpp.h"
#include "intpp_inst.cc"
#endif

#define always_inline inline __attribute__((always_inline))

/****************************************************************
 ** fpbspl evaluates the k non-zero b-splines of order k
 ** at t[0] <= x < t[1] using the stable recurrence relation
 ** of de boor and cox.
 **
 ** t: knot array
 ** K: order (> 0)
 ** h[K]: output array
 */
template<int K> static always_inline void fpbspl(treal *t, real x, real *h)
{
    real hh[K-1];
    h[0] = 1;
    for (int j = 0; j < K-1; j++) {
	for (int i = 0; i <= j; i++) {
	    hh[i] = h[i];
	}
	h[0] = 0;
	for (int i = 0; i <= j; i++) {
	    int li = i+1;
	    int lj = i-j;
	    real f = hh[i]/(t[li]-t[lj]);
	    h[i] = h[i]+f*(t[li]-x);
	    h[i+1] = f*(x-t[lj]);
	}
    }
}

template<> always_inline void fpbspl<2>(treal *t, real x, real *h)
{
    h[0] = (t[1]-x)/(t[1]-t[0]);
    h[1] = 1-h[0];
}


/****************************************************************
 ** search for knot interval
 ** n: len(map)
 ** k: order
 ** returns index l: t[l] <= x < t[l+1]
 */
static always_inline int find_index(int n, int k, real xi, real x0, real xe, real stepi, char* cl)
{
    int l;
    if (k % 2) {
	l = static_cast<int>((xi - x0) * stepi + 0.5);
    } else {
	l = static_cast<int>((xi - x0) * stepi);
    }
    if (l < 0) {
	*cl = -1;
	return 0;
    }
    if (l > n-2) {
	*cl = 1;
	return n-2;
    }
    return l;
}

template<int K, typename M>
static always_inline int forward(int i, splinecoeffs<M> *p, real *xi, int ll,
			  typename splinedata<M>::retval *cl, real *h)
{
    int l = p->map[i][find_index(p->nmap[i], K, xi[i], p->x0[i], p->xe[i], p->stepi[i], &cl->c[i])];
    fpbspl<K>(p->t[i]+l, xi[i], h);
    return ll*p->n[i] + l-K+1;
}

/****************************************************************
 ** evaluate the spline function at x
 **
 ** t[n+k]: knot array
 ** c[m][n]: coefficents
 ** k: order (k > 0), order = degree + 1
 ** x: function argument
 ** res: output array (size m)
 */
template<>
template<int K0>
always_inline int splinedata<unsigned short>::splev(splinecoeffs<unsigned short> *p, real xi[1], real *res)
{
    real h[K0];
    retval cl;
    cl.i = 0;
    int ll = 0;
    ll = forward<K0>(0, p, xi, ll, &cl, h);
    treal *c = p->c[0]+ll;
    real sp = 0;
    for (int j = 0; j < K0; j++) {
	sp += c[j]*h[j];
    }
    *res = sp;
    return cl.i;
}

template<>
template<>
always_inline int splinedata<unsigned short>::splev_pp<4>(splinecoeffs<unsigned short> *p, real xi[1], real *res)
{
    retval cl;
    cl.i = 0;
    int l = p->map[0][find_index(p->nmap[0], 4, xi[0], p->x0[0], p->xe[0], p->stepi[0], &cl.c[0])];
    treal x = xi[0] - p->t[0][l];
    treal *c = p->c[0] + (l-3)*4;
    *res = ((c[0] * x + c[1]) * x + c[2]) * x + c[3];
    return cl.i;
}

template<>
template<>
always_inline int splinedata<unsigned char>::splev_pp<4>(splinecoeffs<unsigned char> *p, real xi[1], real *res)
{
    retval cl;
    cl.i = 0;
    int l = p->map[0][find_index(p->nmap[0], 4, xi[0], p->x0[0], p->xe[0], p->stepi[0], &cl.c[0])];
    treal x = xi[0] - p->t[0][l];
    treal *c = p->c[0] + (l-3)*4;
    *res = ((c[0] * x + c[1]) * x + c[2]) * x + c[3];
    return cl.i;
}

template<>
template<>
always_inline int splinedata<unsigned short>::splev_pp<2>(splinecoeffs<unsigned short> *p, real xi[1], real *res)
{
    retval cl;
    cl.i = 0;
    int l = p->map[0][find_index(p->nmap[0], 2, xi[0], p->x0[0], p->xe[0], p->stepi[0], &cl.c[0])];
    treal x = xi[0] - p->t[0][l];
    treal *c = p->c[0] + (l-1)*2;
    *res = c[0] * x + c[1];
    return cl.i;
}

template<>
template<>
always_inline int splinedata<unsigned char>::splev_pp<2>(splinecoeffs<unsigned char> *p, real xi[1], real *res)
{
    retval cl;
    cl.i = 0;
    int l = p->map[0][find_index(p->nmap[0], 2, xi[0], p->x0[0], p->xe[0], p->stepi[0], &cl.c[0])];
    treal x = xi[0] - p->t[0][l];
    treal *c = p->c[0] + (l-1)*2;
    *res = c[0] * x + c[1];
    return cl.i;
}

/****************************************************************
 ** evaluate the X-dim spline function
 **
 ** t: array of pointers to knot arrays
 ** c[m][n[0]]...[n[X-1]]: coefficents
 ** k: orders (2 <= k[i] <= 5), order = degree + 1
 ** x: function arguments
 ** res[m]: output array
 */
template<typename M>
template<int K0, int K1>
int splinedata<M>::splev(splinecoeffs<M> *p, real xi[2], real *res)
{
    real h[2][6];
    retval cl;
    cl.i = 0;
    int ll = 0;
    ll = forward<K0>(0, p, xi, ll, &cl, h[0]);
    ll = forward<K1>(1, p, xi, ll, &cl, h[1]);
    treal *c = p->c[0]+ll;
    int j[2];
    real sp = 0;
    for (j[0] = 0; j[0] < K0; j[0]++) {
	for (j[1] = 0; j[1] < K1; j[1]++) {
	    sp += c[j[1]]*h[0][j[0]]*h[1][j[1]];
	}
	c += p->n[1];
    }
    *res = sp;
    return cl.i;
}

template<int K, int S>
static inline void deriv(real *t, real *wrk) {
    for (int i = 0; i < K-1; i++, wrk += S) {
	real fac = t[i+1] - t[i+1-(K-1)];
	if (fac > 0) {
	    wrk[0] = (K-1) * (wrk[S] - wrk[0]) / fac;
	}
    }
}

template<int K0, int K1, int S0, int S1>
static inline void deriv2d(real *t, real *c) {
    for (int i = 0; i < K0; i++) {
	deriv<K1, S1>(t, c);
	c += S0;
    }
}

template<int K0, int K1>
static inline void copy2d(real *c, real *wrk, int n)  {
    int j[2];
    for (j[0] = 0; j[0] < K0; j[0]++) {
	for (j[1] = 0; j[1] < K1; j[1]++) {
	    *wrk++ = *c++;
	}
	c += n - K1;
    }
}

template<int K0, int K1, int S>
static inline real eval2d(real *c, real *h0, real *h1) {
    int j[2];
    real sp = 0;
    for (j[0] = 0; j[0] < K0; j[0]++) {
	for (j[1] = 0; j[1] < K1; j[1]++) {
	    sp += *c++ * h0[j[0]] * h1[j[1]];
	}
	c += S;
    }
    return sp;
}

template<typename M>
template<int K0, int K1>
int splinedata<M>::splevgr(splinecoeffs<M> *p, real xi[2], real res[1], real grad[2])
{
    real h0[K0];
    real h1[K1];
    retval cl;
    cl.i = 0;
    int ll = 0;
//  ll = forward<K0>(0, p, xi, ll, &cl, h0);
    int l[2];
    l[0] = p->map[0][find_index(p->nmap[0], K0, xi[0], p->x0[0], p->xe[0], p->stepi[0], &cl.c[0])];
    fpbspl<K0>(p->t[0]+l[0], xi[0], h0);
    ll = l[0]-(K0-1);
//  ll = forward<K1>(1, p, xi, ll, &cl, h1);
    l[1] = p->map[1][find_index(p->nmap[1], K1, xi[1], p->x0[1], p->xe[1], p->stepi[1], &cl.c[1])];
    fpbspl<K1>(p->t[1]+l[1], xi[1], h1);
    ll = ll*p->n[1] + l[1]-(K1-1);
//    
    treal wrk[K0*K1];
    copy2d<K0, K1>(p->c[0]+ll, wrk, p->n[1]);
    res[0] = eval2d<K0, K1, 0>(wrk, h0, h1);

    deriv2d<K1, K0, 1, K1>(p->t[0]+l[0], wrk);
    real hx[6];
    fpbspl<K0-1>(p->t[0]+l[0], xi[0], hx);
    grad[0] = eval2d<K0-1, K1, 0>(wrk, hx, h1);

    copy2d<K0, K1>(p->c[0]+ll, wrk, p->n[1]);
    deriv2d<K0, K1, K1, 1>(p->t[1]+l[1], wrk);
    fpbspl<K1-1>(p->t[1]+l[1], xi[1], hx);
    grad[1] = eval2d<K0, K1-1, 1>(wrk, h0, hx);
    return cl.i;
}

template<typename M>
template<int K0, int K1, int K2>
int splinedata<M>::splev(splinecoeffs<M> *p, real xi[3], real *res)
{
    real h[3][6];
    retval cl;
    cl.i = 0;
    int ll = 0;
    ll = forward<K0>(0, p, xi, ll, &cl, h[0]);
    ll = forward<K1>(1, p, xi, ll, &cl, h[1]);
    ll = forward<K2>(2, p, xi, ll, &cl, h[2]);
    treal *cc = p->c[0];
    int lc = ll;
    int j[3];
    real sp = 0;
    for (j[0] = 0; j[0] < K0; j[0]++) {
	for (j[1] = 0; j[1] < K1; j[1]++) {
	    for (j[2] = 0; j[2] < K2; j[2]++) {
		sp += cc[lc]*h[0][j[0]]*h[1][j[1]]*h[2][j[2]];
		lc += 1;
	    }
	    lc += p->n[2]-K2;
	}
	lc += (p->n[1]-K1)*p->n[2];
    }
    *res = sp;
    return cl.i;
}

template<typename M>
template<int K0, int K1, int K2, int K3>
int splinedata<M>::splev(splinecoeffs<M> *p, real xi[4], real *res)
{
    real h[4][6];
    retval cl;
    cl.i = 0;
    int ll = 0;
    ll = forward<K0>(0, p, xi, ll, &cl, h[0]);
    ll = forward<K1>(1, p, xi, ll, &cl, h[1]);
    ll = forward<K2>(2, p, xi, ll, &cl, h[2]);
    ll = forward<K3>(3, p, xi, ll, &cl, h[3]);
    treal *cc = p->c[0];
    int lc = ll;
    int j[4];
    real sp = 0;
    for (j[0] = 0; j[0] < K0; j[0]++) {
	for (j[1] = 0; j[1] < K1; j[1]++) {
	    for (j[2] = 0; j[2] < K2; j[2]++) {
		for (j[3] = 0; j[3] < K3; j[3]++) {
		    sp += cc[lc]*h[0][j[0]]*h[1][j[1]]*h[2][j[2]]*h[3][j[3]];
		    lc += 1;
		}
		lc += p->n[3]-K3;
	    }
	    lc += (p->n[2]-K2)*p->n[3];
	}
	lc += (p->n[1]-K1)*p->n[2]*p->n[3];
    }
    *res = sp;
    return cl.i;
}

template<typename M>
SplineCalc<M>::SplineCalc(splinedata<M> *sd_, real *s0_)
    : sd(sd_),
      s0(s0_),
      temp(new real[sd->n_input+sd->n_state]) {
}

template<typename M>
SplineCalc<M>::~SplineCalc() {
    delete[] temp;
}

#ifdef CHECK_BOUNDS
void report(splinedata *sd, real *t, int i)
{
    printf("%s:", sd->func_id);
    splinedata::retval cl;
    cl.i = i;
    for (int n = 0; n < 4; n++) {
	if (cl.c[n] < 0) {
	    printf(" %d:L[%g]", n, t[n]);
	} else if (cl.c[n] > 0) {
	    printf(" %d:U[%g]", n, t[n]);
	}
    }
    printf("\n");
}
#endif

template<typename M>
void SplineCalc<M>::calc(real *in, real *out)
{
    for (int i = 0; i < sd->n_input; i++) {
	temp[i] = in[i];
    }
    real t[sd->m];
    for (int i = 0; i < sd->m; i++) {
	splinecoeffs<M> *p = &sd->sc[i];
	check(sd, temp, (*p->eval)(p, temp, &t[i]));
    }
    for (int i = 0; i < sd->n_output; i++) {
	out[i] = t[i];
    }
    for (int i = 0; i < sd->n_state; i++) {
	temp[i+sd->n_input] = t[i+sd->n_output];
    }
}

template<typename M>
void SplineCalc<M>::reset()
{
    for (int i = 0; i < sd->n_state; i++) {
	temp[i+sd->n_input] = s0[i];
    }
}

template int splinedata<unsigned char>::splev_pp<4>(splinecoeffs<unsigned char> *p, real xi[2], real *res);

#ifndef NO_INTPP_INCLUDES
#include "intpp.h"
#endif
namespace AmpData {
namespace nonlin_0 {
typedef unsigned char maptype;
real x0_0[1] = {-69.0853847623};
real xe_0[1] = {199.300333975};
real hi_0[1] = {1.31899715702};
int k_0[1] = {4};
int nmap_0[1] = {355};
int n_0[1] = {39};
treal t0_0[43] = {
  -165.37065673850253,-165.37065673850253,-165.37065673850253,-165.37065673850253,-68.32723301443515,-19.80552115240146,-7.675093186893038,-6.158789691204485,-5.400637943360209,-4.642486195515932,
  -3.884334447671656,-3.1261826998273796,-1.609879204138827,1.4227277872382786,4.455334778615384,10.520548761369595,16.585762744123805,28.71619070963223,40.846618675140654,46.91183265789486,
  48.42813615358342,49.94443964927197,52.97704664064908,59.04226062340329,65.1074746061575,71.17268858891171,77.23790257166593,80.27050956304303,83.30311655442014,86.33572354579724,
  89.36833053717434,95.43354451992855,101.49875850268276,113.6291864681912,125.75961443369961,137.89004239920803,150.02047036471646,174.2813262957333,198.54218222675013,222.803038157767,
  222.803038157767,222.803038157767,222.803038157767};
maptype a0_0[354] = {
  3,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,6,6,7,8,9,10,11,11,12,
  12,12,12,13,13,13,13,14,14,14,
  14,14,14,14,14,15,15,15,15,15,
  15,15,15,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,16,17,
  17,17,17,17,17,17,17,17,17,17,
  17,17,17,17,17,18,18,18,18,18,
  18,18,18,19,19,20,20,21,21,21,
  21,22,22,22,22,22,22,22,22,23,
  23,23,23,23,23,23,23,24,24,24,
  24,24,24,24,24,25,25,25,25,25,
  25,25,25,26,26,26,26,27,27,27,
  27,28,28,28,28,29,29,29,29,30,
  30,30,30,30,30,30,30,31,31,31,
  31,31,31,31,31,32,32,32,32,32,
  32,32,32,32,32,32,32,32,32,32,
  32,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,34,34,34,
  34,34,34,34,34,34,34,34,34,34,
  34,34,34,35,35,35,35,35,35,35,
  35,35,35,35,35,35,35,35,35,36,
  36,36,36,36,36,36,36,36,36,36,
  36,36,36,36,36,36,36,36,36,36,
  36,36,36,36,36,36,36,36,36,36,
  36,37,37,37,37,37,37,37,37,37,
  37,37,37,37,37,37,37,37,37,37,
  37,37,37,37,37,37,37,37,37,37,
  37,37,37,38};
treal c0_0[144] = {
  -1.687313772776689e-08,2.283373705475356e-06,-7.08366044752923e-05,0.00016094985078338717,1.0773629817786977e-07,-2.628907456735333e-06,-0.0001043683827097807,-0.0006301219260302773,-4.381306024590099e-06,1.3053741395070895e-05,
  0.0004014624058556874,0.00042387559967303355,0.006950938855583678,-0.0001463876099833439,-0.0012159344824169247,-0.0006058448953802129,0.03812445957094767,0.03147281104513342,0.04628443087972095,0.021446562439375347,
  -0.014607563376489345,0.11818518802313066,0.1597479044522024,0.09124148995790561,-0.015591328549306694,0.08496093890623632,0.31376349565149736,0.273921088008356,-0.009927806034998574,0.049499159933622625,
  0.4157046546022505,0.5538420679579876,-0.0036133082581469144,0.026918809440543246,0.47364107164998476,0.8931347516266808,-0.000778651177996193,0.010482193612057801,0.530352343320902,1.6606125602472928,
  -0.00017718770819429646,0.0033981645933519795,0.5724460146574462,3.3436478531993434,-5.9097225331432184e-05,0.0017861425453836498,0.5881679807318221,5.105961793468695,-2.087810077001614e-05,0.0007108305931171133,
  0.6033126571260186,8.725847190583156,1.627267114068698e-06,0.00033094014694615327,0.6096312195854745,12.406558431531888,-3.049089162938163e-05,0.0003901584864697066,0.6183784546141522,19.853247575487817,
  0.0002813674648304421,-0.0007194442070733064,0.6143840779002997,27.357428628634928,0.0022374857280663915,0.0044002174388717945,0.6367087551731513,31.120112155276622,-0.002443033100193481,0.01457833973193275,
  0.6654860077543673,32.10347317457987,-7.445119775031311e-05,0.0034652008422140883,0.6928454914015444,33.137553085725905,-7.304069648545577e-05,0.002787857173772091,0.7118085588583107,35.26847315403692,
  -9.203191801379752e-06,0.0014588348128710133,0.7375656544761487,39.67200394438987,9.846820431662181e-06,0.0012913768300719213,0.7542462765884597,44.19710994415298,5.5418873602575056e-05,0.0014705460489752833,
  0.7709979298537455,48.82147767717987,7.879789171630042e-05,0.0024789280302237636,0.7949523352634289,53.56420687147346,3.623340860820637e-05,0.0031958171421976505,0.8121616071475977,55.99998052402141,
  -2.4541762712211742e-05,0.003525462206997661,0.832544605892966,58.49334902949054,-6.885668707148721e-05,0.003302185643452348,0.8532501784989014,61.049867788864944,-6.210649668448895e-05,0.0026757398316041743,
  0.8713788770884892,63.66588906085697,-3.6046004211484534e-05,0.0015456722552722548,0.8969826447047795,69.03556317400621,-1.3518555506399928e-05,0.0008897920689745147,0.9117542569787002,74.52477263874422,
  -4.171710256781618e-06,0.0003978344776701797,0.9273737180492501,85.6915423860795,-2.2143254530544554e-06,0.0002460205853815936,0.9351839555118274,96.99207639840084,-1.2251267512633778e-06,0.000165438439180187,
  0.9401751295700325,108.36850678456476,-6.209590726413571e-07,0.00012085450376573368,0.9436479854914713,119.79539048389556,-2.850430075148461e-07,7.565950796450434e-05,0.9484155836184849,142.75136486236028,
  -1.892053585292073e-07,5.4913345946120045e-05,0.9515833928157122,165.80120074144568};
maptype *map_0[1] = {a0_0};
treal *t_0[1] = {t0_0};
treal *c_0[1] = {c0_0};
real x0_1[2] = {-69.0853847623};
real xe_1[2] = {175.039478044};
real hi_1[2] = {1.31899715702};
int k_1[2] = {4};
int nmap_1[2] = {323};
int n_1[2] = {48};
treal t0_1[52] = {
  -165.37065673850253,-165.37065673850253,-165.37065673850253,-165.37065673850253,-68.32723301443515,-19.80552115240146,-7.675093186893038,-6.158789691204485,-5.400637943360209,-4.642486195515932,
  -3.884334447671656,-3.1261826998273796,-1.609879204138827,1.4227277872382786,4.455334778615384,10.520548761369595,16.585762744123805,28.71619070963223,40.846618675140654,46.91183265789486,
  47.66998440573914,48.42813615358342,49.94443964927197,52.97704664064908,56.009653632026186,59.04226062340329,62.07486761478039,65.1074746061575,68.1400815975346,71.17268858891171,
  74.20529558028882,77.23790257166593,80.27050956304303,81.78681305873158,83.30311655442014,84.81942005010869,86.33572354579724,89.36833053717434,92.40093752855145,95.43354451992855,
  98.46615151130565,101.49875850268276,107.56397248543698,113.6291864681912,125.75961443369961,137.89004239920803,150.02047036471646,174.2813262957333,222.803038157767,222.803038157767,
  222.803038157767,222.803038157767};
maptype a0_1[322] = {
  3,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,6,6,7,8,9,10,11,11,12,
  12,12,12,13,13,13,13,14,14,14,
  14,14,14,14,14,15,15,15,15,15,
  15,15,15,16,16,16,16,16,16,16,
  16,16,16,16,16,16,16,16,16,17,
  17,17,17,17,17,17,17,17,17,17,
  17,17,17,17,17,18,18,18,18,18,
  18,18,18,19,20,21,21,22,22,22,
  22,23,23,23,23,24,24,24,24,25,
  25,25,25,26,26,26,26,27,27,27,
  27,28,28,28,28,29,29,29,29,30,
  30,30,30,31,31,31,31,32,32,33,
  33,34,34,35,35,36,36,36,36,37,
  37,37,37,38,38,38,38,39,39,39,
  39,40,40,40,40,41,41,41,41,41,
  41,41,41,42,42,42,42,42,42,42,
  42,43,43,43,43,43,43,43,43,43,
  43,43,43,43,43,43,43,44,44,44,
  44,44,44,44,44,44,44,44,44,44,
  44,44,44,45,45,45,45,45,45,45,
  45,45,45,45,45,45,45,45,45,46,
  46,46,46,46,46,46,46,46,46,46,
  46,46,46,46,46,46,46,46,46,46,
  46,46,46,46,46,46,46,46,46,46,
  46,47};
treal c0_1[180] = {
  1.0848462378919051e-07,-1.4680786786975855e-05,0.00045543884670363685,-0.0010348154737354217,-6.926827697869503e-07,1.6902371154785513e-05,0.0006710289998477539,0.00405132354098089,2.816929130461397e-05,-8.392809014740794e-05,
  -0.0025811736244579107,-0.0027252776398709816,-0.04469056478369588,0.0009411885868827196,0.007817763078865756,0.0038952357076172768,-0.24511851551036315,-0.20235219023055873,-0.2975824427835731,-0.13788914322372173,
  0.09391838283804027,-0.7598632831200871,-1.0270877857071727,-0.5866306557990766,0.10024296673359594,-0.5462501248099826,-2.0173199488122004,-1.7611561078806672,0.06383150306074588,-0.31825198349546846,
  -2.6727437332390394,-3.5608880936093428,0.02322940031526677,-0.17307008665637313,-3.0452404194791267,-5.742346215669763,0.005009270835764077,-0.06740162395400984,-3.409868514891856,-10.6767900741476,
  0.001128960069143665,-0.0218281746792911,-3.680467426066376,-21.497745509744234,0.00039550613669669146,-0.011557098083279123,-3.781711837655178,-32.82841735664184,8.06554393287383e-05,-0.00436061003160551,
  -3.8782561434869764,-56.102212462530694,7.077390930284866e-05,-0.0028930325363999677,-3.9222510378163444,-79.76708299519109,-8.396783859671018e-05,-0.0003174791104930711,-3.9611959180814065,-127.6450399857168,
  0.0010273344003710267,-0.0033731765630435635,-4.005965150874737,-175.89263710789274,0.12607956505980314,0.01531983234724072,-3.9335061271652734,-200.08454260790037,-0.10427536143801226,0.30208216019985,
  -3.6928672517464394,-203.00298830909125,-0.0022972441902747455,0.06491251760588299,-3.414629595318477,-205.67454827032435,-0.00293233186194396,0.05446255941739153,-3.233620748729995,-210.7109265060861,
  -0.0006268694165376332,0.027784729100684216,-2.9841970465482683,-220.09813400798072,-0.00047699613860641604,0.02208158337486667,-2.832972118700717,-228.90998625663465,-0.0001790534620243483,0.017741957900473577,
  -2.712202969007726,-237.31150291699691,-2.9047317929306845e-05,0.016112961558177638,-2.6095343035649115,-245.37837484668924,0.00015875508675274375,0.01584869425987813,-2.5126071626750868,-253.1446907926224,
  0.00040138020258675624,0.01729301961788728,-2.412101369463156,-260.61425739423066,0.0007316037290411973,0.02094470484358215,-2.2961413789269525,-267.75897957756035,0.001100295647553723,0.027600704594405844,
  -2.1489222308660456,-274.509247278861,0.0011320046972447255,0.03761099741446551,-1.9511607674343416,-280.7415610804092,0.0006991004467358369,0.04790977349187375,-1.6918098796758174,-286.28119600850243,
  0.00028231835426525346,0.051089918845542676,-1.5416963001125021,-288.7339029895074,-0.0002683850917298597,0.05237415976795101,-1.3848133560326656,-290.9531335164438,-0.000667354611752778,0.05115330000960898,
  -1.227834306872196,-292.93344907994117,-0.0010856376846556067,0.04811756361761515,-1.077309549334215,-294.67993464136686,-0.0011223717443362704,0.038240626319848,-0.8154190987671921,-297.5347464934975,
  -0.0008682804034788996,0.02802948912345312,-0.614447883354469,-299.6872073271606,-0.000610963791804485,0.020130029457255616,-0.4683989906052567,-301.31702366052343,-0.00044777282146238784,0.014571590257741969,
  -0.3631626160454453,-302.5694035438198,-0.0002492843938657271,0.010497833290995497,-0.28713690692175015,-303.54921079345064,-0.00012847355944323383,0.0059619437169250444,-0.18730483726029412,-304.96019598447833,
  -5.509644364347379e-05,0.0036242848294771243,-0.12916230983877808,-305.90558396093735,-1.903179046695117e-05,0.0016192545071585657,-0.06555593363140903,-307.0374193133446,-1.052160834411291e-05,0.0009266632172165628,
  -0.034672862069765435,-307.62834291879176,-4.1373579358544165e-06,0.0005437683809179004,-0.016835897490387882,-307.93136424506145,-1.366272427968013e-06,0.00024264084646746084,0.0022430634780306264,-308.07884150124875,
};
maptype *map_1[2] = {a0_1};
treal *t_1[2] = {t0_1};
treal *c_1[1] = {c0_1};
splinecoeffs<maptype> sc[2] = {
	{x0_0, xe_0, hi_0, k_0, n_0, nmap_0, map_0, t_0, c_0, splinedata<unsigned char>::splev_pp<4>},
	{x0_1, xe_1, hi_1, k_1, n_1, nmap_1, map_1, t_1, c_1, splinedata<unsigned char>::splev_pp<4>},
};
splinedata<maptype> sd = {
	sc,
	2, /* number of calculated values */
	2, /* number of input values */
	2, /* number of output values */
	0, /* number of state values */
	"nonlin_0",
};
}; /* ! namespace nonlin_0 */
} // namespace AmpData

// nonlin_0: 2420 bytes
// data size sum: 2436 bytes
#ifndef NO_INTPP_INCLUDES
#include "intpp.h"
#endif
namespace AmpData {
namespace nonlin_1 {
typedef unsigned char maptype;
real x0_0[1] = {-53.0405019418};
real xe_0[1] = {508.732893579};
real hi_0[1] = {5.01625748472};
int k_0[1] = {4};
int nmap_0[1] = {2819};
int n_0[1] = {100};
treal t0_0[104] = {
  -256.97740173533987,-256.97740173533987,-256.97740173533987,-256.97740173533987,-52.84115013360886,-27.324118683392488,-14.5656029582843,-8.186345095730207,-7.388937862910945,-6.9902342465013145,
  -6.591530630091683,-6.392178821886867,-6.192827013682052,-5.993475205477237,-5.794123397272422,-5.594771589067607,-5.395419780862791,-5.196067972657975,-4.99671616445316,-4.797364356248345,
  -4.5980125480435285,-4.3986607398387125,-4.199308931633897,-3.9999571234290823,-3.8006053152242667,-3.601253507019451,-3.401901698814636,-3.003198082405005,-2.604494465995374,-2.2057908495857435,
  -1.8070872331761123,-1.4083836167664814,-1.0096800003568505,-0.6109763839472196,-0.21227276753758884,0.5851344652816729,1.3825416981009346,2.1799489309201965,2.977356163739458,3.7747633965587197,
  4.572170629377982,5.369577862197243,6.166985095016505,6.964392327835767,7.761799560655028,9.356614026293553,10.951428491932075,12.546242957570598,14.141057423209123,15.735871888847646,
  17.33068635448617,20.520315285763218,21.317722518582478,21.71642613499211,21.91577794319692,22.11512975140174,22.51383336781137,22.912536984221,23.709944217040263,24.507351449859527,
  25.304758682678788,26.10216591549805,26.89957314831731,28.494387613955833,30.089202079594358,31.68401654523288,33.2788310108714,34.87364547650992,36.46845994214845,39.6580888734255,
  42.84771780470254,46.03734673597959,49.22697566725664,52.41660459853369,55.60623352981074,58.79586246108778,61.98549139236483,65.17512032364188,68.36474925491892,74.74400711747302,
  81.1232649800271,87.5025228425812,93.8817807051353,100.26103856768938,106.64029643024348,113.01955429279758,125.77807001790576,138.53658574301394,151.29510146812214,164.0536171932303,
  176.8121329183385,202.32916436855487,227.84619581877126,253.36322726898763,278.880258719204,304.3972901694204,355.4313530698531,406.4654159702859,457.49947887071863,508.53354177115136,
  559.5676046715841,559.5676046715841,559.5676046715841,559.5676046715841};
maptype a0_0[2818] = {
  3,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,7,7,7,7,8,
  8,9,9,10,11,12,13,14,15,16,
  17,18,19,20,21,22,23,24,25,26,
  26,27,27,28,28,29,29,30,30,31,
  31,32,32,33,33,34,34,34,34,35,
  35,35,35,36,36,36,36,37,37,37,
  37,38,38,38,38,39,39,39,39,40,
  40,40,40,41,41,41,41,42,42,42,
  42,43,43,43,43,44,44,44,44,44,
  44,44,44,45,45,45,45,45,45,45,
  45,46,46,46,46,46,46,46,46,47,
  47,47,47,47,47,47,47,48,48,48,
  48,48,48,48,48,49,49,49,49,49,
  49,49,49,50,50,50,50,50,50,50,
  50,50,50,50,50,50,50,50,50,51,
  51,51,51,52,52,53,54,55,55,56,
  56,57,57,57,57,58,58,58,58,59,
  59,59,59,60,60,60,60,61,61,61,
  61,62,62,62,62,62,62,62,62,63,
  63,63,63,63,63,63,63,64,64,64,
  64,64,64,64,64,65,65,65,65,65,
  65,65,65,66,66,66,66,66,66,66,
  66,67,67,67,67,67,67,67,67,68,
  68,68,68,68,68,68,68,68,68,68,
  68,68,68,68,68,69,69,69,69,69,
  69,69,69,69,69,69,69,69,69,69,
  69,70,70,70,70,70,70,70,70,70,
  70,70,70,70,70,70,70,71,71,71,
  71,71,71,71,71,71,71,71,71,71,
  71,71,71,72,72,72,72,72,72,72,
  72,72,72,72,72,72,72,72,72,73,
  73,73,73,73,73,73,73,73,73,73,
  73,73,73,73,73,74,74,74,74,74,
  74,74,74,74,74,74,74,74,74,74,
  74,75,75,75,75,75,75,75,75,75,
  75,75,75,75,75,75,75,76,76,76,
  76,76,76,76,76,76,76,76,76,76,
  76,76,76,77,77,77,77,77,77,77,
  77,77,77,77,77,77,77,77,77,78,
  78,78,78,78,78,78,78,78,78,78,
  78,78,78,78,78,78,78,78,78,78,
  78,78,78,78,78,78,78,78,78,78,
  78,79,79,79,79,79,79,79,79,79,
  79,79,79,79,79,79,79,79,79,79,
  79,79,79,79,79,79,79,79,79,79,
  79,79,79,80,80,80,80,80,80,80,
  80,80,80,80,80,80,80,80,80,80,
  80,80,80,80,80,80,80,80,80,80,
  80,80,80,80,80,81,81,81,81,81,
  81,81,81,81,81,81,81,81,81,81,
  81,81,81,81,81,81,81,81,81,81,
  81,81,81,81,81,81,81,82,82,82,
  82,82,82,82,82,82,82,82,82,82,
  82,82,82,82,82,82,82,82,82,82,
  82,82,82,82,82,82,82,82,82,83,
  83,83,83,83,83,83,83,83,83,83,
  83,83,83,83,83,83,83,83,83,83,
  83,83,83,83,83,83,83,83,83,83,
  83,84,84,84,84,84,84,84,84,84,
  84,84,84,84,84,84,84,84,84,84,
  84,84,84,84,84,84,84,84,84,84,
  84,84,84,85,85,85,85,85,85,85,
  85,85,85,85,85,85,85,85,85,85,
  85,85,85,85,85,85,85,85,85,85,
  85,85,85,85,85,85,85,85,85,85,
  85,85,85,85,85,85,85,85,85,85,
  85,85,85,85,85,85,85,85,85,85,
  85,85,85,85,85,85,85,86,86,86,
  86,86,86,86,86,86,86,86,86,86,
  86,86,86,86,86,86,86,86,86,86,
  86,86,86,86,86,86,86,86,86,86,
  86,86,86,86,86,86,86,86,86,86,
  86,86,86,86,86,86,86,86,86,86,
  86,86,86,86,86,86,86,86,86,86,
  86,87,87,87,87,87,87,87,87,87,
  87,87,87,87,87,87,87,87,87,87,
  87,87,87,87,87,87,87,87,87,87,
  87,87,87,87,87,87,87,87,87,87,
  87,87,87,87,87,87,87,87,87,87,
  87,87,87,87,87,87,87,87,87,87,
  87,87,87,87,87,88,88,88,88,88,
  88,88,88,88,88,88,88,88,88,88,
  88,88,88,88,88,88,88,88,88,88,
  88,88,88,88,88,88,88,88,88,88,
  88,88,88,88,88,88,88,88,88,88,
  88,88,88,88,88,88,88,88,88,88,
  88,88,88,88,88,88,88,88,88,89,
  89,89,89,89,89,89,89,89,89,89,
  89,89,89,89,89,89,89,89,89,89,
  89,89,89,89,89,89,89,89,89,89,
  89,89,89,89,89,89,89,89,89,89,
  89,89,89,89,89,89,89,89,89,89,
  89,89,89,89,89,89,89,89,89,89,
  89,89,89,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,90,90,90,90,90,90,90,90,90,
  90,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,91,
  91,91,91,91,91,91,91,91,91,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,92,92,92,
  92,92,92,92,92,92,92,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,93,93,93,93,93,
  93,93,93,93,93,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,94,94,94,94,94,94,94,
  94,94,94,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,95,
  95,95,95,95,95,95,95,95,95,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,96,96,96,96,96,
  96,96,96,96,96,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,99};
treal c0_0[388] = {
  -1.3862384134956063e-10,3.722132947957623e-08,-2.2854208885961457e-06,9.473238544839916e-06,1.9273795777556938e-08,-4.767312458762083e-08,-4.4190111644616785e-06,-8.522082322599936e-05,-3.773559667218187e-07,1.427757034475283e-06,
  3.079663336807937e-05,9.120507555156832e-05,7.96178809390008e-06,-1.3015749071675893e-05,-0.00011704894526097307,-6.716900818081095e-05,0.0036607419585390193,0.00013935514882232905,0.0006889026639487457,0.000723378297827976,
  0.004308320102710382,0.008896661494494227,0.0078942876912046,0.0032174596858706465,0.020865169632263075,0.014049889911297044,0.017043160720823066,0.008052254992380622,0.017439702032918093,0.039006945679448145,
  0.0381971129461044,0.018403288811621038,0.03402682804991452,0.04943685408389443,0.055828544353431424,0.027706298464123768,0.027894152762357186,0.06978678318156878,0.07959599202305649,0.04107007332324072,
  0.02853410444688662,0.08646903255612051,0.11074587143288325,0.05993207537421441,0.019356783537543547,0.10353400850709622,0.14862332123324926,0.08567190387336028,0.008931359415753985,0.11511043790481174,
  0.1922104869794039,0.11956814509876403,-0.0021593042187843174,0.12045188585258473,0.23917026216536919,0.16253103207396993,-0.010622310704918744,0.11916050225114791,0.28693742500212244,0.21497984495777211,
  -0.015784016991915648,0.11280777171213116,0.333180719862852,0.2768327591600882,-0.01791176053310008,0.10336805472790943,0.3762757617538444,0.34761099957765407,-0.017935191568908864,0.09265582917669395,
  0.41535347746155804,0.42658831239237305,-0.016746932000801372,0.08192959056740869,0.4501573965737417,0.5129299367701543,-0.01500001638795056,0.07191399703868018,0.4808263939437314,0.6057929263178378,
  -0.013142951007622148,0.06294315586856077,0.5077104112251432,0.7043856446924959,-0.011247394786875713,0.05508294272301043,0.5312391273947327,0.8079959415808853,-0.009967420539086237,0.04835637725793916,
  0.5518599428724115,0.9159993742094018,-0.0077149092834744235,0.0423953073351252,0.569951455293672,1.0278564228431295,-0.005560451934970495,0.03316742064034473,0.600078588203269,1.2613485121806938,
  -0.004149732652569764,0.026516503754310736,0.6238747847009372,1.5055220402554892,-0.003124726570506454,0.021552963507172652,0.6430402551369749,1.758215348798989,-0.0023996323360409833,0.01781544415531609,
  0.6587365816442977,2.0178259372855814,-0.0018761421370763296,0.014945217884016997,0.6717983760753536,2.2831465310360035,-0.001475016657956324,0.012701143919164519,0.6828210805068512,2.553251823845301,
  -0.0012341747736623295,0.010936860491789617,0.6922456383502054,2.8274206037455483,-0.000892774244902333,0.009460650655167492,0.700378199810253,3.105081794876537,-0.0006069963740662679,0.007324936734687867,
  0.7137631486020434,3.6691313998382413,-0.00044261673467783447,0.005872866837761342,0.7242871726280422,4.24264114860651,-0.0003290578512821036,0.004814029480964494,0.7328089810489837,4.823702866286824,
  -0.00025240846669087586,0.004026850149079551,0.7398587624104653,5.410944243791882,-0.0001978466578781028,0.0034230331381871785,0.7457993532273912,6.003345497587516,-0.00015825955378904463,0.002949740070243827,
  0.7508810486769109,6.600127544323379,-0.00012911685465281632,0.0025711481316814276,0.7552834448607126,7.2006808966087,-0.00010607608890187639,0.00226227199034434,0.7591376490252701,7.804518797084168,
  -9.210878720507017e-05,0.0020085144687857345,0.7625432050376071,8.411245348924497,-7.129304975164883e-05,0.001788169829415135,0.7655707085577238,9.020533243888613,-5.3781205883840804e-05,0.0014470722682848852,
  0.7707303194549785,10.245735388556032,-4.2023374277639176e-05,0.0011897591329157863,0.7749355763170631,11.478369629827734,-3.92866323228089e-05,0.000988700677337024,0.7784098155352666,12.71710371014842,
  -1.771108877694521e-05,0.000800736008733111,0.7812636350475555,13.960878279741799,-7.736650920474002e-05,0.0007159983069820701,0.7836825448747884,15.208813603365117,4.983046972999063e-05,0.00034584262287504415,
  0.7853759841499316,16.460149134167622,-0.002164986323042803,0.0008226647466047542,0.7891030890620347,18.970342625830963,0.02593331553704367,-0.004356462512242566,0.7862852131643946,19.599004504349423,
  0.03012934855634916,0.02666265755809152,0.7951787737975131,19.913450386227794,-0.05211718618217236,0.044681677902315385,0.809401396076716,20.073269015952793,-0.0023123983397124095,0.013512711990425912,
  0.8210025529292101,20.235987452012928,-0.003023423630473781,0.010746827248557024,0.8306749189562239,20.565325622219284,-0.0009831252662337983,0.0071304774423323345,0.8378026649881384,20.898035457445364,
  -0.0004939010293910482,0.004778623848145748,0.8472990684935429,21.57014085353871,-0.0003003006254766088,0.0035971030887458426,0.8539779337331393,22.24857136013695,-0.00020004843651702956,0.0028787174164202553,
  0.859141799842398,22.931674525171005,-0.00015078908908664962,0.002400157205841663,0.8633512126473357,23.618489434570904,-9.817867592052596e-05,0.0020394362750378965,0.8668913765997663,24.30838164006902,
  -6.16536643782315e-05,0.001569705957312022,0.8726472888404649,25.695701474939106,-4.442071556317486e-05,0.0012747274898819434,0.877183632448596,27.09115435078936,-3.354085118874147e-05,0.001062199090619447,
  0.8809105967643147,28.493161497105262,-2.6485625810942643e-05,0.0009017247866225454,0.8840426909731531,29.90061604028013,-2.282725590049382e-05,0.0007750058090982045,0.8867167651821872,31.31268615507683,
  -1.5162519220492491e-05,0.0006657900953353845,0.8890145673326108,32.72871346031294,4.637381177284258e-06,0.000520701665405203,0.8927990357793908,35.570621584778586,1.3873785664869293e-05,0.0005650762409104794,
  0.8962622644023166,38.42376718371065,8.19012525225942e-07,0.000697832925339491,0.9002904760165625,41.28871037724253,-6.989002706528923e-06,0.0007056699634761078,0.9047671294358597,44.16742906907367,
  -8.231509771126793e-06,0.0006387929877755531,0.9090554673622021,47.06025298262856,-7.475697412447635e-06,0.0005600266026333259,0.912879257011152,49.966034394533274,-6.316451307629847e-06,0.0004884925003886782,
  0.9162236438771476,52.88323545481741,-5.190671603836609e-06,0.00042805109288722145,0.919147077839037,55.810413717407314,-4.458895513484704e-06,0.000378382143926155,0.9217193006223204,58.74633826685362,
  -3.3345985319621647e-06,0.00033571547753209833,0.9239970070554797,61.68998568034642,-2.355124796176221e-06,0.00027189868582165534,0.9278731344844534,67.59719709742488,-1.7697022158350757e-06,0.00022682684070174562,
  0.9310546332207842,73.52679258572203,-1.3559716915957754e-06,0.00019295868037750967,0.9337325533067155,79.4750014569521,-1.0714011014920665e-06,0.00016700840115247028,0.9360288761418263,85.43902261437698,
  -8.552441259064329e-07,0.00014650416945054316,0.938028853672855,91.41671043799256,-7.266188530041477e-07,0.0001301367010067677,0.9397936171208237,97.40637833080439,-5.43364272168661e-07,0.00011623083391344745,
  0.9413652591550415,103.40667142328587,-3.875134581715246e-07,9.543326908066998e-05,0.9440657789415329,115.43488643434247,-2.955844901311264e-07,8.060097943135264e-05,0.9463117146693312,127.49449432298957,
  -2.276466110733726e-07,6.928732133504445e-05,0.9482240669116689,139.58053354255304,-1.8893654457366294e-07,6.057402273360282e-05,0.9498809049120525,151.68927099940205,-1.3662971082663968e-07,5.334237310863077e-05,
  0.9513343090397532,163.81780929573264,-9.405186135351435e-08,4.288321922403877e-05,0.9537897005056217,188.12549895525012,-7.014801541765867e-08,3.568344631171172e-05,0.9557944885810361,212.48974017815954,
  -5.2976696058877625e-08,3.0313538964963743e-05,0.9574785357299604,236.9008468866121,-4.338249595554745e-08,2.6258114906574942e-05,0.9589220764009913,261.3517143259631,-3.079907645120613e-08,2.2937137365515173e-05,
  0.9601773932004195,285.8369354787901,-2.079567046288374e-08,1.8221731350856903e-05,0.9622778974954015,334.89433445307634,-1.5313305482172437e-08,1.503786868747846e-05,0.9639752700158012,384.0479791582961,
  -1.1487956736179419e-08,1.2693368101906272e-05,0.9653905076984174,433.28068408628644,-9.203493259772766e-09,1.093453678189138e-05,0.9665963356824626,482.58001660244327};
maptype *map_0[1] = {a0_0};
treal *t_0[1] = {t0_0};
treal *c_0[1] = {c0_0};
real x0_1[2] = {-52.8909880857};
real xe_1[2] = {457.549316823};
real hi_1[2] = {20.0650299389};
int k_1[2] = {4};
int nmap_1[2] = {10243};
int n_1[2] = {240};
treal t0_1[244] = {
  -256.97740173533987,-256.97740173533987,-256.97740173533987,-256.97740173533987,-52.84115013360886,-27.324118683392488,-14.5656029582843,-11.375974027007253,-9.78115956136873,-8.983752328549468,
  -8.186345095730207,-7.787641479320576,-7.58828967111576,-7.388937862910945,-7.18958605470613,-6.9902342465013145,-6.890558342398907,-6.790882438296499,-6.691206534194091,-6.591530630091683,
  -6.491854725989276,-6.392178821886867,-6.29250291778446,-6.192827013682052,-6.093151109579645,-6.043313157528441,-5.993475205477237,-5.943637253426033,-5.8937993013748295,-5.843961349323626,
  -5.794123397272422,-5.744285445221218,-5.694447493170014,-5.644609541118811,-5.594771589067607,-5.544933637016403,-5.495095684965198,-5.445257732913994,-5.395419780862791,-5.3455818288115875,
  -5.295743876760383,-5.245905924709179,-5.196067972657975,-5.146230020606771,-5.096392068555567,-5.046554116504364,-4.99671616445316,-4.9468782124019555,-4.897040260350752,-4.847202308299549,
  -4.797364356248345,-4.74752640419714,-4.697688452145936,-4.647850500094732,-4.5980125480435285,-4.548174595992325,-4.498336643941121,-4.3986607398387125,-4.298984835736305,-4.199308931633897,
  -4.09963302753149,-3.9999571234290823,-3.9002812193266747,-3.8006053152242667,-3.7009294111218587,-3.601253507019451,-3.5015776029170436,-3.401901698814636,-3.3022257947122284,-3.2025498906098204,
  -3.1028739865074124,-3.003198082405005,-2.9035221783025973,-2.8038462742001897,-2.704170370097782,-2.604494465995374,-2.4051426577905586,-2.2057908495857435,-2.006439041380928,-1.8070872331761123,
  -1.6077354249712967,-1.4083836167664814,-1.209031808561666,-1.0096800003568505,-0.8103281921520351,-0.6109763839472196,-0.41162457574240424,-0.21227276753758884,0.18643084887204203,0.5851344652816729,
  0.9838380816913037,1.3825416981009346,1.7812453145105656,2.1799489309201965,2.578652547329827,2.977356163739458,3.376059780149089,3.7747633965587197,4.572170629377982,5.369577862197243,
  6.166985095016505,6.964392327835767,7.761799560655028,8.55920679347429,9.356614026293553,10.154021259112813,10.951428491932075,11.748835724751338,12.546242957570598,13.34365019038986,
  14.141057423209123,14.938464656028383,15.735871888847646,16.533279121666908,17.33068635448617,18.925500820124693,20.520315285763218,21.317722518582478,21.71642613499211,21.76626408704331,
  21.816102039094517,21.91577794319692,22.01545384729933,22.11512975140174,22.214805655504147,22.314481559606556,22.51383336781137,22.713185176016182,22.912536984221,23.111888792425816,
  23.311240600630633,23.51059240883545,23.709944217040263,23.909296025245077,24.108647833449893,24.507351449859527,24.906055066269158,25.304758682678788,25.703462299088418,26.10216591549805,
  26.50086953190768,26.89957314831731,27.29827676472694,27.69698038113657,28.095683997546203,28.494387613955833,28.893091230365464,29.291794846775097,29.690498463184728,30.089202079594358,
  30.48790569600399,30.88660931241362,31.28531292882325,31.68401654523288,32.08272016164251,32.48142377805214,32.880127394461766,33.2788310108714,33.677534627281034,34.07623824369066,
  34.47494186010029,34.87364547650992,35.272349092919555,35.67105270932919,36.06975632573882,36.46845994214845,36.867163558558076,37.26586717496771,37.66457079137734,38.06327440778698,
  38.46197802419661,38.86068164060624,39.259385257015865,39.6580888734255,40.05679248983513,40.45549610624476,40.854199722654386,41.25290333906402,41.65160695547365,42.05031057188328,
  42.44901418829291,42.84771780470254,43.246421421112174,43.6451250375218,44.04382865393143,44.44253227034106,44.841235886750695,45.23993950316033,45.63864311956996,46.03734673597959,
  46.436050352389216,46.83475396879885,47.233457585208484,47.63216120161812,48.03086481802775,48.42956843443738,48.828272050847005,49.22697566725664,50.0243829000759,50.82179013289516,
  51.61919736571443,52.41660459853369,53.21401183135295,54.011419064172216,54.80882629699148,55.60623352981074,56.40364076263,57.20104799544926,58.79586246108778,60.3906769267263,
  61.98549139236483,63.580305858003356,65.17512032364188,66.7699347892804,68.36474925491892,69.95956372055744,71.55437818619598,74.74400711747302,77.93363604875006,81.1232649800271,
  84.31289391130414,87.5025228425812,93.8817807051353,100.26103856768938,106.64029643024348,113.01955429279758,119.39881215535166,125.77807001790576,138.53658574301394,151.29510146812214,
  164.0536171932303,176.8121329183385,202.32916436855487,227.84619581877126,253.36322726898763,278.880258719204,304.3972901694204,355.4313530698531,406.4654159702859,457.49947887071863,
  559.5676046715841,559.5676046715841,559.5676046715841,559.5676046715841};
maptype a0_1[10242] = {
  3,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,
  8,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,10,10,10,
  10,10,10,10,10,11,11,11,11,12,
  12,12,12,13,13,13,13,14,14,14,
  14,15,15,16,16,17,17,18,18,19,
  19,20,20,21,21,22,22,23,23,24,
  25,26,27,28,29,30,31,32,33,34,
  35,36,37,38,39,40,41,42,43,44,
  45,46,47,48,49,50,51,52,53,54,
  55,56,56,57,57,58,58,59,59,60,
  60,61,61,62,62,63,63,64,64,65,
  65,66,66,67,67,68,68,69,69,70,
  70,71,71,72,72,73,73,74,74,75,
  75,75,75,76,76,76,76,77,77,77,
  77,78,78,78,78,79,79,79,79,80,
  80,80,80,81,81,81,81,82,82,82,
  82,83,83,83,83,84,84,84,84,85,
  85,85,85,86,86,86,86,87,87,87,
  87,87,87,87,87,88,88,88,88,88,
  88,88,88,89,89,89,89,89,89,89,
  89,90,90,90,90,90,90,90,90,91,
  91,91,91,91,91,91,91,92,92,92,
  92,92,92,92,92,93,93,93,93,93,
  93,93,93,94,94,94,94,94,94,94,
  94,95,95,95,95,95,95,95,95,96,
  96,96,96,96,96,96,96,97,97,97,
  97,97,97,97,97,97,97,97,97,97,
  97,97,97,98,98,98,98,98,98,98,
  98,98,98,98,98,98,98,98,98,99,
  99,99,99,99,99,99,99,99,99,99,
  99,99,99,99,99,100,100,100,100,100,
  100,100,100,100,100,100,100,100,100,100,
  100,101,101,101,101,101,101,101,101,101,
  101,101,101,101,101,101,101,102,102,102,
  102,102,102,102,102,102,102,102,102,102,
  102,102,102,103,103,103,103,103,103,103,
  103,103,103,103,103,103,103,103,103,104,
  104,104,104,104,104,104,104,104,104,104,
  104,104,104,104,104,105,105,105,105,105,
  105,105,105,105,105,105,105,105,105,105,
  105,106,106,106,106,106,106,106,106,106,
  106,106,106,106,106,106,106,107,107,107,
  107,107,107,107,107,107,107,107,107,107,
  107,107,107,108,108,108,108,108,108,108,
  108,108,108,108,108,108,108,108,108,109,
  109,109,109,109,109,109,109,109,109,109,
  109,109,109,109,109,110,110,110,110,110,
  110,110,110,110,110,110,110,110,110,110,
  110,111,111,111,111,111,111,111,111,111,
  111,111,111,111,111,111,111,112,112,112,
  112,112,112,112,112,112,112,112,112,112,
  112,112,112,113,113,113,113,113,113,113,
  113,113,113,113,113,113,113,113,113,114,
  114,114,114,114,114,114,114,114,114,114,
  114,114,114,114,114,114,114,114,114,114,
  114,114,114,114,114,114,114,114,114,114,
  114,115,115,115,115,115,115,115,115,115,
  115,115,115,115,115,115,115,115,115,115,
  115,115,115,115,115,115,115,115,115,115,
  115,115,115,116,116,116,116,116,116,116,
  116,116,116,116,116,116,116,116,116,117,
  117,117,117,117,117,117,117,118,119,120,
  120,121,121,122,122,123,123,124,124,125,
  125,125,125,126,126,126,126,127,127,127,
  127,128,128,128,128,129,129,129,129,130,
  130,130,130,131,131,131,131,132,132,132,
  132,133,133,133,133,134,134,134,134,134,
  134,134,134,135,135,135,135,135,135,135,
  135,136,136,136,136,136,136,136,136,137,
  137,137,137,137,137,137,137,138,138,138,
  138,138,138,138,138,139,139,139,139,139,
  139,139,139,140,140,140,140,140,140,140,
  140,141,141,141,141,141,141,141,141,142,
  142,142,142,142,142,142,142,143,143,143,
  143,143,143,143,143,144,144,144,144,144,
  144,144,144,145,145,145,145,145,145,145,
  145,146,146,146,146,146,146,146,146,147,
  147,147,147,147,147,147,147,148,148,148,
  148,148,148,148,148,149,149,149,149,149,
  149,149,149,150,150,150,150,150,150,150,
  150,151,151,151,151,151,151,151,151,152,
  152,152,152,152,152,152,152,153,153,153,
  153,153,153,153,153,154,154,154,154,154,
  154,154,154,155,155,155,155,155,155,155,
  155,156,156,156,156,156,156,156,156,157,
  157,157,157,157,157,157,157,158,158,158,
  158,158,158,158,158,159,159,159,159,159,
  159,159,159,160,160,160,160,160,160,160,
  160,161,161,161,161,161,161,161,161,162,
  162,162,162,162,162,162,162,163,163,163,
  163,163,163,163,163,164,164,164,164,164,
  164,164,164,165,165,165,165,165,165,165,
  165,166,166,166,166,166,166,166,166,167,
  167,167,167,167,167,167,167,168,168,168,
  168,168,168,168,168,169,169,169,169,169,
  169,169,169,170,170,170,170,170,170,170,
  170,171,171,171,171,171,171,171,171,172,
  172,172,172,172,172,172,172,173,173,173,
  173,173,173,173,173,174,174,174,174,174,
  174,174,174,175,175,175,175,175,175,175,
  175,176,176,176,176,176,176,176,176,177,
  177,177,177,177,177,177,177,178,178,178,
  178,178,178,178,178,179,179,179,179,179,
  179,179,179,180,180,180,180,180,180,180,
  180,181,181,181,181,181,181,181,181,182,
  182,182,182,182,182,182,182,183,183,183,
  183,183,183,183,183,184,184,184,184,184,
  184,184,184,185,185,185,185,185,185,185,
  185,186,186,186,186,186,186,186,186,187,
  187,187,187,187,187,187,187,188,188,188,
  188,188,188,188,188,189,189,189,189,189,
  189,189,189,190,190,190,190,190,190,190,
  190,191,191,191,191,191,191,191,191,192,
  192,192,192,192,192,192,192,193,193,193,
  193,193,193,193,193,194,194,194,194,194,
  194,194,194,195,195,195,195,195,195,195,
  195,196,196,196,196,196,196,196,196,197,
  197,197,197,197,197,197,197,197,197,197,
  197,197,197,197,197,198,198,198,198,198,
  198,198,198,198,198,198,198,198,198,198,
  198,199,199,199,199,199,199,199,199,199,
  199,199,199,199,199,199,199,200,200,200,
  200,200,200,200,200,200,200,200,200,200,
  200,200,200,201,201,201,201,201,201,201,
  201,201,201,201,201,201,201,201,201,202,
  202,202,202,202,202,202,202,202,202,202,
  202,202,202,202,202,203,203,203,203,203,
  203,203,203,203,203,203,203,203,203,203,
  203,204,204,204,204,204,204,204,204,204,
  204,204,204,204,204,204,204,205,205,205,
  205,205,205,205,205,205,205,205,205,205,
  205,205,205,206,206,206,206,206,206,206,
  206,206,206,206,206,206,206,206,206,207,
  207,207,207,207,207,207,207,207,207,207,
  207,207,207,207,207,207,207,207,207,207,
  207,207,207,207,207,207,207,207,207,207,
  207,208,208,208,208,208,208,208,208,208,
  208,208,208,208,208,208,208,208,208,208,
  208,208,208,208,208,208,208,208,208,208,
  208,208,208,209,209,209,209,209,209,209,
  209,209,209,209,209,209,209,209,209,209,
  209,209,209,209,209,209,209,209,209,209,
  209,209,209,209,209,210,210,210,210,210,
  210,210,210,210,210,210,210,210,210,210,
  210,210,210,210,210,210,210,210,210,210,
  210,210,210,210,210,210,210,211,211,211,
  211,211,211,211,211,211,211,211,211,211,
  211,211,211,211,211,211,211,211,211,211,
  211,211,211,211,211,211,211,211,211,212,
  212,212,212,212,212,212,212,212,212,212,
  212,212,212,212,212,212,212,212,212,212,
  212,212,212,212,212,212,212,212,212,212,
  212,213,213,213,213,213,213,213,213,213,
  213,213,213,213,213,213,213,213,213,213,
  213,213,213,213,213,213,213,213,213,213,
  213,213,213,214,214,214,214,214,214,214,
  214,214,214,214,214,214,214,214,214,214,
  214,214,214,214,214,214,214,214,214,214,
  214,214,214,214,214,215,215,215,215,215,
  215,215,215,215,215,215,215,215,215,215,
  215,215,215,215,215,215,215,215,215,215,
  215,215,215,215,215,215,215,216,216,216,
  216,216,216,216,216,216,216,216,216,216,
  216,216,216,216,216,216,216,216,216,216,
  216,216,216,216,216,216,216,216,216,216,
  216,216,216,216,216,216,216,216,216,216,
  216,216,216,216,216,216,216,216,216,216,
  216,216,216,216,216,216,216,216,216,216,
  216,217,217,217,217,217,217,217,217,217,
  217,217,217,217,217,217,217,217,217,217,
  217,217,217,217,217,217,217,217,217,217,
  217,217,217,217,217,217,217,217,217,217,
  217,217,217,217,217,217,217,217,217,217,
  217,217,217,217,217,217,217,217,217,217,
  217,217,217,217,217,218,218,218,218,218,
  218,218,218,218,218,218,218,218,218,218,
  218,218,218,218,218,218,218,218,218,218,
  218,218,218,218,218,218,218,218,218,218,
  218,218,218,218,218,218,218,218,218,218,
  218,218,218,218,218,218,218,218,218,218,
  218,218,218,218,218,218,218,218,218,219,
  219,219,219,219,219,219,219,219,219,219,
  219,219,219,219,219,219,219,219,219,219,
  219,219,219,219,219,219,219,219,219,219,
  219,219,219,219,219,219,219,219,219,219,
  219,219,219,219,219,219,219,219,219,219,
  219,219,219,219,219,219,219,219,219,219,
  219,219,219,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,222,222,222,222,222,222,222,
  222,222,222,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,223,223,223,223,223,
  223,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,224,
  224,224,224,224,224,224,224,224,224,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,225,225,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,226,226,226,226,226,
  226,226,226,226,226,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,227,227,227,227,227,227,227,227,227,
  227,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,228,228,228,
  228,228,228,228,228,228,228,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,229,229,229,229,229,229,229,
  229,229,229,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,230,230,230,230,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,231,231,231,231,231,231,231,231,231,
  231,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,232,232,
  232,232,232,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,234,234,234,
  234,234,234,234,234,234,234,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,235,235,235,235,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,236,236,236,236,236,236,236,
  236,236,236,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,238,238,238,238,238,238,238,238,238,
  238,239};
treal c0_1[948] = {
  -6.000889663757999e-11,1.6110480530571146e-08,-9.890644427973578e-07,4.098506201045802e-06,8.398943529649271e-09,-2.0639493136482745e-08,-1.913600099625139e-06,-3.69325999017366e-05,-1.7225215236396314e-07,6.223088254474727e-07,
  1.3439215175585078e-05,4.0344508267160746e-05,9.166915542878833e-06,-5.9707365584105926e-06,-5.479878416002962e-05,-4.462982992553721e-05,-0.0003747440844543871,8.174644052000811e-05,0.00018689759348376658,1.7308076330577165e-05,
  -0.002965384377498598,-0.0017111954198809544,-0.0024117712098209974,-0.0009967842679098312,-0.023491285017793902,-0.008805052272000837,-0.010797503181446412,-0.005511588450750965,-0.0906170278082392,-0.0650014140162236,
  -0.0696513132285075,-0.03163133536240505,-0.16027629075443697,-0.17338942410253483,-0.16469860250537943,-0.07547777251298601,-0.23546629095475183,-0.26924352922530836,-0.2529382821223229,-0.11647121461801987,
  -0.3495474457487798,-0.410065421844641,-0.3883597498478336,-0.1794604385815221,-0.5206861212258515,-0.6191141679348223,-0.5935285620378595,-0.2759464044291189,-0.69465777410052,-0.9305133272553975,
  -0.9024496052479283,-0.4229968209948007,-0.7901533620605208,-1.1382352522811034,-1.1086539902738004,-0.5228821427743768,-0.9311931828945205,-1.3745130045099216,-1.3591144445511945,-0.6454794198675877,
  -1.071376446711071,-1.6529655717069538,-1.6608811087862838,-0.7955287291408089,-1.2160651682187698,-1.9733368195868064,-2.022336078187212,-0.9785622340446014,-1.3536992708545326,-2.336974004855763,
  -2.451970206575919,-1.2009503562296135,-1.4736902093159658,-2.741767600971353,-2.958198367839254,-1.4699117882150567,-1.5633613156655521,-3.1824418129126584,-3.548699297260137,-1.7934725380060093,
  -1.6064056471111845,-3.6499301706457383,-4.22972215188528,-2.180359028144297,-1.6030083022248534,-4.1302899763387995,-5.00522262915173,-2.639814344673041,-1.580059970838324,-4.369961929050689,
  -5.428857776035681,-2.899721727082336,-1.5414545904555208,-4.606202788244691,-5.87621144281996,-3.1813346792286223,-1.48556749559249,-4.836671608149384,-6.346824964212991,-3.485824823181903,
  -1.4129206409281458,-5.058784532991878,-6.839994232899976,-3.814334906466988,-1.3240721253865857,-5.270035746456076,-7.354761482732599,-4.167966232117702,-1.2201844288209243,-5.468002875748134,
  -7.889923336709991,-4.547766215150413,-1.102840761717829,-5.6504373549197435,-8.444043627810197,-4.954716423896392,-0.9740295787052021,-5.815327329927561,-9.015473858403997,-5.389721462010732,
  -0.836054564626508,-5.960958248247452,-9.602379814390362,-5.853599024464447,-0.6914416973790916,-6.085959990159591,-10.20277354792087,-6.34707141928164,-0.5428327897837362,-6.189340104640138,
  -10.81454936545964,-6.87075878879128,-0.39287797585043244,-6.270501128287328,-11.435522335391898,-7.425174193823956,-0.244133387820636,-6.329241829454552,-12.063467720777336,-8.010720646757099,
  -0.09897088458859403,-6.36574315368346,-12.696159773657714,-8.627690100231652,0.04049532230301409,-6.3805406722852345,-13.33140845580737,-9.276264323214017,0.17246210492523925,-6.374486060491527,
  -13.967092866527327,-9.956517529629263,0.29546987514576356,-6.348700586143786,-14.601190432560859,-10.668420570670962,0.40841481922401185,-6.304523745733516,-15.23180122010609,-11.411846462333166,
  0.5105430829983253,-6.243460071201054,-15.857167035913763,-12.186576995509883,0.6014300856161177,-6.1671268061294215,-16.475685269633452,-12.992310166651508,0.6809486485112548,-6.07720467482216,
  -17.085917674880157,-13.828668170893254,0.7492296267341865,-5.975393416540651,-17.68659448064993,-14.695205714478309,0.8066188822212728,-5.863373205903091,-18.27661436392468,-15.591418426513929,
  0.8536323793511119,-5.742772506375874,-18.855040897432517,-16.51675117886362,0.8909165320419041,-5.615142637601508,-19.4210961277797,-17.47060615471546,0.9191979552958864,-5.481938271384919,
  -19.9741519140301,-18.452350538835965,0.9392895571229896,-5.344505440520115,-20.51371969662908,-19.46132373393218,0.9519081021902395,-5.204068636789838,-21.039439025702634,-20.496844036579922,
  0.9582195387577755,-5.061745185727508,-21.55106616275584,-21.558214731963183,0.9576929997797333,-4.9184780874461,-22.048460051704573,-22.64472958874456,0.9560226910286495,-4.775289714037713,
  -22.53157758659042,-23.75567775359955,0.9392525558146189,-4.632351074931666,-23.000435137146027,-24.89034805940307,0.9073707482433812,-4.351488531887706,-23.895907472266778,-27.22803080868985,
  0.8668240525049008,-4.080159532825995,-24.736339616190428,-29.65221169575458,0.8206117979144866,-3.8209551194325786,-25.52389036257108,-32.157507839175715,0.7715534726265934,-3.5755694508098927,
  -26.261145636325672,-34.738774309719155,0.7216087119963643,-3.344853580967669,-26.950945058789223,-37.391137972346435,0.6722171298051087,-3.129072578638435,-27.59623950184019,-40.110015248664084,
  0.6243596230447056,-2.928061028139085,-28.19998977036482,-42.89111789897274,0.578677327519521,-2.741360198403026,-28.76509445685779,-45.7304501896341,0.535553536013318,-2.568319640990806,
  -29.294341595343695,-48.624300114290826,0.4951842472110258,-2.4081742922986997,-29.790378127404473,-51.56922672442832,0.45763059724241045,-2.2601004796846125,-30.255692635900367,-54.56204511260251,
  0.42286481568741313,-2.1232562491094265,-30.692607680846287,-57.599810179149046,0.39078376076231475,-1.9968079506592034,-31.10327880491819,-60.67979999012013,0.36129639105056227,-1.8799527766716349,
  -31.4896984354036,-63.799499286825,0.3340987053545074,-1.7719151433909295,-31.853701671998415,-66.95658352159961,0.30958679598504196,-1.6720103718439663,-32.1969780613908,-70.14890365740992,
  0.28550100784038873,-1.5794353404800363,-32.52106885240659,-73.37447186958065,0.26948587815521324,-1.4940626272441184,-32.82742254109641,-76.63144821732031,0.2385070370537983,-1.4134788816002617,
  -33.117234369705756,-79.91812830356538,0.2049986962841268,-1.2708384542815188,-33.65235788440932,-86.5743925603237,0.17837680375466272,-1.1482378719299076,-34.134605124225025,-93.33193143245386,
  0.15550123101090776,-1.041558656819045,-34.57114502183176,-100.18094578762773,0.13625074963799308,-0.9485603020787473,-34.96787883483072,-107.11292683776529,0.11986406922438302,-0.8670748021499607,
  -35.329828975898856,-114.12045414128342,0.10588988178521168,-0.795389445333957,-35.66124422971063,-121.19702835592729,0.0939260173097738,-0.7320614271205287,-35.965744323078454,-128.3369326527019,
  0.08360129357161587,-0.675888462955988,-36.24642167952698,-135.53511764917576,0.07481171114203622,-0.6258902558306983,-36.50593362099965,-142.78710560365548,0.06671196494231361,-0.5811487061575146,
  -36.74655902064567,-150.0889103821903,0.06144571276613922,-0.5412512536370752,-36.97031148215973,-157.43697035888806,0.05205463389416193,-0.5045033117979845,-37.178784545717654,-164.82809194471426,
  0.04254758290295118,-0.44224019944453935,-37.55625460746239,-179.72830674101084,0.035583294249986845,-0.3913485739258537,-37.888609466003636,-194.7697251414157,0.02993826619204409,-0.3487870096221404,
  -38.18370419979768,-209.93600605517165,0.02544883915845759,-0.31297752462273387,-38.447552112812744,-225.21353430601698,0.021806021481544494,-0.28253789200502166,-38.68498626304992,-240.59085177320983,
  0.018821591272764924,-0.256455473132428,-38.89988486695101,-256.05822715241277,0.016389229597517627,-0.23394276361132205,-39.09540841742165,-271.60732635399614,0.014251730838674035,-0.21433942827922794,
  -39.27414014850046,-287.23095694144865,0.012887402231169664,-0.19729277840279993,-39.438259397935255,-302.9228677547424,0.010593038046695029,-0.18187801677572127,-39.58943616520985,-318.6775901636836,
  0.008378972134116069,-0.15653712130782854,-39.859290844013195,-350.3567704778331,0.006851165284820847,-0.13649276235782296,-40.092954992680376,-382.2361442616456,0.005663995897075099,-0.1201032561037538,
  -40.297566513714266,-414.289872811885,0.004759735159477599,-0.10655372221879489,-40.47830442759762,-446.4969406054092,0.004052479190738428,-0.09516738049138015,-40.639158293910995,-478.8399730297543,
  0.0034952380328750455,-0.08547295183874704,-40.78320220144991,-511.30438999634225,0.0030512498601989227,-0.07711156757522844,-40.91284827317506,-543.8777868762159,0.00269481048424009,-0.0698123014522443,
  -41.03000642901135,-576.549472934725,0.002407009632072917,-0.06336571733861363,-41.136203544447724,-609.3101211834801,0.002172869925662014,-0.0576076166683719,-41.23266855596316,-642.1514985921752,
  0.0019843989365892416,-0.05240963008427688,-41.320397104258575,-675.0662552804218,0.0018227252141582717,-0.04766250788977154,-41.40019535088277,-708.0477577266713,0.0017206752725588937,-0.04330214508213601,
  -41.47273122309347,-741.0899553496421,0.001526315720000266,-0.03918590835912086,-41.5385077935287,-774.1872727720911,0.0017834684195771882,-0.03553462277503901,-41.59809048549518,-807.3345221119702,
  0.00044432667312779,-0.03126817092321224,-41.6513595163627,-840.526831034957,0.0029181808827057104,-0.030205243014552383,-41.70037886126276,-873.7595832054002,-0.004009098154003393,-0.016243371759285787,
  -41.77445578401296,-940.3289386243689,0.055256851222792336,-0.03542467494979374,-41.85685673231588,-1007.0090210545632,-0.6033164886954401,0.09676196353382348,-41.80794593475745,-1040.3804891058835,
  197.90598617706527,-0.6248714341134718,-42.01850509053773,-1057.0723246689265,-140.84058670471595,28.96481571510207,-40.60610030632808,-1059.1434944799482,-5.967035016777334,7.907196493942005,
  -38.76847472982226,-1061.112710384547,-6.537575220755265,6.1228876636180365,-37.37001340678463,-1064.9043421025021,-2.2986117150702072,4.167971501319186,-36.344262715528956,-1068.5748735528916,
  -1.883476630646317,3.480622898679154,-35.5818821535965,-1072.1583871446317,-1.2833832626996131,2.917411190632865,-34.9441523212663,-1075.6723276575983,-0.8535049311394655,2.533644029574417,
  -34.400813463879985,-1079.1277032646497,-0.5347367458772453,2.0232007755712855,-33.49239821226548,-1085.89163958779,-0.3865098826661131,1.7033985639587257,-32.749493895475304,-1092.4922418554893,
  -0.2881995755365459,1.472244231963162,-32.116423761895675,-1098.9562797871763,-0.2254788398378005,1.2998849124419485,-31.563794804381246,-1105.3025215201355,-0.18104963790822215,1.165036069141179,
  -31.07240834962066,-1111.5449485245156,-0.1491853019562249,1.0567583510656846,-30.629489614493046,-1117.694423808869,-0.12407723048431235,0.9675372719580211,-30.22594262170218,-1123.7596530786043,
  -0.10881893540251884,0.8933322111957419,-29.854974925402324,-1129.7477813554203,-0.08578126283345085,0.828252456577496,-29.51177390890404,-1135.6647846617898,-0.065159721539751,0.7256485574418495,
  -28.89222795507193,-1147.3050096422558,-0.05199585666961842,0.6477103075754199,-28.34466480896132,-1158.7132228073465,-0.04211675996960568,0.585517499297939,-27.852972422503996,-1169.9146756640675,
  -0.03478391599876525,0.5351411857639246,-27.40616175200897,-1180.9293493067214,-0.029089867429337554,0.49353576645913505,-26.996024531040398,-1191.773421214585,-0.024584041981912937,0.45874106042427426,
  -26.616348316338893,-1202.4602228295919,-0.020932554474278987,0.4293358210918097,-26.262268852028647,-1213.0008917122534,-0.017915914386000518,0.4042981655830498,-25.9298959667794,-1223.4048307929675,
  -0.015376266987793466,0.38286874601209864,-25.616049672408415,-1233.6800405086753,-0.01319966347140279,0.36447702624735867,-25.31808021030012,-1243.8333641281502,-0.011301052102289703,0.3486887655630435,
  -25.033738430005677,-1253.8706719248078,-0.009615640065383879,0.33517145453579383,-24.761080887133584,-1263.7970010659806,-0.00809286081918614,0.3236700831313081,-24.498398383424824,-1273.6166626113604,
  -0.006692346499850827,0.3139901245041801,-24.24416095260004,-1283.333323489778,-0.0053811052459589994,0.30598533624890956,-23.996974494312557,-1292.9500689913477,-0.004131529915207193,0.2995489378833755,
  -23.755545789356034,-1302.4694497296805,-0.0029199695354737766,0.29460717012788246,-23.518653600380077,-1311.8935159317919,-0.0017257023984234697,0.2911145628870844,-23.285124227217292,-1321.2238411390697,
  -0.0005302055124533917,0.2890504315257898,-23.053810345830605,-1330.4615368491977,0.000683343051870725,0.2884162469600233,-22.823572292762254,-1339.607259231759,0.0019303659147730289,0.2892336009981111,
  -22.593261209362872,-1348.6612087684007,0.003225004477969138,0.2915425326117527,-22.36170366456822,-1357.6231234768575,0.004580052487586785,0.2953999954566634,-22.12768755600273,-1366.4922662625993,
  0.006006690402901319,0.30087824592710377,-21.889949264776646,-1375.2674068970164,0.007513995446381552,0.30806291348597303,-21.647162222337982,-1383.9467991472566,0.009108191130090105,0.3170504849604464,
  -21.39792724971128,-1392.5281536854257,0.010791599018582052,0.32794489118799763,-21.140765260673405,-1401.0086075934798,0.012561265186396655,0.3408528398546516,-20.874113186660143,-1409.3846915678876,
  0.014407232983707096,0.3558775054241419,-20.596324278335153,-1417.6522963285056,0.01631053450773866,0.37311015310332246,-20.305674262562263,-1425.8066402602396,0.01824080100727132,0.3926193603847507,
  -20.000375136342985,-1433.8422409683074,0.020154351248501224,0.414437380368173,-19.678598695157028,-1441.752894198036,0.02199079509382341,0.4385442185556754,-19.33851184693522,-1449.5316644244053,
  0.02367450572463418,0.46484764715056726,-18.978326243043092,-1457.170892267886,0.025110315250033127,0.49316498029793393,-18.59636314391328,-1464.6622247820426,0.026189762291401342,0.5231997007960565,
  -18.19113486997008,-1471.9966747731983,0.02679301672959213,0.554525559611527,-17.76144191114957,-1479.1647159144356,0.026798359557637295,0.5865729776053631,-17.306481797681464,-1486.1564189831363,
  0.0260933617064293,0.6186267862137901,-16.82596429335073,-1492.9616330665074,0.024589379441023667,0.6498373392437041,-16.32022305924494,-1499.5702123457195,0.022237028402770777,0.6792489627689181,
  -15.790311544112013,-1505.9722847156881,0.019040226905259878,0.705846913696083,-15.238068809091356,-1512.158553133421,0.015065612122210486,0.7286211356692444,-14.666141210185327,-1518.120614856115,
  0.010444407846060768,0.7466412777788948,-14.07794875079035,-1523.8512785924058,0.005364976678863798,0.7591339473173393,-13.477590723044461,-1529.3448561945552,5.6266345699659965e-05,0.7655510541287882,
  -12.869693299082373,-1534.5974049210934,-0.005235417223010359,0.765618354915326,-12.259210518360682,-1539.606899118379,-0.010272158213468253,0.7593562155746435,-11.651197642173603,-1544.3733163103784,
  -0.014847962080476429,0.7470695756905186,-11.05058023134345,-1548.898631255516,-0.01880607883908904,0.7293097671571217,-10.461942448157627,-1553.186721020656,-0.022047875913468504,0.7068156122262332,
  -9.889354065779827,-1557.2431928177302,-0.024533111419830944,0.680443908643681,-9.336248677910296,-1561.0751527940758,-0.026273185380320443,0.6510995879090797,-8.805357470427982,-1564.6909373322471,
  -0.027319973394216362,0.6196739458318763,-8.298695466887812,-1568.0998286189658,-0.027752796427674118,0.5869962292544098,-7.817591704267273,-1571.3117738415358,-0.02766632679027793,0.5538008083508282,
  -7.362751799784676,-1574.3371232855832,-0.027158759541075314,0.5207088147186646,-6.934340927199917,-1577.1863978303356,-0.026328861444357036,0.48822392777998547,-6.5320757940516145,-1579.8700916960559,
  -0.025252320044752332,0.4567316909585455,-6.155318571513959,-1582.3985123459054,-0.024047643908514382,0.42652711698481677,-5.803160090561279,-1584.7816564476977,-0.022618383325313535,0.3977634692074499,
  -5.474512452874011,-1587.0291187947387,-0.02161139998220459,0.3707093755200248,-5.168119550568573,-1589.1500299549382,-0.019317184335935482,0.3448597455342846,-4.882819554213157,-1591.153017977064,
  -0.01658142454106024,0.298648758012751,-4.369681219104052,-1594.8371262229298,-0.014215479094399743,0.2589823144342863,-3.9250221686900235,-1598.1400507544918,-0.012111750272121203,0.22497573689068998,
  -3.539110518182369,-1601.11242355604,-0.0103102509361449,0.1960017450834197,-3.2034200292021744,-1603.7976243101966,-0.008778866696458332,0.1713373390774292,-2.91050118659511,-1606.2326529648537,
  -0.007484044464702448,0.15033634367829302,-2.653996265358087,-1608.4490126129285,-0.006409283024824768,0.13243285011760897,-2.4285140650067634,-1610.4735305146028,-0.005456393027609998,0.11710042419406604,
  -2.2295344272415614,-1612.3290864188393,-0.004845719918944588,0.10404752239810365,-2.0531894551058376,-1614.0352406195018,-0.003826153455711278,0.09245548606335532,-1.8964965348879257,-1615.6087662253183,
  -0.0028572901803968417,0.07414947142659184,-1.630792538635867,-1618.4136920239544,-0.0022086888258680626,0.06047892828992049,-1.4160852192822082,-1620.837499366801,-0.0017199914003618068,0.049911581621154805,
  -1.2400328372068121,-1622.9510275595774,-0.0013608194807158368,0.04168238012294217,-1.0939574620521844,-1624.808679901514,-0.001088675782802893,0.03517161634403722,-0.9713895967445139,-1626.4528426357103,
  -0.0008831174527583248,0.029962908683624036,-0.8675121140179054,-1627.9169881603348,-0.000716666556859142,0.025737683218073577,-0.7786800043084501,-1629.227882565658,-0.0006141468022285451,0.022308832642318643,
  -0.702054725790766,-1630.4071776406054,-0.0004593693376488046,0.019370482029659446,-0.6355839518339949,-1631.4725748139685,-0.00032296102058391584,0.014974828841140849,-0.5260351546267864,-1633.3176884017366,
  -0.0002401005377095142,0.011884451396353194,-0.4403640173079977,-1634.853675668365,-0.0001788088844418473,0.009586956531872871,-0.3718781933848766,-1636.1451556124675,-0.00014384259512634906,0.007875954558917602,
  -0.3161779869453726,-1637.239576349238,-9.773402214865454e-05,0.006499541050022677,-0.27032549024965036,-1638.172606701624,-6.151491065226339e-05,0.004629129462330154,-0.1993328313839496,-1639.6579564270762,
  -4.228621391821376e-05,0.0034518710300018647,-0.14778204545593715,-1640.7571393389667,-2.9700390824942315e-05,0.0026426070421556357,-0.10890379829596286,-1641.5703831087726,-2.1406777157496158e-05,0.002074207687082807,
  -0.07881402084825755,-1642.1652781335536,-1.6713894786170428e-05,0.0016645296326011055,-0.05496365140563957,-1642.589200630649,-1.0920952349667763e-05,0.0013446628984153666,-0.03576723629221367,-1642.8764290025708,
  -6.58319349804993e-06,0.0009266574715561867,-0.006788559635173078,-1643.1365629303698,-4.358384843342338e-06,0.0006746821382572865,0.013642156957870745,-1643.086005986581,-3.138342548293983e-06,0.0005078625735777175,
  0.028729672259461148,-1642.8111793547935,-1.8618623822830912e-06,0.0003877407953181628,0.040156241924979116,-1642.3684794468043,-9.994879532348212e-07,0.0002452131924240856,0.056307348736737935,-1641.122280139252,
  -6.26632560290417e-07,0.00016870129581366956,0.06686921775080096,-1639.5424269218393,-3.978687078890982e-07,0.00012073188756768904,0.07425469339387933,-1637.7366896509702,-2.857997197912575e-07,9.027460257089984e-05,
  0.07963895263894546,-1635.7699299291125,-1.6673599296410734e-07,6.83963212557702e-05,0.08368776359246549,-1633.6837492246882,-8.798475058940188e-08,4.2868675797681105e-05,0.0893660684507078,-1629.2568481283436,
  -5.505394911353292e-08,2.9398017910105828e-05,0.0930541314429973,-1624.5961788172574,-3.3903123937846644e-08,2.0969137804174042e-05,0.09562457203583574,-1619.7779996045401};
maptype *map_1[2] = {a0_1};
treal *t_1[2] = {t0_1};
treal *c_1[1] = {c0_1};
splinecoeffs<maptype> sc[2] = {
	{x0_0, xe_0, hi_0, k_0, n_0, nmap_0, map_0, t_0, c_0, splinedata<unsigned char>::splev_pp<4>},
	{x0_1, xe_1, hi_1, k_1, n_1, nmap_1, map_1, t_1, c_1, splinedata<unsigned char>::splev_pp<4>},
};
splinedata<maptype> sd = {
	sc,
	2, /* number of calculated values */
	2, /* number of input values */
	2, /* number of output values */
	0, /* number of state values */
	"nonlin_1",
};
}; /* ! namespace nonlin_1 */
} // namespace AmpData

// nonlin_1: 19864 bytes
// data size sum: 19880 bytes
#ifndef NO_INTPP_INCLUDES
#include "intpp.h"
#endif
namespace AmpData {
namespace nonlin_2 {
typedef unsigned char maptype;
real x0_0[1] = {-4.77961510029};
real xe_0[1] = {11.185869388};
real hi_0[1] = {28.1858029632};
int k_0[1] = {4};
int nmap_0[1] = {451};
int n_0[1] = {61};
treal t0_0[65] = {
  -22.909309708123924,-22.909309708123924,-22.909309708123924,-22.909309708123924,-4.744136245871152,-4.4603054105234525,-4.176474575175753,-3.8926437398280536,-3.7507283221542034,-3.6088129044803536,
  -3.466897486806504,-3.3249820691326537,-3.183066651458804,-3.041151233784954,-2.8992358161111045,-2.7573203984372547,-2.615404980763405,-2.4734895630895553,-2.3315741454157055,-2.1896587277418558,
  -2.047743310068006,-1.9058278923941563,-1.7639124747203065,-1.6219970570464568,-1.480081639372607,-1.338166221698757,-1.0543353863510576,-0.770504551003358,-0.4866737156556585,-0.20284288030795894,
  -0.1673640258894965,-0.13188517147103407,-0.06092746263410917,0.0809879550397406,0.22290337271359037,0.36481879038744014,0.6486496257351397,0.9324804610828392,1.216311296430539,1.5001421317782384,
  1.783972967125938,2.0678038024736374,2.351634637821337,2.6354654731690363,2.919296308516736,3.2031271438644358,3.4869579792121357,3.770788814559835,4.054619649907535,4.338450485255234,
  4.622281320602934,4.906112155950634,5.1899429912983335,5.473773826646033,6.041435497341432,6.609097168036831,7.17675883873223,7.744420509427629,8.879743850818427,10.015067192209226,
  11.150390533600024,13.42103721638162,13.42103721638162,13.42103721638162,13.42103721638162};
maptype a0_0[450] = {
  3,4,4,4,4,4,4,4,4,5,
  5,5,5,5,5,5,5,6,6,6,
  6,6,6,6,6,7,7,7,7,8,
  8,8,8,9,9,9,9,10,10,10,
  10,11,11,11,11,12,12,12,12,13,
  13,13,13,14,14,14,14,15,15,15,
  15,16,16,16,16,17,17,17,17,18,
  18,18,18,19,19,19,19,20,20,20,
  20,21,21,21,21,22,22,22,22,23,
  23,23,23,24,24,24,24,25,25,25,
  25,25,25,25,25,26,26,26,26,26,
  26,26,26,27,27,27,27,27,27,27,
  27,28,28,28,28,28,28,28,28,29,
  30,31,31,32,32,32,32,33,33,33,
  33,34,34,34,34,35,35,35,35,35,
  35,35,35,36,36,36,36,36,36,36,
  36,37,37,37,37,37,37,37,37,38,
  38,38,38,38,38,38,38,39,39,39,
  39,39,39,39,39,40,40,40,40,40,
  40,40,40,41,41,41,41,41,41,41,
  41,42,42,42,42,42,42,42,42,43,
  43,43,43,43,43,43,43,44,44,44,
  44,44,44,44,44,45,45,45,45,45,
  45,45,45,46,46,46,46,46,46,46,
  46,47,47,47,47,47,47,47,47,48,
  48,48,48,48,48,48,48,49,49,49,
  49,49,49,49,49,50,50,50,50,50,
  50,50,50,51,51,51,51,51,51,51,
  51,52,52,52,52,52,52,52,52,53,
  53,53,53,53,53,53,53,53,53,53,
  53,53,53,53,53,54,54,54,54,54,
  54,54,54,54,54,54,54,54,54,54,
  54,55,55,55,55,55,55,55,55,55,
  55,55,55,55,55,55,55,56,56,56,
  56,56,56,56,56,56,56,56,56,56,
  56,56,56,57,57,57,57,57,57,57,
  57,57,57,57,57,57,57,57,57,57,
  57,57,57,57,57,57,57,57,57,57,
  57,57,57,57,57,58,58,58,58,58,
  58,58,58,58,58,58,58,58,58,58,
  58,58,58,58,58,58,58,58,58,58,
  58,58,58,58,58,58,58,59,59,59,
  59,59,59,59,59,59,59,59,59,59,
  59,59,59,59,59,59,59,59,59,59,
  59,59,59,59,59,59,59,59,59,60,
};
treal c0_0[232] = {
  -0.00019528898667059836,0.00387428525909563,-0.017419511850236564,0.0036391123722743514,-3.911625052543832,-0.006768089695321336,-0.06998597140011312,-0.20494510361715157,2.5880562689574567,-3.3374875083868356,
  -1.0191888314199922,-0.3147953728737922,-5.798723652672291,-1.1337769901516996,-2.288271569100697,-0.8137634627109129,0.9229005861647658,-6.071346725017019,-4.333307851960555,-1.6871726157673452,
  -6.27484793479242,-5.678425258545977,-6.0007816505804,-2.421774835240845,-2.10681339354931,-8.349918255063857,-7.991619879586581,-3.4056762837904437,-3.344064506177751,-9.24688616318309,
  -10.488877728327141,-4.713999232062799,-1.8868443463131308,-10.67060909655063,-13.315477387129183,-6.398322771458868,-1.1830725989615178,-11.47392600702834,-16.45812833554682,-8.508293152162468,
  -0.21480164804218535,-11.977614733088672,-19.786263534775827,-11.07842144350537,0.5105725124290409,-12.069065729885486,-23.198858236348407,-14.12824022816482,1.0720070899965097,-11.851691395823023,
  -26.59358247491805,-17.662127391100633,1.433794036334926,-11.395288394044474,-29.89268732145264,-21.67179566825596,1.6406125018974247,-10.784855955470237,-33.0403917708803,-26.139431787472315,
  1.7298676376971434,-10.086371330127099,-36.0023407084817,-31.040890474451487,1.7406621878181892,-9.349886665154301,-38.760645379898754,-36.348372804869015,1.702366356553773,-8.608806260914415,
  -41.30926078737821,-42.032437451419625,1.6376973693274444,-7.884030163341699,-43.64984855715299,-48.06337402538235,1.55648915021746,-7.186786644767292,-45.788629819161855,-54.41206394525063,
  1.4834493612893864,-6.524117221193513,-47.73441846798569,-61.0504695339456,1.3631880314306921,-5.892544214077346,-49.49653416168694,-67.9518751391418,1.3470273913965387,-5.312172017531906,
  -51.08665614561273,-75.09097598548648,0.876026637452794,-4.16518828832297,-53.776623238114645,-89.98809223520358,1.87273696372546,-3.419258171437781,-55.92932301243844,-105.56707276661714,
  -2.5246570413373566,-1.8246366810356456,-57.41770206889147,-121.67417360920967,1327.3238267783497,-3.974363232063346,-59.0636370584076,-138.17580786123318,-1031.7622219047919,137.30142321721323,
  -54.33334570715286,-140.21704384451215,-33.59275324071085,27.484198220924903,-48.48694063389329,-142.01797810730483,-25.732235420973023,20.333203810469826,-45.093927343211405,-145.332119226714,
  -5.316632698883918,9.377800998122172,-40.87747768629031,-151.3956795436347,-4.471287867636943,7.114264547880497,-38.53699931602483,-157.02315094821736,-1.8985980497753179,5.2106304920533555,
  -36.78790668864627,-162.36164383619848,-0.8927973100922694,3.59398848068163,-34.28888433069669,-172.42683022255218,-0.49416800309079784,2.8337782617226264,-32.46448592677993,-181.8899555617826,
  -0.23820800726859392,2.412997910364529,-30.975289062974024,-190.88738805306184,-0.051887750837069486,2.2101655772958613,-29.66309270832239,-199.49018596900012,0.12020831289100352,2.165983546302665,
  -28.421006646965317,-207.73262197223139,0.2954013232832033,2.2683400238934386,-27.162408883834566,-215.622139908359,0.4711016254366103,2.519872036944301,-25.80336665478506,-223.1421773004512,
  0.6091853871050371,2.9210115405882973,-24.259076123944403,-230.25219573976554,0.6298654487737106,3.4397283324992003,-22.45370201233656,-236.8884237922215,0.44879420002042075,3.976054041945489,
  -20.34887430624117,-242.96997034942808,0.0748520653262494,4.358198940018485,-17.98335632037128,-248.41503579771455,-0.3417855875910199,4.421934912705635,-15.491283594487978,-253.16645906376897,
  -0.6264525040954044,4.130907046198344,-13.063723316695405,-257.2149472648551,-0.7208488086000034,3.597487433569174,-10.870166655606443,-260.6043732145612,-0.6801200914621935,2.9836900750561752,
  -9.002225545761817,-263.41633080728474,-0.5699216517343333,2.404572913966769,-7.472870360514339,-265.74662531645026,-0.4799575407389856,1.9192888984832794,-6.2456250503586235,-267.68697558042913,
  -0.32092204477521397,1.510608649325158,-5.272114364207129,-269.3160331705031,-0.18618767911337905,0.9640832170249133,-3.867326644898532,-271.8807363082449,-0.11467972561647832,0.6470083900597146,
  -2.952771691577537,-273.799461496229,-0.07692796338454275,0.4517105361446945,-2.329071070303687,-275.2881225501771,-0.04110709670068058,0.32070336749050243,-1.8906013032977766,-276.4787597315022,
  -0.019208247653029562,0.18069382834722847,-1.3213533635553079,-278.27198552253657,-0.011203512302081303,0.11527111262412994,-0.9853374578371743,-279.56735095397073,-0.0063890223848975585,0.07711228555779437,
  -0.7669200953851556,-280.5538428762895};
maptype *map_0[1] = {a0_0};
treal *t_0[1] = {t0_0};
treal *c_0[1] = {c0_0};
real x0_1[2] = {-4.77961510029};
real xe_1[2] = {12.3211927294};
real hi_1[2] = {28.1858029632};
int k_1[2] = {4};
int nmap_1[2] = {483};
int n_1[2] = {38};
treal t0_1[42] = {
  -22.909309708123924,-22.909309708123924,-22.909309708123924,-22.909309708123924,-4.744136245871152,-3.6088129044803536,-2.4734895630895553,-1.338166221698757,-0.20284288030795894,-0.1673640258894965,
  -0.13188517147103407,-0.06092746263410917,0.0809879550397406,0.22290337271359037,0.36481879038744014,0.50673420806129,0.6486496257351397,0.9324804610828392,1.216311296430539,1.5001421317782384,
  1.783972967125938,2.0678038024736374,2.351634637821337,2.6354654731690363,3.2031271438644358,3.770788814559835,4.338450485255234,4.906112155950634,5.473773826646033,6.041435497341432,
  6.609097168036831,7.17675883873223,7.744420509427629,8.312082180123028,8.879743850818427,10.015067192209226,11.150390533600024,12.285713874990822,13.42103721638162,13.42103721638162,
  13.42103721638162,13.42103721638162};
maptype a0_1[482] = {
  3,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,
  4,4,4,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,7,7,7,
  7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,8,
  9,10,10,11,11,11,11,12,12,12,
  12,13,13,13,13,14,14,14,14,15,
  15,15,15,16,16,16,16,16,16,16,
  16,17,17,17,17,17,17,17,17,18,
  18,18,18,18,18,18,18,19,19,19,
  19,19,19,19,19,20,20,20,20,20,
  20,20,20,21,21,21,21,21,21,21,
  21,22,22,22,22,22,22,22,22,23,
  23,23,23,23,23,23,23,23,23,23,
  23,23,23,23,23,24,24,24,24,24,
  24,24,24,24,24,24,24,24,24,24,
  24,25,25,25,25,25,25,25,25,25,
  25,25,25,25,25,25,25,26,26,26,
  26,26,26,26,26,26,26,26,26,26,
  26,26,26,27,27,27,27,27,27,27,
  27,27,27,27,27,27,27,27,27,28,
  28,28,28,28,28,28,28,28,28,28,
  28,28,28,28,28,29,29,29,29,29,
  29,29,29,29,29,29,29,29,29,29,
  29,30,30,30,30,30,30,30,30,30,
  30,30,30,30,30,30,30,31,31,31,
  31,31,31,31,31,31,31,31,31,31,
  31,31,31,32,32,32,32,32,32,32,
  32,32,32,32,32,32,32,32,32,33,
  33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,34,34,34,34,34,
  34,34,34,34,34,34,34,34,34,34,
  34,34,34,34,34,34,34,34,34,34,
  34,34,34,34,34,34,34,35,35,35,
  35,35,35,35,35,35,35,35,35,35,
  35,35,35,35,35,35,35,35,35,35,
  35,35,35,35,35,35,35,35,35,36,
  36,36,36,36,36,36,36,36,36,36,
  36,36,36,36,36,36,36,36,36,36,
  36,36,36,36,36,36,36,36,36,36,
  36,37};
treal c0_1[140] = {
  3.2922880359400405e-08,-8.305592442957614e-07,4.727681360709875e-06,-1.8669115719330754e-06,-0.00037246477239086733,9.635902535207483e-07,7.144212719140313e-06,7.2902898035495675e-06,-1.8624824638642392e-05,-0.0012676402595699673,
  -0.001430943375950975,-0.0005284161780624681,-0.00032711675570955913,-0.0013310758539946507,-0.004381326437329266,-0.0038141913231295723,0.0025824872346098164,-0.002445225718345933,-0.008668649756538303,-0.010982813679420904,
  -16.257702271940055,0.006350648390542964,-0.00423473223879619,-0.020197156040981677,12.732534938139251,-1.7240633078640586,-0.06517720961700699,-0.021065457959512125,0.4945361248219314,-0.3688560475193713,
  -0.13943159073623795,-0.02497941186874189,0.3258752687187741,-0.263582596456004,-0.18430798789266223,-0.03655366315702552,0.07346853934837164,-0.12484242184659546,-0.23943148660004837,-0.06708694960126624,
  0.05738689919797954,-0.09356346650405997,-0.27042664946775985,-0.10337030772110466,0.030108214285675176,-0.06913120919799483,-0.2935155323233285,-0.1434683637432568,0.02309258803551856,-0.05631274978069873,
  -0.3113179641564511,-0.1864289901463388,0.013901049856908003,-0.04648116695200644,-0.32590600578390383,-0.23167794439232606,0.008215917449990609,-0.03464452717271779,-0.3489319793154863,-0.32760678541439286,
  0.0056584155552937615,-0.02764873503378206,-0.36661272796409045,-0.4292475415150552,0.004047553719691173,-0.022830636592371726,-0.3809403301805686,-0.5354015369510619,0.0030687726514781496,-0.019384174932247825,
  -0.3929221953996471,-0.6452708349501209,0.002381563361324597,-0.01677113801676417,-0.4031841880762227,-0.7582856892247861,0.001992217121815004,-0.014743254661929465,-0.4121289444756917,-0.874018420660477,
  0.0014716943867281599,-0.013046896712293239,-0.42001664635467634,-0.9921354861652695,0.0010068253293092203,-0.010540623229323793,-0.4334063773322957,-1.234497859382747,0.0006995632292002228,-0.00882601478372144,
  -0.444400075422534,-1.4837384839809555,0.0005167156454831609,-0.00763466908938684,-0.4537441747307315,-1.7387234999255843,0.0004179665129766655,-0.006754710089618571,-0.46191247375575534,-1.9986623509884769,
  0.0003483520655499276,-0.006042919382465379,-0.46917719748281916,-2.2629725380389782,0.00029409002660997225,-0.005449681035904584,-0.47570110623694567,-2.5311899971173033,0.0002502246836535639,-0.00494885012838377,
  -0.48160395381044374,-2.8029295899327398,0.0002150821939020763,-0.004522721242467741,-0.48698060183893205,-3.077866639413449,0.00018486647023759973,-0.0041564394898858876,-0.4919074287204938,-3.3557249185970917,
  0.0001657949393488396,-0.0038416146618339762,-0.4964476175025714,-3.636267465166853,0.00013462892180939512,-0.0035592683650431623,-0.5006488151262296,-3.919289342429832,0.0001053890094694096,-0.003100726292973713,
  -0.5082100625150143,-4.492078365402833,8.53109341935358e-05,-0.002741774485843683,-0.5148431900212995,-5.072903596313708,7.161678920476018e-05,-0.0024512080012463566,-0.5207389042503265,-5.660826279475416,
};
maptype *map_1[2] = {a0_1};
treal *t_1[2] = {t0_1};
treal *c_1[1] = {c0_1};
splinecoeffs<maptype> sc[2] = {
	{x0_0, xe_0, hi_0, k_0, n_0, nmap_0, map_0, t_0, c_0, splinedata<unsigned char>::splev_pp<4>},
	{x0_1, xe_1, hi_1, k_1, n_1, nmap_1, map_1, t_1, c_1, splinedata<unsigned char>::splev_pp<4>},
};
splinedata<maptype> sd = {
	sc,
	2, /* number of calculated values */
	2, /* number of input values */
	2, /* number of output values */
	0, /* number of state values */
	"nonlin_2",
};
}; /* ! namespace nonlin_2 */
} // namespace AmpData

// nonlin_2: 2916 bytes
// data size sum: 2932 bytes


static const creal __attribute__((aligned(16))) mo_data[1*16] = { -0.0102546428492310,-0.0926671566150658,0.00748481645910352,-0.0140923636667521,0.000146229606693146,0.0922823518597244,0.0130923463909865,0,0,0,-6.05681847115581e-5,0.000595161081745525,0,0,-21.3106335449389,0 };
static const Map<const Matrix<creal, 1, 16>, Aligned> Mo(mo_data);
static const creal __attribute__((aligned(16))) moc_data[1*1] = { 0.991243408620221 };
static const Map<const Matrix<creal, 1, 1>, Aligned> Moc(moc_data);
static const creal __attribute__((aligned(16))) mp_data[8*8] = { -1.60878766662268,0.201098738795714,18.3957218365136,-3.91398582031719,-0.0123843269016959,-1.04506003104504,-24.3073622142207,1.77200291622517,-8.88487051956217,1.11060977505219,166.234892997965,-35.3691437462083,-0.000977781651230822,-5.92128424260976,-174.653665466717,3.68076212702878,1.04505825382188,-0.130632444077542,-13.4269526764931,2.85680017523035,-0.0102398010071506,0.397763818919637,17.2035996438699,-1.21549433886385,-1.84036955719718,0.230046482676040,25.2801788968119,-5.37876475830232,0.0273903892012099,-0.172407562001718,-32.6789072654108,2.68046580539187,0.0674042024831012,-0.00842551253086225,-0.262319945235929,0.0558128269821166,0.00219678736800143,-0.0979397222211214,0.718340583633752,0.0276587628679819,4.46885219353691,-0.558606977146733,-165.544595019239,35.2222717021849,0.00120351074120639,-9.02952049284388,173.869107367223,-13.5602699048151,1.81354621649064,-0.226693368766333,-23.4862546943112,4.99707877518569,-0.00778901763100761,-1.57796122950664,32.8564145535054,-2.48722216637614,0,0,0,0,1.00000000000000,0,0,0 };
static const Map<const Matrix<creal, 8, 8>, Aligned> Mp(mp_data);
static const creal __attribute__((aligned(16))) mx_data[7*16] = { 1.05970174364689,-0.108282638352014,-0.00216390308520815,0.0114004550526571,-0.00614983937551424,0.00735634823212811,-0.0373376868458086,0.713522975253478,0.136120723019377,-0.102112632757899,0.113894820137347,-0.0489364044915694,0.206120132777242,-0.416089362653296,-0.0433301281262144,0.0664125136110350,1.00099915170040,-0.00502767212096184,0.00451528271064754,-0.0174164531743976,0.0283669734091872,0.0839522390879246,-0.105966821882551,-0.00316747488536151,1.00956830159365,-0.00857286923940689,0.0523569880167113,-0.0541206842484787,-0.00113061827397934,-0.00185742158800730,0.000224251694312446,-0.000856211240495214,1.00005450259739,-0.00387940275141992,0.000605868723121882,-0.545624721365257,0.306950247693952,0.0301073642157915,-0.0692961838570507,0.0696324581496592,0.257432975682703,0.538969989890965,-0.0830857401055198,0.0447852476649801,0.0103831526772016,-0.0271123453953327,0.00934503192093945,-0.102249000232238,1.01250767475771,0,0,0,0,0,0,0,-0.00211533957944378,0.00141132471136906,0.000931758428019313,-0.00121834618938154,-0.000342312419688939,0.000825499399629477,-0.00246640352687999,-0.00221019875914748,0.00147461751870934,0.000973541761263861,-0.00127298054725860,-0.000357662778471990,0.000862519622708971,-0.00257700485411471,0.000307278441346321,-0.000309004853953255,-2.23695668047990e-5,2.14873885323795e-5,-3.73067441519218e-5,0.000244734225363349,-0.000321720947551207,7.14531190632612e-5,-7.18548354480381e-5,-5.20173748404662e-6,4.99656752844864e-6,-8.67512148539013e-6,5.69095647660407e-5,-7.48114618591209e-5,-0.000185944022067206,-0.0328978757987105,-0.00205975139324839,0.00928258649842950,-0.000657578027217151,-0.0327275668944848,0.00532525400921149,-0.00753019147704296,0.000217644735509446,0.00119267447325060,0.00834739377311968,-0.00139172521333547,0.000380292343123624,0.00128078974223338,-1360.53531039429,169.083565190700,76.3715942748210,-236.747433234904,188.837967496056,-44.3875870949356,1237.07312474557,8676.03975995143,-3217.70398451414,-3777.02751206018,5337.82542445813,1498.14652753079,-3011.78616932036,10648.3974067810 };
static const Map<const Matrix<creal, 7, 16>, Aligned> Mx(mx_data);
static const creal __attribute__((aligned(16))) mxc_data[7*1] = { 0.841296047660765,-6.14125311669919,-0.333988273569845,-0.217191975968813,0.0159661555945044,-6.13970274163824,-0.147713788505921 };
static const Map<const Matrix<creal, 7, 1>, Aligned> Mxc(mxc_data);


static Matrix<creal, 0, 1> last_pot;

struct nonlin_param {
    Matrix<creal, 8, 1> *p;
    Matrix<creal, 8, 1> *i;
    Map<Matrix<creal, 8, 1> >*v;
    int *info;
    int *nfev;
    creal *fnorm;
    Array<creal, 8, 1> *p_val;
    inline nonlin_param(Matrix<creal, 8, 1> *p_, Matrix<creal, 8, 1> *i_, Map<Matrix<creal, 8, 1> >*v_, int *info_, int *nfev_, creal *fnorm_, Array<creal, 8, 1> *p_val_): p(p_), i(i_), v(v_), info(info_), nfev(nfev_), fnorm(fnorm_), p_val(p_val_) {}
};



namespace nonlin_0 {
static inline int nonlin(nonlin_param& par) {
    real t[AmpData::nonlin_0::sd.m];
    real m[2+0];
    Map<Matrix<real, 2+0, 1> >mp(m);
    mp << last_pot.cast<real>(), (*par.p).head<2>().cast<real>();
    for (int j = 0; j < AmpData::nonlin_0::sd.m; j++) {
        splinecoeffs<AmpData::nonlin_0::maptype> *pc = &AmpData::nonlin_0::sd.sc[j];
        check(&AmpData::nonlin_0::sd, m, (*pc->eval)(pc, m, &t[j]));
    }
    (*par.i).head<2>() = Map<Matrix<real, 2, 1> >(t).cast<creal>();
    return 0;
}




} // end nonlin_0

namespace nonlin_1 {
static inline int nonlin(nonlin_param& par) {
    real t[AmpData::nonlin_1::sd.m];
    real m[2+0];
    Map<Matrix<real, 2+0, 1> >mp(m);
    mp << last_pot.cast<real>(), (*par.p).segment<2>(2).cast<real>();
    for (int j = 0; j < AmpData::nonlin_1::sd.m; j++) {
        splinecoeffs<AmpData::nonlin_1::maptype> *pc = &AmpData::nonlin_1::sd.sc[j];
        check(&AmpData::nonlin_1::sd, m, (*pc->eval)(pc, m, &t[j]));
    }
    (*par.i).segment<2>(2) = Map<Matrix<real, 2, 1> >(t).cast<creal>();
    return 0;
}




} // end nonlin_1

namespace nonlin_2 {
static inline int nonlin(nonlin_param& par) {
    real t[AmpData::nonlin_2::sd.m];
    real m[2+0];
    Map<Matrix<real, 2+0, 1> >mp(m);
    mp << last_pot.cast<real>(), (*par.p).segment<2>(4).cast<real>();
    for (int j = 0; j < AmpData::nonlin_2::sd.m; j++) {
        splinecoeffs<AmpData::nonlin_2::maptype> *pc = &AmpData::nonlin_2::sd.sc[j];
        check(&AmpData::nonlin_2::sd, m, (*pc->eval)(pc, m, &t[j]));
    }
    (*par.i).segment<2>(4) = Map<Matrix<real, 2, 1> >(t).cast<creal>();
    return 0;
}




} // end nonlin_2

namespace nonlin {
static const creal __attribute__((aligned(16))) kl_data[2*8] = { -0.0219270321823620,0.999759573727441,0.999759573727441,0.0219270321823619,1.00000000000000,0,0,0,0,1.00000000000000,0,0,551772.224409347,-13096.8526917654,-13096.8526917654,777788.180707371 };
static const Map<const Matrix<creal, 2, 8>, Aligned> Kl(kl_data);
static const creal __attribute__((aligned(16))) ku_data[6*2] = { 13096.8531048342,98362.8920522104,-431770.787790270,-8133.82959730492,0,0,-695224.597054545,-13096.8526917654,0,0,-7.46011600940896,51016.6019816278 };
static const Map<const Matrix<creal, 6, 2>, Aligned> Ku(ku_data);
static const creal __attribute__((aligned(16))) mpc_data[8*1] = { 50.4228844536115,378.697134401010,31.3152446272406,378.337178862680,-0.0287214466362245,196.413917629267,347.381890451386,146.019756212607 };
static const Map<const Matrix<creal, 8, 1>, Aligned> Mpc(mpc_data);
static const creal __attribute__((aligned(16))) sam0_data[3*1] = { -0.00195112638539400,-0.00182327347897498,-0.00951929037638346 };
static const Map<const Array<creal, 3, 1>, Aligned> Sam0(sam0_data);
static const creal __attribute__((aligned(16))) sam1_data[3*1] = { -1.29668572612942,-3.61510153501277,-0.980636576711195 };
static const Map<const Array<creal, 3, 1>, Aligned> Sam1(sam1_data);
static const creal __attribute__((aligned(16))) sam2_data[3*1] = { 3.46627607952461,2.96218037196774,2.98452221815153 };
static const Map<const Array<creal, 3, 1>, Aligned> Sam2(sam2_data);
static const creal __attribute__((aligned(16))) spm0_data[3*1] = { 1.14309235734489e-7,3.67755393245198e-8,2.10449978229339e-7 };
static const Map<const Array<creal, 3, 1>, Aligned> Spm0(spm0_data);
static const creal __attribute__((aligned(16))) spm1_data[3*1] = { -8.10577122133926e-6,-2.19309963613227e-5,-4.47209333968212e-6 };
static const Map<const Array<creal, 3, 1>, Aligned> Spm1(spm1_data);
static const creal __attribute__((aligned(16))) spm2_data[3*1] = { 9.83718412846424e-6,6.67291162167342e-6,9.99903755829167e-6 };
static const Map<const Array<creal, 3, 1>, Aligned> Spm2(spm2_data);
static const creal __attribute__((aligned(16))) ssm0_data[3*1] = { 0.00256230481349278,0.00260300964807184,0.00291978208352670 };
static const Map<const Array<creal, 3, 1>, Aligned> Ssm0(ssm0_data);
static const creal __attribute__((aligned(16))) ssm1_data[3*1] = { 0.00649791581228968,0.0178391626132847,0.00442052754624928 };
static const Map<const Array<creal, 3, 1>, Aligned> Ssm1(ssm1_data);
static const creal __attribute__((aligned(16))) ssm2_data[3*1] = { -0.0102099619730591,-0.00768024661338208,-0.00926916454616070 };
static const Map<const Array<creal, 3, 1>, Aligned> Ssm2(ssm2_data);



typedef int root_fcn(void*p, const creal *v, creal *fvec, int iflag);
static int fcn(void *p, const creal *v, creal *fvec, int iflag) {
    nonlin_param& par = *static_cast<nonlin_param *>(p);
    const Map<const Matrix<creal, 2, 1> > Mv(v);
    Array<creal, 6, 1> pt;
    pt = (*par.p).head<6>() + Ku * Mv;
    Array<creal, 3, 1> PP1;
    PP1 << pt(1), pt(3), pt(5);
    Array<creal, 3, 1> PP0;
    PP0 << pt(0), pt(2), pt(4);
    pt.head<3>() = (Spm1 * PP1 + Ssm1) * PP1 + Sam1 + ((Spm2 * PP1 + Ssm2) * PP1 + Sam2) * PP0;
    Array<creal, 6, 1> res;
    splinedata<AmpData::nonlin_0::maptype>::splev_pp<4>(&AmpData::nonlin_0::sd.sc[0], &pt(0), &res(0));
    splinedata<AmpData::nonlin_0::maptype>::splev_pp<4>(&AmpData::nonlin_0::sd.sc[1], &pt(0), &res(3));
    splinedata<AmpData::nonlin_1::maptype>::splev_pp<4>(&AmpData::nonlin_1::sd.sc[0], &pt(1), &res(1));
    splinedata<AmpData::nonlin_1::maptype>::splev_pp<4>(&AmpData::nonlin_1::sd.sc[1], &pt(1), &res(4));
    splinedata<AmpData::nonlin_2::maptype>::splev_pp<4>(&AmpData::nonlin_2::sd.sc[0], &pt(2), &res(2));
    splinedata<AmpData::nonlin_2::maptype>::splev_pp<4>(&AmpData::nonlin_2::sd.sc[1], &pt(2), &res(5));
    pt.head<3>() = ((Spm0 * PP1 + Ssm0) * PP1 + Sam0) * res.head<3>();
    pt.tail<3>() = ((Spm0 * PP1 + Ssm0) * PP1 + Sam0) * res.tail<3>();
    (*par.i).head<6>() << pt(0), pt(3), pt(1), pt(4), pt(2), pt(5);
    (*par.i).segment<2>(6) = Mv;
    Map<Matrix<creal, 2, 1>, Aligned> Mfvec(fvec);
    Mfvec = (*par.p).segment<2>(6) + Kl * (*par.i);
    
    return 0;
}



#if 0
#define real_EPSILON FLT_EPSILON
#define real_MIN FLT_MIN
#define real_MAX FLT_MAX
#else
#define real_EPSILON DBL_EPSILON
#define real_MIN DBL_MIN
#define real_MAX DBL_MAX
#endif

real inline dpmpar(int i)
{
    switch(i) {
    case 1:
	return real_EPSILON;
    case 2:
	return real_MIN;
    default:
	return real_MAX;
    }
}

template<int N>
real inline enorm(const real *fvec) {
    real s = 0;
    for (int i = 0; i < N; i++) {
	s += fvec[i] * fvec[i];
    }
    return sqrt(s);
}

real inline enorm(int n, const real *fvec) {
    real s = 0;
    for (int i = 0; i < n; i++) {
	s += fvec[i] * fvec[i];
    }
    return sqrt(s);
}

template<int N>
real enorm2(const real *fvec) {
    real s;
    for (int i = 0; i < N; i++) {
	s = fvec[i] * fvec[i];
    }
    return s;
}

template<int N>
void qform(real *q, int	ldq, real *wa)
{
    /* System generated locals */
    int q_dim1, q_offset;

    /* Local variables */
    int i, j, k, l;
    real sum, temp;

    /* Parameter adjustments */
    --wa;
    q_dim1 = ldq;
    q_offset = 1 + q_dim1 * 1;
    q -= q_offset;

    /* Function Body */

/*     zero out upper triangle of q in the first min(m,n) columns. */

    if (N >= 2) {
        for (j = 2; j <= N; ++j) {
            for (i = 1; i <= j-1; ++i) {
                q[i + j * q_dim1] = 0.;
            }
        }
    }

/*     accumulate q from its factored form. */

    for (l = 1; l <= N; ++l) {
	k = N - l + 1;
	for (i = k; i <= N; ++i) {
	    wa[i] = q[i + k * q_dim1];
	    q[i + k * q_dim1] = 0.;
	}
	q[k + k * q_dim1] = 1.;
	if (wa[k] != 0.) {
            for (j = k; j <= N; ++j) {
                sum = 0.;
                for (i = k; i <= N; ++i) {
                    sum += q[i + j * q_dim1] * wa[i];
                }
                temp = sum / wa[k];
                for (i = k; i <= N; ++i) {
                    q[i + j * q_dim1] -= temp * wa[i];
                }
            }
        }
    }
} /* qform_ */

template<int N>
void r1updt(real *s, int ls, const real *u, real *v, real *w, int *sing)
{
    /* Initialized data */

#define p5 .5
#define p25 .25

    /* Local variables */
    int i, j, l, jj, nm1;
    real tan;
    int nmj;
    real cos, sin, tau, temp, giant, cotan;

    /* Parameter adjustments */
    --w;
    --u;
    --v;
    --s;
    (void)ls;

    /* Function Body */

/*     giant is the largest magnitude. */

    giant = dpmpar(3);

/*     initialize the diagonal element pointer. */

    jj = N * ((N << 1) - N + 1) / 2 - (N - N);

/*     move the nontrivial part of the last column of s into w. */

    l = jj;
    for (i = N; i <= N; ++i) {
	w[i] = s[l];
	++l;
    }

/*     rotate the vector v into a multiple of the n-th unit vector */
/*     in such a way that a spike is introduced into w. */

    nm1 = N - 1;
    if (nm1 >= 1) {
        for (nmj = 1; nmj <= nm1; ++nmj) {
            j = N - nmj;
            jj -= N - j + 1;
            w[j] = 0.;
            if (v[j] != 0.) {

/*        determine a givens rotation which eliminates the */
/*        j-th element of v. */

                if (fabs(v[N]) < fabs(v[j])) {
                    cotan = v[N] / v[j];
                    sin = p5 / sqrt(p25 + p25 * (cotan * cotan));
                    cos = sin * cotan;
                    tau = 1.;
                    if (fabs(cos) * giant > 1.) {
                        tau = 1. / cos;
                    }
                } else {
                    tan = v[j] / v[N];
                    cos = p5 / sqrt(p25 + p25 * (tan * tan));
                    sin = cos * tan;
                    tau = sin;
                }

/*        apply the transformation to v and store the information */
/*        necessary to recover the givens rotation. */

                v[N] = sin * v[j] + cos * v[N];
                v[j] = tau;

/*        apply the transformation to s and extend the spike in w. */

                l = jj;
                for (i = j; i <= N; ++i) {
                    temp = cos * s[l] - sin * w[i];
                    w[i] = sin * s[l] + cos * w[i];
                    s[l] = temp;
                    ++l;
                }
            }
        }
    }

/*     add the spike from the rank 1 update to w. */

    for (i = 1; i <= N; ++i) {
	w[i] += v[N] * u[i];
    }

/*     eliminate the spike. */

    *sing = false;
    if (nm1 >= 1) {
        for (j = 1; j <= nm1; ++j) {
            if (w[j] != 0.) {

/*        determine a givens rotation which eliminates the */
/*        j-th element of the spike. */

                if (fabs(s[jj]) < fabs(w[j])) {
                    cotan = s[jj] / w[j];
                    sin = p5 / sqrt(p25 + p25 * (cotan * cotan));
                    cos = sin * cotan;
                    tau = 1.;
                    if (fabs(cos) * giant > 1.) {
                        tau = 1. / cos;
                    }
                } else {
                    tan = w[j] / s[jj];
                    cos = p5 / sqrt(p25 + p25 * (tan * tan));
                    sin = cos * tan;
                    tau = sin;
                }

/*        apply the transformation to s and reduce the spike in w. */

                l = jj;
                for (i = j; i <= N; ++i) {
                    temp = cos * s[l] + sin * w[i];
                    w[i] = -sin * s[l] + cos * w[i];
                    s[l] = temp;
                    ++l;
                }

/*        store the information necessary to recover the */
/*        givens rotation. */

                w[j] = tau;
            }

/*        test for zero diagonal elements in the output s. */

            if (s[jj] == 0.) {
                *sing = true;
            }
            jj += N - j + 1;
        }
    }

/*     move w back into the last column of the output s. */

    l = jj;
    for (i = N; i <= N; ++i) {
	s[l] = w[i];
	++l;
    }
    if (s[jj] == 0.) {
	*sing = true;
    }

/*     last card of subroutine r1updt. */

} /* __minpack_func__(r1updt) */

template<int M, int N>
void r1mpyq(real *a, int lda, const real *v, const real *w)
{
    /* System generated locals */
    int a_dim1, a_offset;

    /* Local variables */
    int i, j, nm1, nmj;
    real cos, sin, temp;

    /* Parameter adjustments */
    --w;
    --v;
    a_dim1 = lda;
    a_offset = 1 + a_dim1 * 1;
    a -= a_offset;

    /* Function Body */

/*     apply the first set of givens rotations to a. */

    nm1 = N - 1;
    if (nm1 < 1) {
        return;
    }
    for (nmj = 1; nmj <= nm1; ++nmj) {
	j = N - nmj;
	if (fabs(v[j]) > 1.) {
	    cos = 1. / v[j];
	    sin = sqrt(1. - cos * cos);
	} else {
	    sin = v[j];
	    cos = sqrt(1. - sin * sin);
	}
	for (i = 1; i <= M; ++i) {
	    temp = cos * a[i + j * a_dim1] - sin * a[i + N * a_dim1];
	    a[i + N * a_dim1] = sin * a[i + j * a_dim1] + cos * a[
		    i + N * a_dim1];
	    a[i + j * a_dim1] = temp;
	}
    }

/*     apply the second set of givens rotations to a. */

    for (j = 1; j <= nm1; ++j) {
	if (fabs(w[j]) > 1.) {
	    cos = 1. / w[j];
	    sin = sqrt(1. - cos * cos);
	} else {
	    sin = w[j];
	    cos = sqrt(1. - sin * sin);
	}
	for (i = 1; i <= M; ++i) {
	    temp = cos * a[i + j * a_dim1] + sin * a[i + N * a_dim1];
	    a[i + N * a_dim1] = -sin * a[i + j * a_dim1] + cos * a[i + N * a_dim1];
	    a[i + j * a_dim1] = temp;
	}
    }

/*     last card of subroutine r1mpyq. */

} /* r1mpyq_ */

template<int N>
int fdjac1(root_fcn *fcn_nn, void *p, real *x, const real *fvec, real *fjac, int ldfjac, int ml, 
	int mu, real epsfcn, real *wa1, real *wa2)
{
    /* System generated locals */
    int fjac_dim1, fjac_offset;

    /* Local variables */
    real h;
    int i, j, k;
    real eps, temp;
    int msum;
    real epsmch;
    int iflag = 0;

    /* Parameter adjustments */
    --wa2;
    --wa1;
    --fvec;
    --x;
    fjac_dim1 = ldfjac;
    fjac_offset = 1 + fjac_dim1 * 1;
    fjac -= fjac_offset;

    /* Function Body */

/*     epsmch is the machine precision. */

    epsmch = dpmpar(1);

    eps = sqrt((std::max(epsfcn,epsmch)));
    msum = ml + mu + 1;
    if (msum >= N) {

/*        computation of dense approximate jacobian. */

        for (j = 1; j <= N; ++j) {
            temp = x[j];
            h = eps * fabs(temp);
            if (h == 0.) {
                h = eps;
            }
            x[j] = temp + h;
            /* the last parameter of fcn_nn() is set to 2 to tell calls
               made to compute the function from calls made to compute
               the Jacobian (see fcn() in tlmfdrv.c) */
            iflag = fcn_nn(p, &x[1], &wa1[1], 2);
            if (iflag < 0) {
                return iflag;
            }
            x[j] = temp;
            for (i = 1; i <= N; ++i) {
                fjac[i + j * fjac_dim1] = (wa1[i] - fvec[i]) / h;
            }
        }
        return 0;
    }

/*        computation of banded approximate jacobian. */

    for (k = 1; k <= msum; ++k) {
	for (j = k; msum < 0 ? j >= N : j <= N; j += msum) {
	    wa2[j] = x[j];
	    h = eps * fabs(wa2[j]);
	    if (h == 0.) {
		h = eps;
	    }
	    x[j] = wa2[j] + h;
	}
	iflag = fcn_nn(p, &x[1], &wa1[1], 1);
	if (iflag < 0) {
            return iflag;
	}
	for (j = k; msum < 0 ? j >= N : j <= N; j += msum) {
	    x[j] = wa2[j];
	    h = eps * fabs(wa2[j]);
	    if (h == 0.) {
		h = eps;
	    }
	    for (i = 1; i <= N; ++i) {
		fjac[i + j * fjac_dim1] = 0.;
		if (i >= j - mu && i <= j + ml) {
		    fjac[i + j * fjac_dim1] = (wa1[i] - fvec[i]) / h;
		}
	    }
	}
    }
    return 0;

} /* fdjac1_ */

template<int N>
void qrfac(real *a, int lda, int pivot, int *ipvt, int lipvt, real *rdiag,
	 real *acnorm, real *wa)
{
#ifdef USE_LAPACK
    int i, j, k;
    double t;
    double* tau = wa;
    const int ltau = N;
    int lwork = -1;
    int info = 0;
    double* work;

    if (pivot) {
        assert( lipvt >= N );
        /* set all columns free */
        memset(ipvt, 0, sizeof(int)*N);
    }
    
    /* query optimal size of work */
    lwork = -1;
    if (pivot) {
        dgeqp3_(&m,&n,a,&lda,ipvt,tau,tau,&lwork,&info);
        lwork = (int)tau[0];
        assert( lwork >= 3*n+1  );
    } else {
        dgeqrf_(&m,&n,a,&lda,tau,tau,&lwork,&info);
        lwork = (int)tau[0];
        assert( lwork >= 1 && lwork >= n );
    }
    
    assert( info == 0 );
    
    /* alloc work area */
    work = (double *)malloc(sizeof(double)*lwork);
    assert(work != NULL);
    
    /* set acnorm first (from the doc of qrfac, acnorm may point to the same area as rdiag) */
    if (acnorm != rdiag) {
        for (j = 0; j < n; ++j) {
            acnorm[j] = enorm<N>(&a[j * lda]);
        }
    }
    
    /* QR decomposition */
    if (pivot) {
        dgeqp3_(&m,&n,a,&lda,ipvt,tau,work,&lwork,&info);
    } else {
        dgeqrf_(&m,&n,a,&lda,tau,work,&lwork,&info);
    }
    assert(info == 0);
    
    /* set rdiag, before the diagonal is replaced */
    memset(rdiag, 0, sizeof(double)*n);
    for(i=0 ; i<n ; ++i) {
        rdiag[i] = a[i*lda+i];
    }
    
    /* modify lower trinagular part to look like qrfac's output */
    for(i=0 ; i<ltau ; ++i) {
        k = i*lda+i;
        t = tau[i];
        a[k] = t;
        for(j=i+1 ; j<m ; j++) {
            k++;
            a[k] *= t;
        }
    }
    
    free(work);
#else /* !USE_LAPACK */
    /* Initialized data */

#define p05 .05

    /* System generated locals */
    real d1;

    /* Local variables */
    int i, j, k, jp1;
    real sum;
    real temp;
    real epsmch;
    real ajnorm;

/*     ********** */

/*     subroutine qrfac */

/*     this subroutine uses householder transformations with column */
/*     pivoting (optional) to compute a qr factorization of the */
/*     m by n matrix a. that is, qrfac determines an orthogonal */
/*     matrix q, a permutation matrix p, and an upper trapezoidal */
/*     matrix r with diagonal elements of nonincreasing magnitude, */
/*     such that a*p = q*r. the householder transformation for */
/*     column k, k = 1,2,...,min(m,n), is of the form */

/*                           t */
/*           i - (1/u(k))*u*u */

/*     where u has zeros in the first k-1 positions. the form of */
/*     this transformation and the method of pivoting first */
/*     appeared in the corresponding linpack subroutine. */

/*     the subroutine statement is */

/*       subroutine qrfac(m,n,a,lda,pivot,ipvt,lipvt,rdiag,acnorm,wa) */

/*     where */

/*       m is a positive integer input variable set to the number */
/*         of rows of a. */

/*       n is a positive integer input variable set to the number */
/*         of columns of a. */

/*       a is an m by n array. on input a contains the matrix for */
/*         which the qr factorization is to be computed. on output */
/*         the strict upper trapezoidal part of a contains the strict */
/*         upper trapezoidal part of r, and the lower trapezoidal */
/*         part of a contains a factored form of q (the non-trivial */
/*         elements of the u vectors described above). */

/*       lda is a positive integer input variable not less than m */
/*         which specifies the leading dimension of the array a. */

/*       pivot is a logical input variable. if pivot is set true, */
/*         then column pivoting is enforced. if pivot is set false, */
/*         then no column pivoting is done. */

/*       ipvt is an integer output array of length lipvt. ipvt */
/*         defines the permutation matrix p such that a*p = q*r. */
/*         column j of p is column ipvt(j) of the identity matrix. */
/*         if pivot is false, ipvt is not referenced. */

/*       lipvt is a positive integer input variable. if pivot is false, */
/*         then lipvt may be as small as 1. if pivot is true, then */
/*         lipvt must be at least n. */

/*       rdiag is an output array of length n which contains the */
/*         diagonal elements of r. */

/*       acnorm is an output array of length n which contains the */
/*         norms of the corresponding columns of the input matrix a. */
/*         if this information is not needed, then acnorm can coincide */
/*         with rdiag. */

/*       wa is a work array of length n. if pivot is false, then wa */
/*         can coincide with rdiag. */

/*     subprograms called */

/*       minpack-supplied ... dpmpar,enorm */

/*       fortran-supplied ... dmax1,dsqrt,min0 */

/*     argonne national laboratory. minpack project. march 1980. */
/*     burton s. garbow, kenneth e. hillstrom, jorge j. more */

/*     ********** */
    (void)lipvt;

/*     epsmch is the machine precision. */

    epsmch = dpmpar(1);

/*     compute the initial column norms and initialize several arrays. */

    for (j = 0; j < N; ++j) {
	acnorm[j] = enorm<N>(&a[j * lda + 0]);
	rdiag[j] = acnorm[j];
	wa[j] = rdiag[j];
	if (pivot) {
	    ipvt[j] = j+1;
	}
    }

/*     reduce a to r with householder transformations. */

    for (j = 0; j < N; ++j) {
	if (pivot) {

/*        bring the column of largest norm into the pivot position. */

            int kmax = j;
            for (k = j; k < N; ++k) {
                if (rdiag[k] > rdiag[kmax]) {
                    kmax = k;
                }
            }
            if (kmax != j) {
                for (i = 0; i < N; ++i) {
                    temp = a[i + j * lda];
                    a[i + j * lda] = a[i + kmax * lda];
                    a[i + kmax * lda] = temp;
                }
                rdiag[kmax] = rdiag[j];
                wa[kmax] = wa[j];
                k = ipvt[j];
                ipvt[j] = ipvt[kmax];
                ipvt[kmax] = k;
            }
        }

/*        compute the householder transformation to reduce the */
/*        j-th column of a to a multiple of the j-th unit vector. */

	ajnorm = enorm(N - (j+1) + 1, &a[j + j * lda]);
	if (ajnorm != 0.) {
            if (a[j + j * lda] < 0.) {
                ajnorm = -ajnorm;
            }
            for (i = j; i < N; ++i) {
                a[i + j * lda] /= ajnorm;
            }
            a[j + j * lda] += 1.;

/*        apply the transformation to the remaining columns */
/*        and update the norms. */

            jp1 = j + 1;
            if (N > jp1) {
                for (k = jp1; k < N; ++k) {
                    sum = 0.;
                    for (i = j; i < N; ++i) {
                        sum += a[i + j * lda] * a[i + k * lda];
                    }
                    temp = sum / a[j + j * lda];
                    for (i = j; i < N; ++i) {
                        a[i + k * lda] -= temp * a[i + j * lda];
                    }
                    if (pivot && rdiag[k] != 0.) {
                        temp = a[j + k * lda] / rdiag[k];
                        /* Computing MAX */
                        d1 = 1. - temp * temp;
                        rdiag[k] *= sqrt((std::max((real)0.,d1)));
                        /* Computing 2nd power */
                        d1 = rdiag[k] / wa[k];
                        if (p05 * (d1 * d1) <= epsmch) {
                            rdiag[k] = enorm(N - (j+1), &a[jp1 + k * lda]);
                            wa[k] = rdiag[k];
                        }
                    }
                }
            }
        }
	rdiag[j] = -ajnorm;
    }

/*     last card of subroutine qrfac. */
#endif /* !USE_LAPACK */
} /* qrfac_ */

template<int N>
void dogleg(const real *r, int lr, const real *diag, const real *qtb, real delta, real *x, 
	    real *wa1, real *wa2)
{
    /* System generated locals */
    real d1, d2, d3, d4;

    /* Local variables */
    int i, j, k, l, jj, jp1;
    real sum, temp, alpha, bnorm;
    real gnorm, qnorm, epsmch;
    real sgnorm;

    /* Parameter adjustments */
    --wa2;
    --wa1;
    --x;
    --qtb;
    --diag;
    --r;
    (void)lr;

    /* Function Body */

/*     epsmch is the machine precision. */

    epsmch = dpmpar(1);

/*     first, calculate the gauss-newton direction. */

    jj = N * (N + 1) / 2 + 1;
    for (k = 1; k <= N; ++k) {
	j = N - k + 1;
	jp1 = j + 1;
	jj -= k;
	l = jj + 1;
	sum = 0.;
	if (N >= jp1) {
            for (i = jp1; i <= N; ++i) {
                sum += r[l] * x[i];
                ++l;
            }
        }
	temp = r[jj];
	if (temp == 0.) {
            l = j;
            for (i = 1; i <= j; ++i) {
                /* Computing MAX */
                d2 = fabs(r[l]);
                temp = std::max(temp,d2);
                l = l + N - i;
            }
            temp = epsmch * temp;
            if (temp == 0.) {
                temp = epsmch;
            }
        }
	x[j] = (qtb[j] - sum) / temp;
    }

/*     test whether the gauss-newton direction is acceptable. */

    for (j = 1; j <= N; ++j) {
	wa1[j] = 0.;
	wa2[j] = diag[j] * x[j];
    }
    qnorm = enorm<N>(&wa2[1]);
    if (qnorm <= delta) {
        return;
    }

/*     the gauss-newton direction is not acceptable. */
/*     next, calculate the scaled gradient direction. */

    l = 1;
    for (j = 1; j <= N; ++j) {
	temp = qtb[j];
	for (i = j; i <= N; ++i) {
	    wa1[i] += r[l] * temp;
	    ++l;
	}
	wa1[j] /= diag[j];
    }

/*     calculate the norm of the scaled gradient and test for */
/*     the special case in which the scaled gradient is zero. */

    gnorm = enorm<N>(&wa1[1]);
    sgnorm = 0.;
    alpha = delta / qnorm;
    if (gnorm != 0.) {

/*     calculate the point along the scaled gradient */
/*     at which the quadratic is minimized. */

        for (j = 1; j <= N; ++j) {
            wa1[j] = wa1[j] / gnorm / diag[j];
        }
        l = 1;
        for (j = 1; j <= N; ++j) {
            sum = 0.;
            for (i = j; i <= N; ++i) {
                sum += r[l] * wa1[i];
                ++l;
            }
            wa2[j] = sum;
        }
        temp = enorm<N>(&wa2[1]);
        sgnorm = gnorm / temp / temp;

/*     test whether the scaled gradient direction is acceptable. */

        alpha = 0.;
        if (sgnorm < delta) {

/*     the scaled gradient direction is not acceptable. */
/*     finally, calculate the point along the dogleg */
/*     at which the quadratic is minimized. */

            bnorm = enorm<N>(&qtb[1]);
            temp = bnorm / gnorm * (bnorm / qnorm) * (sgnorm / delta);
            /* Computing 2nd power */
            d1 = sgnorm / delta;
            /* Computing 2nd power */
            d2 = temp - delta / qnorm;
            /* Computing 2nd power */
            d3 = delta / qnorm;
            /* Computing 2nd power */
            d4 = sgnorm / delta;
            temp = temp - delta / qnorm * (d1 * d1)
                   + sqrt(d2 * d2
                          + (1. - d3 * d3) * (1. - d4 * d4));
            /* Computing 2nd power */
            d1 = sgnorm / delta;
            alpha = delta / qnorm * (1. - d1 * d1) / temp;
        }
    }

/*     form appropriate convex combination of the gauss-newton */
/*     direction and the scaled gradient direction. */

    temp = (1. - alpha) * std::min(sgnorm,delta);
    for (j = 1; j <= N; ++j) {
	x[j] = temp * wa1[j] + alpha * x[j];
    }

} /* dogleg_ */

template<int N>
int hybrdX(root_fcn *fcn_nn, void *p, real *x, real *
	fvec, real xtol, int maxfev, int ml, int mu, 
	real epsfcn, real *diag, int mode, real
	factor, int nprint, int *nfev, real *
	fjac, int ldfjac, real *r, int lr, real *qtf, 
	real *wa1, real *wa2, real *wa3, real *wa4)
{
    /* Initialized data */

#define p1 .1
#define p5 .5
#define p001 .001
#define p0001 1e-4

    /* System generated locals */
    int fjac_dim1, fjac_offset, i1;
    real d1, d2;

    /* Local variables */
    int i, j, l, jm1, iwa[1];
    real sum;
    int sing;
    int iter;
    real temp;
    int msum, iflag;
    real delta = 0.;
    int jeval;
    int ncsuc;
    real ratio;
    real fnorm;
    real pnorm, xnorm = 0., fnorm1;
    int nslow1, nslow2;
    int ncfail;
    real actred, epsmch, prered;
    int info;

    /* Parameter adjustments */
    --wa4;
    --wa3;
    --wa2;
    --wa1;
    --qtf;
    --diag;
    --fvec;
    --x;
    fjac_dim1 = ldfjac;
    fjac_offset = 1 + fjac_dim1 * 1;
    fjac -= fjac_offset;
    --r;

    /* Function Body */

/*     epsmch is the machine precision. */

    epsmch = dpmpar(1);

    info = 0;
    iflag = 0;
    *nfev = 0;

/*     check the input parameters for errors. */

    if (N <= 0 || xtol < 0. || maxfev <= 0 || ml < 0 || mu < 0 ||
	    factor <= 0. || ldfjac < N || lr < N * (N + 1) / 2) {
	goto TERMINATE;
    }
    if (mode == 2) {
        for (j = 1; j <= N; ++j) {
            if (diag[j] <= 0.) {
                goto TERMINATE;
            }
        }
    }

/*     evaluate the function at the starting point */
/*     and calculate its norm. */

    iflag = fcn_nn(p, &x[1], &fvec[1], 1);
    *nfev = 1;
    if (iflag < 0) {
	goto TERMINATE;
    }
    fnorm = enorm2<N>(&fvec[1]);

/*     determine the number of calls to fcn needed to compute */
/*     the jacobian matrix. */

/* Computing MIN */
    i1 = ml + mu + 1;
    msum = std::min(i1,N);

/*     initialize iteration counter and monitors. */

    iter = 1;
    ncsuc = 0;
    ncfail = 0;
    nslow1 = 0;
    nslow2 = 0;

/*     beginning of the outer loop. */

    for (;;) {
        jeval = true;

/*        calculate the jacobian matrix. */

        iflag = fdjac1<N>(fcn_nn, p, &x[1], &fvec[1], &fjac[fjac_offset], ldfjac,
			  ml, mu, epsfcn, &wa1[1], &wa2[1]);
        *nfev += msum;
        if (iflag < 0) {
            goto TERMINATE;
        }

/*        compute the qr factorization of the jacobian. */

        qrfac<N>(&fjac[fjac_offset], ldfjac, false, iwa, 1, &wa1[1], &wa2[1], &wa3[1]);

/*        on the first iteration and if mode is 1, scale according */
/*        to the norms of the columns of the initial jacobian. */

        if (iter == 1) {
            if (mode != 2) {
                for (j = 1; j <= N; ++j) {
                    diag[j] = wa2[j];
                    if (wa2[j] == 0.) {
                        diag[j] = 1.;
                    }
                }
            }

/*        on the first iteration, calculate the norm of the scaled x */
/*        and initialize the step bound delta. */

            for (j = 1; j <= N; ++j) {
                wa3[j] = diag[j] * x[j];
            }
            xnorm = enorm<N>(&wa3[1]);
            delta = factor * xnorm;
            if (delta == 0.) {
                delta = factor;
            }
        }

/*        form (q transpose)*fvec and store in qtf. */

        for (i = 1; i <= N; ++i) {
            qtf[i] = fvec[i];
        }
        for (j = 1; j <= N; ++j) {
            if (fjac[j + j * fjac_dim1] != 0.) {
                sum = 0.;
                for (i = j; i <= N; ++i) {
                    sum += fjac[i + j * fjac_dim1] * qtf[i];
                }
                temp = -sum / fjac[j + j * fjac_dim1];
                for (i = j; i <= N; ++i) {
                    qtf[i] += fjac[i + j * fjac_dim1] * temp;
                }
            }
        }

/*        copy the triangular factor of the qr factorization into r. */

        sing = false;
        for (j = 1; j <= N; ++j) {
            l = j;
            jm1 = j - 1;
            if (jm1 >= 1) {
                for (i = 1; i <= jm1; ++i) {
                    r[l] = fjac[i + j * fjac_dim1];
                    l = l + N - i;
                }
            }
            r[l] = wa1[j];
            if (wa1[j] == 0.) {
                sing = true;
            }
        }

/*        accumulate the orthogonal factor in fjac. */

        qform<N>(&fjac[fjac_offset], ldfjac, &wa1[1]);

/*        rescale if necessary. */

        if (mode != 2) {
            for (j = 1; j <= N; ++j) {
                /* Computing MAX */
                d1 = diag[j], d2 = wa2[j];
                diag[j] = std::max(d1,d2);
            }
        }

/*        beginning of the inner loop. */

        for (;;) {

/*           if requested, call fcn to enable printing of iterates. */

            if (nprint > 0) {
                iflag = 0;
                if ((iter - 1) % nprint == 0) {
                    iflag = fcn_nn(p, &x[1], &fvec[1], 0);
                }
                if (iflag < 0) {
                    goto TERMINATE;
                }
            }

/*           determine the direction p. */

            dogleg<N>(&r[1], lr, &diag[1], &qtf[1], delta, &wa1[1], &wa2[1], &wa3[1]);

/*           store the direction p and x + p. calculate the norm of p. */

            for (j = 1; j <= N; ++j) {
                wa1[j] = -wa1[j];
                wa2[j] = x[j] + wa1[j];
                wa3[j] = diag[j] * wa1[j];
            }
            pnorm = enorm<N>(&wa3[1]);

/*           on the first iteration, adjust the initial step bound. */

            if (iter == 1) {
                delta = std::min(delta,pnorm);
            }

/*           evaluate the function at x + p and calculate its norm. */

            iflag = fcn_nn(p, &wa2[1], &wa4[1], 1);
            ++(*nfev);
            if (iflag < 0) {
                goto TERMINATE;
            }
            fnorm1 = enorm2<N>(&wa4[1]);

/*           compute the scaled actual reduction. */

            actred = -1.;
            if (fnorm1 < fnorm) {
                /* already 2nd power */
                actred = 1. - fnorm1 / fnorm;
            }

/*           compute the scaled predicted reduction. */

            l = 1;
            for (i = 1; i <= N; ++i) {
                sum = 0.;
                for (j = i; j <= N; ++j) {
                    sum += r[l] * wa1[j];
                    ++l;
                }
                wa3[i] = qtf[i] + sum;
            }
            temp = enorm2<N>(&wa3[1]);
            prered = 0.;
            if (temp < fnorm) {
                /* already 2nd power */
                prered = 1. - temp / fnorm;
            }

/*           compute the ratio of the actual to the predicted */
/*           reduction. */

            ratio = 0.;
            if (prered > 0.) {
                ratio = actred / prered;
            }

/*           update the step bound. */

            if (ratio < p1) {
                ncsuc = 0;
                ++ncfail;
                delta = p5 * delta;
            } else {
                ncfail = 0;
                ++ncsuc;
                if (ratio >= p5 || ncsuc > 1) {
                    /* Computing MAX */
                    d1 = pnorm / p5;
                    delta = std::max(delta,d1);
                }
                if (fabs(ratio - 1.) <= p1) {
                    delta = pnorm / p5;
                }
            }

/*           test for successful iteration. */

            if (ratio >= p0001) {

/*           successful iteration. update x, fvec, and their norms. */

                for (j = 1; j <= N; ++j) {
                    x[j] = wa2[j];
                    wa2[j] = diag[j] * x[j];
                    fvec[j] = wa4[j];
                }
                xnorm = enorm<N>(&wa2[1]);
                fnorm = fnorm1;
                ++iter;
            }

/*           determine the progress of the iteration. */

            ++nslow1;
            if (actred >= p001) {
                nslow1 = 0;
            }
            if (jeval) {
                ++nslow2;
            }
            if (actred >= p1) {
                nslow2 = 0;
            }

/*           test for convergence. */

            if (delta <= xtol * xnorm || fnorm == 0.) {
                info = 1;
            }
            if (info != 0) {
                goto TERMINATE;
            }

/*           tests for termination and stringent tolerances. */

            if (*nfev >= maxfev) {
                info = 2;
            }
            /* Computing MAX */
            d1 = p1 * delta;
            if (p1 * std::max(d1,pnorm) <= epsmch * xnorm) {
                info = 3;
            }
            if (nslow2 == 5) {
                info = 4;
            }
            if (nslow1 == 10) {
                info = 5;
            }
            if (info != 0) {
                goto TERMINATE;
            }

/*           criterion for recalculating jacobian approximation */
/*           by forward differences. */

            if (ncfail == 2) {
                goto TERMINATE_INNER_LOOP;
            }

/*           calculate the rank one modification to the jacobian */
/*           and update qtf if necessary. */

            for (j = 1; j <= N; ++j) {
                sum = 0.;
                for (i = 1; i <= N; ++i) {
                    sum += fjac[i + j * fjac_dim1] * wa4[i];
                }
                wa2[j] = (sum - wa3[j]) / pnorm;
                wa1[j] = diag[j] * (diag[j] * wa1[j] / pnorm);
                if (ratio >= p0001) {
                    qtf[j] = sum;
                }
            }

/*           compute the qr factorization of the updated jacobian. */

            r1updt<N>(&r[1], lr, &wa1[1], &wa2[1], &wa3[1], &sing);
            r1mpyq<N, N>(&fjac[fjac_offset], ldfjac, &wa2[1], &wa3[1]);
            r1mpyq<1, N>(&qtf[1], 1, &wa2[1], &wa3[1]);

/*           end of the inner loop. */

            jeval = false;
        }
TERMINATE_INNER_LOOP:
        ;
/*        end of the outer loop. */

    }
TERMINATE:

/*     termination, either normal or user imposed. */

    if (iflag < 0) {
	info = iflag;
    }
    if (nprint > 0) {
	fcn_nn(p, &x[1], &fvec[1], 0);
    }
    return info;

/*     last card of subroutine hybrd. */

} /* hybrd_ */


static int nonlin(struct nonlin_param &par) {
    int maxfev, mode, nprint, ldfjac;
    creal xtol, epsfcn, factor;
    creal __attribute__((aligned(16))) fvec[2];
    creal __attribute__((aligned(16))) fjac[2*2];
    creal __attribute__((aligned(16))) qtf[2];
    creal __attribute__((aligned(16))) wa1[2];
    creal __attribute__((aligned(16))) wa2[2];
    creal __attribute__((aligned(16))) wa3[2];
    creal __attribute__((aligned(16))) wa4[2];
    creal diag[2] = {};
    int ml, mu, lr;
    creal r[(2*(2+1))/2];
    lr = (2*(2+1))/2;
    ml = 2-1; /* unbanded jacobian */
    mu = 2-1; /* unbanded jacobian */
    ldfjac = 2;

    /* parameter */
    xtol = 0.1;
    maxfev = 12;
    epsfcn = 0.;
    //mode = 2;  /* explicit variable scaling with diag */
    mode = 1;  /* automatic variable scaling */
    factor = 100000.0;
    nprint = 0;
    /**/

    
    Matrix<creal, 8, 1> p2;
    Matrix<creal, 8, 1> *p_old;
    p2.head<8>() = (*par.p).head<8>() + Mpc;
    p_old = par.p;
    par.p = &p2;
    

    *par.info = hybrdX<2>(fcn, &par, &(*par.v)(6), fvec, xtol, maxfev, ml, mu, epsfcn,
                          diag, mode, factor, nprint, par.nfev, fjac, ldfjac, r, lr,
                          qtf, wa1, wa2, wa3, wa4);
    *par.fnorm = enorm<2>(fvec);
    
    int ret = 0;
    if (*par.info != 1) {
        if (!(*par.info == 5 && *par.fnorm < 1e-20)) {
            ret = -1;
        }
    }
    par.p = p_old;
    
    return ret;
}


} // end namespace nonlin






#include <zita-resampler/resampler.h>

class FixedRateResampler {
private:
    Resampler r_up, r_down;
    int inputRate, outputRate;
    int last_in_count;
public:
    int setup(int _inputRate, int _outputRate);
    int up(int count, float *input, float *output);
    void down(float *input, float *output);
    int max_out_count(int in_count) {
	return static_cast<int>(ceil((in_count*static_cast<double>(outputRate))/inputRate)); }
};

int FixedRateResampler::setup(int _inputRate, int _outputRate)
{
    const int qual = 16; // resulting in a total delay of 2*qual (0.7ms @44100)
    inputRate = _inputRate;
    outputRate = _outputRate;
    if (inputRate == outputRate) {
	return 0;
    }
    // upsampler
    int ret = r_up.setup(inputRate, outputRate, 1, qual);
    if (ret) {
	return ret;
    }
    // k == filtlen() == 2 * qual
    // pre-fill with k-1 zeros
    r_up.inp_count = r_up.filtlen() - 1;
    r_up.out_count = 1;
    r_up.inp_data = r_up.out_data = 0;
    r_up.process();
    // downsampler
    ret = r_down.setup(outputRate, inputRate, 1, qual);
    if (ret) {
	return ret;
    }
    // k == filtlen() == 2 * qual * fact
    // pre-fill with k-2 zeros
    r_down.inp_count = r_down.filtlen() - 2;
    r_down.out_count = 1;
    r_down.inp_data = r_down.out_data = 0;
    r_down.process();
    return 0;
}

int FixedRateResampler::up(int count, float *input, float *output)
{
    if (inputRate == outputRate) {
	memcpy(output, input, count*sizeof(float));
	r_down.out_count = count;
	return count;
    }
    r_up.inp_count = count;
    r_down.out_count = count+1; // +1 == trick to drain input
    r_up.inp_data = input;
    int m = max_out_count(count);
    r_up.out_count = m;
    r_up.out_data = output;
    r_up.process();
    assert(r_up.inp_count == 0);
    assert(r_up.out_count <= 1);
    r_down.inp_count = m - r_up.out_count;
    return r_down.inp_count;
}

void FixedRateResampler::down(float *input, float *output)
{
    if (inputRate == outputRate) {
	memcpy(output, input, r_down.out_count*sizeof(float));
	return;
    }
    r_down.inp_data = input;
    r_down.out_data = output;
    r_down.process();
    assert(r_down.inp_count == 0);
    assert(r_down.out_count == 1);
}

FixedRateResampler smp;

class DKPlugin: public PluginDef {
private:
    float pots[0+1];
    creal pots_last[0+1];
    Matrix<creal, 7, 1> x_last;
    Array<double, 6, 1> K0;
    Array<double, 6, 1> K1;
    Array<double, 6, 1> K2;
    Array<double, 6, 1> K3;
    Array<double, 6, 1> K4;
    Array<double, 6, 1> K5;
    Array<double, 6, 1> Y;
    Array<double, 6, 1> X;
public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;
    DKPlugin();
    static void init(unsigned int samplingFreq, PluginDef *plugin);
    static void process(int count, float *input, float *output, PluginDef *plugin);
    static int registerparam(const ParamReg& reg);
    static int uiloader(const UiBuilder& builder, int form);
    static void del_instance(PluginDef *plugin);
};

DKPlugin::DKPlugin():
    PluginDef(), pots(), pots_last(), x_last(), K0(), K1(), K2(), K3(), K4(), K5(), Y(), X() {
    version = PLUGINDEF_VERSION;
    flags = 0;
    id = "JCM800Pre";
    name = N_("JCM 800 Preamp");
    groups = 0;
    description = N_("Simulation of JCM 800 preamp circuit");
    category = N_("Distortion");
    shortname = N_("JCM800Pre");
    mono_audio = process;
    set_samplerate = init;
    register_params = registerparam;
    load_ui = uiloader;
    delete_instance = del_instance;
    for (int i = 0; i < 7; i++) {
        x_last(i) = x0_data[i];
    }
}

#define PARAM(p) ("JCM800Pre" "." p)

int DKPlugin::registerparam(const ParamReg& reg) {
            DKPlugin& self = *static_cast<DKPlugin*>(reg.plugin);
        
        reg.registerVar(PARAM("P6v"), N_("Volume"), "S", N_(""), &self.pots[0], 0.5, 0, 1, 0.01);
        return 0;
}

void DKPlugin::init(unsigned int samplingFreq, PluginDef *plugin) {
    smp.setup(samplingFreq, 96000);
    DKPlugin& self = *static_cast<DKPlugin*>(plugin);
    self.X.setZero();
   self.Y.setZero();
   unsigned int fs = samplingFreq;
       self.K5(0) = 1.75171807136529e-7*pow(fs,2);
       self.K4(0) = -7.00687228546118e-7*pow(fs,2);
       self.K3(0) = 1.05103084281918e-6*pow(fs,2) + 0.000200534456453583*fs;
       self.K2(0) = -7.00687228546118e-7*pow(fs,2) - 0.000401068912907166*fs;
       self.K1(0) = 1.75171807136529e-7*pow(fs,2) + 0.000200534456453583*fs + 0.0107626291380964;
       self.K0(0) = 0.0;
       self.K5(1) = -3.50343614273059e-7*pow(fs,2);
       self.K4(1) = 1.40137445709224e-6*pow(fs,2);
       self.K3(1) = -2.10206168563835e-6*pow(fs,2);
       self.K2(1) = 1.40137445709224e-6*pow(fs,2);
       self.K1(1) = -3.50343614273059e-7*pow(fs,2) + 0.0215252582761928;
       self.K0(1) = 0.0;
       self.K5(2) = 1.75171807136529e-7*pow(fs,2);
       self.K4(2) = -7.00687228546118e-7*pow(fs,2);
       self.K3(2) = 1.05103084281918e-6*pow(fs,2) - 0.000200534456453583*fs;
       self.K2(2) = -7.00687228546118e-7*pow(fs,2) + 0.000401068912907166*fs;
       self.K1(2) = 1.75171807136529e-7*pow(fs,2) - 0.000200534456453583*fs + 0.0107626291380964;
       self.K0(2) = 0.0;
       self.K5(3) = 1.70232916580416e-7*pow(fs,2);
       self.K4(3) = -6.75992775765549e-7*pow(fs,2);
       self.K3(3) = 1.00164193725804e-6*pow(fs,2) + 7.7521112860407e-5*fs;
       self.K2(3) = -6.51298322984981e-7*pow(fs,2) - 3.20288821276382e-5*fs;
       self.K1(3) = 1.50477354355961e-7*pow(fs,2) - 0.000168505574325945*fs - 0.00752160890512768;
       self.K0(3) = 4.93889055611368e-9*pow(fs,2) + 0.000123013343593176*fs + 0.0182842380432241;
       self.K5(4) = -3.40465833160831e-7*pow(fs,2);
       self.K4(4) = 1.3519855515311e-6*pow(fs,2);
       self.K3(4) = -2.00328387451608e-6*pow(fs,2);
       self.K2(4) = 1.30259664596996e-6*pow(fs,2);
       self.K1(4) = -3.00954708711922e-7*pow(fs,2) - 0.0150432178102554;
       self.K0(4) = -9.87778111222735e-9*pow(fs,2) + 0.0365684760864481;
       self.K5(5) = 1.70232916580416e-7*pow(fs,2);
       self.K4(5) = -6.75992775765549e-7*pow(fs,2);
       self.K3(5) = 1.00164193725804e-6*pow(fs,2) - 7.7521112860407e-5*fs;
       self.K2(5) = -6.51298322984981e-7*pow(fs,2) + 3.20288821276382e-5*fs;
       self.K1(5) = 1.50477354355961e-7*pow(fs,2) + 0.000168505574325945*fs - 0.00752160890512768;
       self.K0(5) = 4.93889055611368e-9*pow(fs,2) - 0.000123013343593176*fs + 0.0182842380432241;
}

void DKPlugin::process(int n, float *u, float *o, PluginDef *plugin) {
    DKPlugin& self = *static_cast<DKPlugin*>(plugin);
    creal t[0+1];
    t[0] = (exp(5 * self.pots[0]) - 1) / (exp(5) - 1);
        for (int j = 0; j < n; j++) {
        self.pots_last[0] = 0.01 * t[0] + (1-0.01) * self.pots_last[0];
        double P6v = self.pots_last[0];
        Array<double, 6, 1> AB;
        AB = (((((self.K5 * P6v + self.K4) * P6v + self.K3) * P6v + self.K2) * P6v + self.K1) * P6v + self.K0);
        double out;
        out = ((u[j] * AB(0) + self.X(0) * AB(1) + self.X(1) * AB(2)) - (self.Y(0) * AB(4) + self.Y(1) * AB(5))) / AB(3);
        self.Y(1) = self.Y(0);
        self.Y(0) = out;
        self.X(1) = self.X(0);
        self.X(0) = u[j];
        o[j] = out;
    }
    u = o;

// start copied and modified code
    Matrix<creal, 8, 1> mi;
    creal fnorm;
    Matrix<creal, 8, 1> mp;
    Array<creal, 8, 1> p_val;
    nonlin_param par(&mp, &mi, &g_v, &g_info, &g_nfev, &fnorm, &p_val);
    float buf[smp.max_out_count(n)];
    n = smp.up(n, u, buf);
#define GET_U (buf+j*1)
    for (int j = 0; j < n; j++) {
#define DTP_U float
        
        Matrix<creal, 8, 1> dp;
        dp << self.x_last, Map<Matrix<float,1,1> >(GET_U).cast<creal>();
        mp = Mp * dp;
        nonlin::nonlin(par);
        Matrix<creal, 16, 1> d;
        d << self.x_last, Map<Matrix<float,1,1> >(GET_U).cast<creal>(), mi;
        Matrix<creal, 7, 1>& xn = self.x_last;
        xn = Mx * d + Mxc;
        Map<Matrix<float, 1, 1> > xo(buf+1*j);
        xo = (Mo * d).cast<float>();
        {
            static double y;
            static double xm1;
            y = 0.999345929619 * (buf[j] - xm1) + 0.998691859237 * y;
            xm1 = buf[j];
            buf[j] = y;
        }

#undef GET_U
#undef DTP_U
    }
    smp.down(buf, o);
// end copied code
}

int DKPlugin::uiloader(const UiBuilder& b, int form) {
    if (!(form & UI_FORM_STACK)) {
        return -1;
    }
    
b.openHorizontalhideBox("");
    b.create_master_slider(PARAM("P6v"), 0);
b.closeBox();
b.openHorizontalBox("");

    b.create_small_rackknobr(PARAM("P6v"), 0);
b.closeBox();

    return 0;
}

void DKPlugin::del_instance(PluginDef *p)
{
    delete static_cast<DKPlugin*>(p);
}


namespace pluginlib { namespace jcm800pre {
PluginDef *plugin() {
    return new DKPlugin;
}
}}
