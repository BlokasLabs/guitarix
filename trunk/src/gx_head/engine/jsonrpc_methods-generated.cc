/* generated by make_jsonrpc_methods.py */

/* ANSI-C code produced by gperf version 3.0.3 */
/* Command-line: gperf  */
/* Computed positions: -k'1,6,$' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif

/* maximum key range = 134, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
hash (register const char *str, register unsigned int len)
{
  static const unsigned char asso_values[] =
    {
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
      137, 137, 137, 137, 137,   5, 137,  30,  20,  50,
       36,  10, 137,  10,  25,  35,   0,  40,  10,  10,
       60,  10,   5,  12,   0,   0,   0,   0,   0,  15,
      137, 137, 137, 137, 137, 137, 137, 137
    };
  register int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[5]];
      /*FALLTHROUGH*/
      case 5:
      case 4:
      case 3:
      case 2:
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval + asso_values[(unsigned char)str[len - 1]];
}

#ifdef __GNUC__
__inline
#ifdef __GNUC_STDC_INLINE__
__attribute__ ((__gnu_inline__))
#endif
#endif
const struct CmdConnection::methodnames *
in_word_set (register const char *str, register unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 60,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 25,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 136
    };

  static const struct CmdConnection::methodnames wordlist[] =
    {
      {""}, {""}, {""},
      {"set", RPCM_set},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"presets", RPCM_presets},
      {"get", RPCM_get},
      {"list", RPCM_list},
      {""},
      {"save_preset", RPCM_save_preset},
      {""}, {""},
      {"setpreset", RPCM_setpreset},
      {"pf_insert_after", RPCM_pf_insert_after},
      {"queryunit", RPCM_queryunit},
      {"pf_save", RPCM_pf_save},
      {"rename_preset", RPCM_rename_preset},
      {"reorder_preset", RPCM_reorder_preset},
      {"banks", RPCM_banks},
      {"remove_rack_unit", RPCM_remove_rack_unit},
      {"erase_preset", RPCM_erase_preset},
      {"parameterlist", RPCM_parameterlist},
      {"midi_size", RPCM_midi_size},
      {"get_tuning", RPCM_get_tuning},
      {"pf_insert_before", RPCM_pf_insert_before},
      {"bank_reorder", RPCM_bank_reorder},
      {""},
      {"help", RPCM_help},
      {"request_midi_value_update", RPCM_request_midi_value_update},
      {"get_tuner_freq", RPCM_get_tuner_freq},
      {"switch_tuner", RPCM_switch_tuner},
      {"midi_modifyCurrent", RPCM_midi_modifyCurrent},
      {"bank_save", RPCM_bank_save},
      {"midi_set_config_mode", RPCM_midi_set_config_mode},
      {"bank_remove", RPCM_bank_remove},
      {""},
      {"bank_set_flag", RPCM_bank_set_flag},
      {"midi_set_current_control", RPCM_midi_set_current_control},
      {""}, {""},
      {"bank_get_contents", RPCM_bank_get_contents},
      {"setstate", RPCM_setstate},
      {""},
      {"midi_get_config_mode", RPCM_midi_get_config_mode},
      {"insert_rack_unit", RPCM_insert_rack_unit},
      {""},
      {"get_parameter", RPCM_get_parameter},
      {"midi_get_current_control", RPCM_midi_get_current_control},
      {"pf_append", RPCM_pf_append},
      {"switch", RPCM_switch},
      {"bank_get_filename", RPCM_bank_get_filename},
      {"getstate", RPCM_getstate},
      {"get_rack_unit_order", RPCM_get_rack_unit_order},
      {"get_jack_load_status", RPCM_get_jack_load_status},
      {"rename_bank", RPCM_rename_bank},
      {"save_current", RPCM_save_current},
      {""},
      {"convert_preset", RPCM_convert_preset},
      {""},
      {"midi_deleteParameter", RPCM_midi_deleteParameter},
      {""},
      {"unlisten", RPCM_unlisten},
      {"get_max_input_level", RPCM_get_max_input_level},
      {"get_max_output_level", RPCM_get_max_output_level},
      {""}, {""},
      {"get_midi_controller_map", RPCM_get_midi_controller_map},
      {"bank_insert_content", RPCM_bank_insert_content},
      {"pluginlist", RPCM_pluginlist},
      {""}, {""},
      {"shutdown", RPCM_shutdown},
      {""},
      {"getversion", RPCM_getversion},
      {""}, {""}, {""}, {""},
      {"bank_insert_new", RPCM_bank_insert_new},
      {""}, {""},
      {"get_bank", RPCM_get_bank},
      {""},
      {"desc", RPCM_desc},
      {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {"bank_check_reparse", RPCM_bank_check_reparse},
      {"jack_cpu_load", RPCM_jack_cpu_load},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""}, {""}, {""},
      {"plugin_load_ui", RPCM_plugin_load_ui},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
      {""}, {""}, {""},
      {"listen", RPCM_listen}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register const char *s = wordlist[key].name;

          if (*str == *s && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}


const jsonrpc_method_def jsonrpc_method_list[] = {
	{ "getversion", true },
	{ "help", true },
	{ "shutdown", false },
	{ "listen", false },
	{ "unlisten", false },
	{ "getstate", true },
	{ "setstate", false },
	{ "jack_cpu_load", true },
	{ "get_jack_load_status", true },
	{ "get", true },
	{ "set", false },
	{ "parameterlist", true },
	{ "get_parameter", true },
	{ "desc", true },
	{ "list", true },
	{ "banks", true },
	{ "setpreset", false },
	{ "bank_insert_content", true },
	{ "bank_insert_new", true },
	{ "get_bank", true },
	{ "rename_bank", true },
	{ "bank_remove", true },
	{ "bank_get_contents", true },
	{ "bank_reorder", false },
	{ "bank_check_reparse", true },
	{ "bank_get_filename", true },
	{ "bank_set_flag", false },
	{ "convert_preset", true },
	{ "bank_save", false },
	{ "pf_save", false },
	{ "save_current", false },
	{ "save_preset", false },
	{ "presets", true },
	{ "rename_preset", true },
	{ "reorder_preset", false },
	{ "erase_preset", false },
	{ "pf_append", false },
	{ "pf_insert_before", false },
	{ "pf_insert_after", false },
	{ "pluginlist", true },
	{ "plugin_load_ui", true },
	{ "get_rack_unit_order", true },
	{ "insert_rack_unit", false },
	{ "remove_rack_unit", false },
	{ "queryunit", true },
	{ "get_midi_controller_map", true },
	{ "midi_size", true },
	{ "midi_deleteParameter", false },
	{ "midi_modifyCurrent", false },
	{ "midi_get_config_mode", true },
	{ "midi_set_config_mode", false },
	{ "midi_get_current_control", true },
	{ "midi_set_current_control", false },
	{ "request_midi_value_update", false },
	{ "get_tuning", true },
	{ "get_tuner_freq", true },
	{ "switch_tuner", false },
	{ "get_max_input_level", true },
	{ "get_max_output_level", true },
	{ "switch", false },
};
