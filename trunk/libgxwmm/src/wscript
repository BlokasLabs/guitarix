#! /usr/bin/env python
# encoding: utf-8

import TaskGen, Configure, Utils, Logs, os.path

@Configure.conf
def cfg_get_variable(self, package, variable):
    p = Utils.pproc.Popen(["pkg-config", "--variable="+variable, package],
                          stdout=Utils.pproc.PIPE, shell=False)
    v = p.communicate()[0].strip()
    if p.returncode or not v:
        self.fatal('fail to get variable %s for package %s' % (variable, package))
    self.env[variable.upper()] = v

def configure(conf):
    conf.cfg_get_variable(package='glibmm-2.4', variable='gmmprocdir')

def template2cc(task):
    basename = os.path.splitext(
        os.path.basename(task.inputs[0].srcpath(task.env)))[0]
    srcdir = task.inputs[0].parent
    cmd = ["%s/gmmproc" % task.env["GMMPROCDIR"],
           "--defs", srcdir.srcpath(task.env),
           basename,
           srcdir.srcpath(task.env),
           srcdir.bldpath(task.env),
           ]
    Logs.debug("runner: system command -> %s" % cmd)
    return Utils.exec_command(cmd, shell=False)

TaskGen.declare_chain(
    name      = 'gmmproc',
    rule      = template2cc,
    ext_in    = '.ccg',
    ext_out   = '.cc',
    reentrant = False,
    #install   = None,
    )

def build(bld):
    sources = [
        "controlparameter.ccg",
        "switch.ccg",
        ]
    bld(features = ['cxx', 'cprogram'],
        ccflags = bld.env['CXXFLAGS'],
        source = "generate_defs_gxw.cc",
        includes = ["../../libgxw"],
        uselib = ['GTKMM'],
        lib    = 'glibmm_generate_extra_defs-2.4',
        uselib_local = "gxw",
        target = 'generate_defs_gxw',
        )
    bld.add_group()
    bld(features = ['cxx', 'cshlib', 'libtool'],
        type = 'cshlib',
        vnum = "0.1",
        ccflags = bld.env['CXXFLAGS'],
        includes = ['.'],
        source = sources,
        uselib = ['GTKMM'],
        target = 'gxwmm',
        chmod=0755,
        install_path = bld.env['BINDIR'],
        )
