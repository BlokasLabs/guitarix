#! /usr/bin/env python
# encoding: utf-8

import Task, Configure, Options, Utils, Logs, shutil, os.path
from TaskGen import extension

@Configure.conf
def cfg_get_variable(self, package, variable):
    p = Utils.pproc.Popen(["pkg-config", "--variable="+variable, package],
                          stdout=Utils.pproc.PIPE, shell=False)
    v = p.communicate()[0].strip()
    if p.returncode or not v:
        self.fatal('fail to get variable %s for package %s' % (variable, package))
    self.env[variable.upper()] = v

def set_options(opt):
    grp = opt.add_option_group("Compiler / Linker flags")
    grp.add_option('--use-generated-cpp',
                   action='store_const',
                   default=False,
                   const=True,
                   help=('use the pre-built c++ library wrapper files'),
                   )

def configure(conf):
    conf.check_tool('misc')
    conf.cfg_get_variable(package='glibmm-2.4', variable='gmmprocdir')
    conf.env["USE_GENERATED_CPP"] = Options.options.use_generated_cpp

def template2cc(task):
    basename = os.path.splitext(
        os.path.basename(task.inputs[0].srcpath(task.env)))[0]
    srcdir = task.inputs[0].parent
    try:
        os.remove(task.outputs[0].bldpath(task.env))
    except OSError:
        pass
    try:
        os.mkdir(task.outputs[0].parent.bldpath(task.env) + "/private")
    except OSError:
        pass
    spath = srcdir.srcpath(task.env)
    dpath = srcdir.bldpath(task.env)
    cmd = ["%s/gmmproc" % task.env["GMMPROCDIR"],
           "--defs", dpath,
           "-I", dpath,
           basename,
           spath,
           dpath,
           ]
    Logs.debug("runner: system command -> %s" % cmd)
    ret = Utils.exec_command(cmd, shell=False)
    if ret != 0:
        return ret
    dpath += "/"
    spath += "/../gxwmm-generated/"
    try:
        shutil.copy2(dpath+basename+".cc", spath+basename+".cc")
        shutil.copy2(dpath+basename+".h", spath+basename+".h")
        shutil.copy2(dpath+"private/"+basename+"_p.h", spath+"private/"+basename+"_p.h")
    except (OSError, IOError), e:
        Logs.error("runner: cannot copy file -> %s" % e)
        return e.errno
    return 0

Task.task_type_from_func(
    'gmmproc',
    template2cc,
    color='BLUE',
    before='cxx')

@extension('.hg')
def process_hg(self, node):
        cc_node = node.change_ext('.cc')
        task = self.create_task('gmmproc', [node], [cc_node])
        task.after = ["gxwdefs"]
        task.deps_nodes.append(
            node.parent.find_resource(node.name.replace('.hg','.ccg')))
        task.deps_nodes.append(
            node.parent.find_or_declare('gxw.defs'))
        self.allnodes.append(cc_node)

def header2defs(task):
    sources = " ".join(["'%s'" % v.srcpath(task.env) for v in task.inputs])
    path = task.generator.path
    dst = task.outputs[0].bldpath(task.env)
    cmd = ("python '%s'/h2def.py -m gxw %s > '%s'"
           % (task.env["CODEGENDIR"], sources, dst))
    Logs.debug("runner: system command -> %s" % cmd)
    return Utils.exec_command(cmd, shell=True)

def build_generate_wrapper(bld):
    header = ["GxTuner.h",
              "GxFastMeter.h",
              "GxWaveView.h",
              "GxRegler.h",
              "GxSelector.h",
              "GxSwitch.h",
              "GxToggleImage.h",
              "GxControlParameter.h",
              "GxIREdit.h",
              "GxRadioButton.h",
              "GxWheel.h",
              "GxKnob.h",
              "GxBigKnob.h",
              "GxSmallKnob.h",
              "GxHSlider.h",
              "GxMiniSlider.h",
              "GxVSlider.h",
              "GxEQSlider.h",
              "GxPaintBox.h",
              "GxMeterScale.h",
              "GxGradient.h",
              "GxValueDisplay.h",
              ]
    header = ["../../libgxw/gxw/"+v for v in header]
    bld(features = ['cxx', 'cprogram'],
        ccflags = bld.env['CXXFLAGS'],
        source = "generate_defs_gxw.cc",
        includes = ["../../libgxw"],
        uselib = ['GTKMM'],
        lib    = 'glibmm_generate_extra_defs-2.4',
        uselib_local = "gxw",
        target = 'generate_defs_gxw',
        )
    bld.add_group()
    bld(name = "sigdefs",
        rule = "${SRC} | sed 's/GdkEvent\\*/GdkEventButton*/' > ${TGT}", #FIXME
        source = 'generate_defs_gxw',
        target = 'signals.defs',
        )
    bld(name = "mthdefs",
        rule = header2defs,
        source = header,
        target = "methods.defs",
        )
    bld(name = "enumdefs",
        rule = bld.path.srcpath(bld.env)+"/enum.pl ${SRC} > ${TGT}",
        source = header,
        target = "enum.defs",
        )
    bld(name = "gxwdefs",
        rule = 'for f in ${SRC}; do echo "(include $(basename $f))"; done > ${TGT}',
        source = ["methods.defs","signals.defs","enum.defs"],
        target = "gxw.defs",
        after = ["sigdefs","mthdefs","enumdefs"],
        )
    bld(rule = "cp ${SRC} ${TGT}", 
        source = "docs.xml",
        target = "gxw_docs.xml",
        )
    bld(features = 'subst',
        source   = 'convert.m4.in',
        target   = 'convert.m4',
        dict     = dict(GMMPROCDIR=bld.env["GMMPROCDIR"]),
        )

def build(bld):
    sources = [
        "controlparameter.hg",
        "switch.hg",
        "regler.hg",
        "knob.hg",
        "bigknob.hg",
        "smallknob.hg",
        "tuner.hg",
        "fastmeter.hg",
        "waveview.hg",
        "selector.hg",
        "toggleimage.hg",
        "iredit.hg",
        "radiobutton.hg",
        "wheel.hg",
        "hslider.hg",
        "minislider.hg",
        "vslider.hg",
        "eqslider.hg",
        "paintbox.hg",
        "meterscale.hg",
        #"gradient.hg",
        "valuedisplay.hg",
        ]
    if bld.env["USE_GENERATED_CPP"]:
        gdir = "../gxwmm-generated/"
        for v in sources:
            s = v.replace(".hg", ".cc")
            bld(name = "copy-generated-cc",
                rule = "cp ${SRC} ${TGT}",
                source = gdir + s,
                target = s,
                )
            s = v.replace(".hg", ".h")
            bld(name = "copy-generated-h",
                rule = "cp ${SRC} ${TGT}",
                source = gdir + s,
                target = s,
                )
            s = v.replace(".hg", "_p.h")
            bld(name = "copy-generated-p-h",
                rule = "cp ${SRC} ${TGT}",
                source = gdir + "private/" + s,
                target = "private/" + s,
                )
        sources = [v.replace(".hg",".cc") for v in sources]
    else:
        build_generate_wrapper(bld)
    bld.add_group()
    bld(features = ['cxx', 'cstaticlib'],
        ccflags = bld.env['CXXFLAGS'],
        includes = ['..','../../libgxw'],
        source = sources,
        uselib = ['GTKMM'],
        target = 'gxwmm',
        )
