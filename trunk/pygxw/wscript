# -*- python -*-
# -*- coding: utf-8 -*-

import Logs, Utils, Configure, Options

@Configure.conf
def cfg_get_variable(self, package, variable):
    p = Utils.pproc.Popen(["pkg-config", "--variable="+variable, package],
                          stdout=Utils.pproc.PIPE, shell=False)
    v = p.communicate()[0].strip()
    if p.returncode or not v:
        self.fatal('fail to get variable %s for package %s' % (variable, package))
    self.env[variable.upper()] = v

def set_options(opt):
    opt.tool_options('compiler_cc')
    grp = opt.add_option_group("Compiler / Linker flags")
    grp.add_option('--python-wrapper',
                   action='store_const',
                   default=False,
                   const=True,
                   help=('build python wrapper for library'),
                   )

def configure(conf):
    if Options.options.python_wrapper:
        conf.env["GX_PYTHON_WRAPPER"] = 1
        if not Options.options.shared_lib:
            conf.env["GX_LIB_SHARED"] = 1
    if not Options.options.python_wrapper:
        return
    conf.check_tool('compiler_cc')
    conf.check_tool('python')
    conf.check_python_headers()
    conf.check_cfg(package='pygobject-2.0', args='--cflags --libs', uselib_store='PYGOBJECT', mandatory=True)
    conf.check_cfg(package='pygtk-2.0', args='--cflags --libs', uselib_store='PYGTK' ,mandatory=True)
    conf.cfg_get_variable(package='pygtk-2.0', variable='defsdir')
    conf.cfg_get_variable(package='pygtk-2.0', variable='codegendir')
    conf.check_python_module("numpy")

def h2defs(task):
    sources = " ".join(["'%s'" % v.srcpath(task.env) for v in task.inputs])
    path = task.generator.path
    lib = path.find_resource(task.generator.lib).srcpath(task.env)
    fltr = path.find_resource(task.generator.filter).srcpath(task.env)
    dst = task.outputs[0].bldpath(task.env)
    cmd = ("python '%s'/defsgen.py -m gx -l %s -f '%s' %s > '%s' && cat '%s' >> '%s'"
           % (task.env["CODEGENDIR"], lib, fltr, sources, dst, fltr, dst))
    Logs.debug("runner: system command -> %s" % cmd)
    return Utils.exec_command(cmd, shell=True)

def defs2c(task):
    ovr = task.inputs[0].srcpath(task.env)
    src = task.inputs[1].srcpath(task.env)
    dst = task.outputs[0].bldpath(task.env)
    defsdir = task.env["DEFSDIR"]
    cmd = ("pygobject-codegen-2.0"
           " --prefix gxw"
           " --register '%s'/gdk-types.defs"
           " --register '%s'/gtk-types.defs"
           " --override '%s'"
           " --outfilename '%s'"
           " '%s'"
           " > '%s'"
           % (defsdir, defsdir, ovr, dst, src, dst))
    Logs.debug("runner: system command -> %s" % cmd)
    return Utils.exec_command(cmd,shell=True)

def build(bld):
    bld.add_group()
    sources = ["GxTuner.h",
               "GxFastMeter.h",
               "GxWaveView.h",
               "GxRegler.h",
               "GxSelector.h",
               "GxSwitch.h",
               "GxToggleImage.h",
               "GxControlParameter.h",
               "GxIREdit.h",
               "GxRadioButton.h",
               "GxWheel.h",
               "GxKnob.h",
               "GxBigKnob.h",
               "GxSmallKnob.h",
               "GxHSlider.h",
               "GxMiniSlider.h",
               "GxVSlider.h",
               "GxEQSlider.h",
               "GxPaintBox.h",
               "GxMeterScale.h",
               "GxGradient.h",
               ]
    bld(name = "h2defs",
        target = "gxw.defs",
        rule = h2defs,
        source = ["../libgxw/gxw/"+v for v in sources],
        lib = "../libgxw/gxw/libgxw.so",
        filter = "gxw-manual.defs",
        )
    bld(name="defs2c",
        target = "gxw.c",
        rule = defs2c,
        source = ['gxw.override','gxw.defs'],
        after = "h2defs",
        )
    bld.add_group()
    prog = bld(
        features = ['cc','cxx','pyext','cshlib'],
        source = ['gxw.c','gxw-module.c'],
        target = 'gxw',
        uselib = ['PYGOBJECT','PYGTK','GTK2'],
        ccflags = ["-g"],
        includes = ['../libgxw'],
        )
    if bld.env["GX_LIB_STATIC"]: # prefer static
        prog.uselib_local = ['gxw']
        prog.linkflags = ["-Wl,-u,gxw_init"]
    else:
        prog.libpath = [bld.path.find_dir("../libgxw").bldpath(bld.env)]
        prog.lib = ["gxw"]
