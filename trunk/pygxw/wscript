# -*- python -*-
# -*- coding: utf-8 -*-

from waflib import Logs, Options

def options(opt):
    grp = opt.get_option_group("Guitarix Widget Library")
    grp.add_option('--python-wrapper',
                   action='store_const',
                   default=False,
                   const=True,
                   help=('build python wrapper for library (Developers only!!)'),
                   )

def configure(conf):
    if not Options.options.python_wrapper:
        return
    conf.env.GX_PYTHON_WRAPPER = True
    conf.env.GXW_SHARED = True
    conf.check_python_headers()
    conf.check_cfg(package='pygtk-2.0', args='--cflags --libs', uselib_store='PYGTK' ,mandatory=True)
    conf.cfg_get_variable(package='pygtk-2.0', variable='defsdir')
    conf.check_python_module("numpy")

def h2defs(task):
    sources = " ".join(["'%s'" % v.bldpath() for v in task.inputs])
    path = task.generator.path
    lib = path.find_resource(task.generator.lib).bldpath()
    fltr = path.find_resource(task.generator.filter).bldpath()
    dst = task.outputs[0].bldpath()
    cmd = ("python '%s'/defsgen.py -m gx -l %s -f '%s' %s > '%s' && cat '%s' >> '%s'"
           % (task.env.PYGOBJECT_codegendir, lib, fltr, sources, dst, fltr, dst))
    Logs.debug("runner: system command -> %s" % cmd)
    return task.exec_command(cmd, shell=True)

def defs2c(task):
    ovr = task.inputs[0].bldpath()
    src = task.inputs[1].bldpath()
    dst = task.outputs[0].bldpath()
    defsdir = task.env.DEFSDIR
    cmd = ("pygobject-codegen-2.0"
           " --prefix gxw"
           " --register '%s'/gdk-types.defs"
           " --register '%s'/gtk-types.defs"
           " --override '%s'"
           " --outfilename '%s'"
           " '%s'"
           " > '%s'"
           % (defsdir, defsdir, ovr, dst, src, dst))
    Logs.debug("runner: system command -> %s" % cmd)
    return task.exec_command(cmd,shell=True)

def build(bld):
    if not bld.env.GX_PYTHON_WRAPPER:
        return
    bld.add_group()
    sources = ["GxTuner.h",
               "GxFastMeter.h",
               "GxWaveView.h",
               "GxRegler.h",
               "GxSelector.h",
               "GxSwitch.h",
               "GxToggleImage.h",
               "GxControlParameter.h",
               "GxIREdit.h",
               "GxRadioButton.h",
               "GxWheel.h",
               "GxWheelVertical.h",
               "GxKnob.h",
               "GxBigKnob.h",
               "GxSmallKnob.h",
               "GxSmallKnobR.h",
               "GxHSlider.h",
               "GxMiniSlider.h",
               "GxVSlider.h",
               "GxEQSlider.h",
               "GxLevelSlider.h",
               "GxPaintBox.h",
               "GxMeterScale.h",
               "GxGradient.h",
               "GxValueDisplay.h",
               "GxRackTuner.h",
               ]
    bld(name = "h2defs",
        target = "gxw.defs",
        rule = h2defs,
        source = ["../libgxw/gxw/"+v for v in sources],
        lib = "../libgxw/gxw/libgxw.so",
        filter = "gxw-manual.defs",
        )
    bld(name="defs2c",
        target = "gxw.c",
        rule = defs2c,
        source = ['gxw.override','gxw.defs'],
        after = "h2defs",
        )
    bld.add_group()
    prog = bld(
        name = 'pygxw',
        features = ['c','cxx','pyext','cshlib'],
        source = ['gxw.c','gxw-module.c'],
        target = 'gxw',
        use = ['PYGOBJECT','PYGTK','GTK2','gxw'],
        ccflags = ["-g"],
        )
